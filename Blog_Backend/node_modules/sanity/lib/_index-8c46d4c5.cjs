'use strict';

var _templateObject;

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var jsxRuntime = require('react/jsx-runtime');

var ui = require('@sanity/ui');

var styled = require('styled-components');

var icons = require('@sanity/icons');

require('@reach/auto-id');

require('react');

var prepareConfig = require('./_prepareConfig-2f1df9bf.cjs');

require('lodash');

require('react-rx');

require('rxjs');

require('rxjs/operators');

require('shallow-equals');

require('history');

require('@sanity/bifur-client');

require('react-is');

require('@sanity/schema');

require('@sanity/schema/_internal');

require('@sanity/validation');

require('date-fns');

require('pluralize-esm');

require('@sanity/image-url');

require('@sanity/types');

require('@sanity/mutator');

require('json-reduce');

require('rxjs-exhaustmap-with-trailing');

require('@sanity/util/content');

require('@sanity/util/paths');

require('dataloader');

require('raf');

require('groq-js');

require('rxjs-etc/operators');

require('mendoza');

require('@sanity/diff');

require('@sanity/color');

require('react-fast-compare');

require('@sanity/portable-text-editor');

require('scroll-into-view-if-needed');

require('@sanity/util/legacyDateFormat');

require('speakingurl');

require('@sanity/uuid');

require('get-random-values-esm');

require('@sanity/asset-utils');

require('exif-component');

require('react-dom');

require('nanoid');

require('@sanity/generate-help-url');

var PaneItem = require('./_PaneItem-e9d8c4da.cjs');

require('@sanity/client');

require('@juggle/resize-observer');

require('nano-pubsub');

require('observable-callback');

require('debug');

require('react-refractor');

require('refractor/lang/bash');

require('refractor/lang/javascript');

require('refractor/lang/json');

require('refractor/lang/jsx');

require('refractor/lang/typescript');

require('use-hot-module-reload');

require('classnames');

require('use-device-pixel-ratio');

require('color2k');

require('react-sortable-hoc');

require('@sanity/block-tools');

require('diff-match-patch');

require('date-fns/isValid');

require('react-focus-lock');

require('date-fns/formatDistanceToNow');

require('is-hotkey');

require('react-copy-to-clipboard');

require('sanity-diff-patch');

require('@rexxars/react-json-inspector');

require('hashlru');

require('framer-motion');

require('react-props-stream');

require('@sanity/logos');

require('@portabletext/react');

function _interopDefaultLegacy(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    'default': e
  };
}

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

const Divider = styled__default["default"].hr(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: var(--card-border-color);\n  height: 1px;\n  margin: 0;\n  border: none;\n"])));

function ListPane(props) {
  const {
    childItemId,
    index,
    isActive,
    isSelected,
    pane,
    paneKey
  } = props;
  const {
    features
  } = prepareConfig.useDeskTool();
  const {
    collapsed: layoutCollapsed
  } = prepareConfig.usePaneLayout();
  const {
    defaultLayout,
    displayOptions,
    items,
    menuItems,
    menuItemGroups,
    title
  } = pane;
  const paneShowIcons = displayOptions == null ? void 0 : displayOptions.showIcons;

  const shouldShowIconForItem = item => {
    var _a;

    const itemShowIcon = (_a = item.displayOptions) == null ? void 0 : _a.showIcon;

    if (typeof itemShowIcon !== "undefined") {
      return itemShowIcon !== false;
    }

    return paneShowIcons !== false;
  };

  return /* @__PURE__ */jsxRuntime.jsxs(prepareConfig.Pane, {
    currentMaxWidth: 350,
    "data-testid": "desk-tool-list-pane",
    id: paneKey,
    maxWidth: 640,
    minWidth: 320,
    selected: isSelected,
    children: [prepareConfig._DEBUG, /* @__PURE__ */jsxRuntime.jsx(prepareConfig.PaneHeader, {
      actions: /* @__PURE__ */jsxRuntime.jsx(prepareConfig.PaneHeaderActions, {
        menuItems,
        menuItemGroups
      }),
      backButton: features.backButton && index > 0 && /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
        as: prepareConfig.BackLink,
        "data-as": "a",
        icon: icons.ArrowLeftIcon,
        mode: "bleed"
      }),
      title
    }), /* @__PURE__ */jsxRuntime.jsx(prepareConfig.PaneContent, {
      overflow: layoutCollapsed ? void 0 : "auto",
      children: /* @__PURE__ */jsxRuntime.jsx(ui.Stack, {
        padding: 2,
        space: 1,
        children: items && items.map((item, itemIndex) => {
          if (item.type === "divider") {
            return /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
              paddingY: 1,
              children: /* @__PURE__ */jsxRuntime.jsx(Divider, {})
            }, "divider-".concat(itemIndex));
          }

          const pressed = !isActive && childItemId === item.id;
          const selected = isActive && childItemId === item.id;
          return /* @__PURE__ */jsxRuntime.jsx(PaneItem.PaneItem, {
            icon: shouldShowIconForItem(item) ? item.icon : false,
            id: item.id,
            layout: defaultLayout,
            pressed,
            schemaType: item.schemaType,
            selected,
            title: item.title,
            value: item._id && item.schemaType ? {
              _id: item._id,
              _type: item.schemaType.name,
              title: item.title
            } : void 0
          }, item.id);
        })
      })
    })]
  });
}

exports["default"] = ListPane;
//# sourceMappingURL=_index-8c46d4c5.cjs.map
