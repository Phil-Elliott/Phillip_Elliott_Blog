function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

export * from '@sanity/types';
import { S as StudioProvider, a as StudioLayout, u as useSource } from './_prepareConfig-56d87958.js';
export { I as IntentLink, L as Link, P as PatchEvent, R as RouteScope, y as RouterContext, z as RouterProvider, b as SANITY_VERSION, q as SourceProvider, A as StateLink, a as StudioLayout, S as StudioProvider, T as ToolLink, r as ToolMenu, J as WithRouter, W as WorkspaceProvider, w as getDraftId, x as getPublishedId, i as isDev, e as isProd, B as route, f as useClient, s as useColorScheme, g as useConnectionState, c as useCurrentUser, h as useDataset, j as useDocumentOperation, k as useEditState, C as useIntentLink, D as useLink, l as useProjectId, E as useRouter, F as useRouterState, m as useSchema, u as useSource, G as useStateLink, n as useSyncState, o as useTemplates, d as useUser, p as useValidationStatus, t as useWorkspace, v as useWorkspaces, H as withRouter } from './_prepareConfig-56d87958.js';
export { D as DefaultDocument } from './_DefaultDocument-08bd7ee5.js';
export { c as createPlugin } from './_createPlugin-6e6e8fa6.js';
import 'rxjs/operators';
import { studioTheme } from '@sanity/ui';
import 'lodash';
import '@sanity/bifur-client';
import 'react';
import 'react-is';
import '@sanity/schema';
import '@sanity/schema/_internal';
import '@sanity/validation';
import 'rxjs';
import { jsx } from 'react/jsx-runtime';
import '@sanity/icons';
import 'history';
import 'date-fns';
import 'pluralize-esm';
import 'react-rx';
import '@sanity/image-url';
import 'shallow-equals';
import '@sanity/mutator';
import 'json-reduce';
import 'rxjs-exhaustmap-with-trailing';
import '@sanity/util/content';
import '@sanity/util/paths';
import 'dataloader';
import 'raf';
import 'groq-js';
import 'rxjs-etc/operators';
import 'mendoza';
import '@sanity/diff';
import '@sanity/color';
import 'react-fast-compare';
import '@sanity/portable-text-editor';
import 'scroll-into-view-if-needed';
import '@reach/auto-id';
import '@sanity/util/legacyDateFormat';
import 'speakingurl';
import '@sanity/uuid';
import 'get-random-values-esm';
import '@sanity/asset-utils';
import 'exif-component';
import { render } from 'react-dom';
import '@sanity/client';
import '@juggle/resize-observer';
import 'nano-pubsub';
import 'styled-components';
import 'observable-callback';
import 'debug';
import 'react-refractor';
import 'refractor/lang/bash';
import 'refractor/lang/javascript';
import 'refractor/lang/json';
import 'refractor/lang/jsx';
import 'refractor/lang/typescript';
import 'use-hot-module-reload';
import 'classnames';
import 'use-device-pixel-ratio';
import 'nanoid';
import 'color2k';
import 'react-sortable-hoc';
import '@sanity/block-tools';
import 'diff-match-patch';
import 'date-fns/isValid';
import 'react-focus-lock';
import 'date-fns/formatDistanceToNow';
import '@sanity/generate-help-url';
import 'is-hotkey';
import 'react-copy-to-clipboard';
import 'sanity-diff-patch';
import '@rexxars/react-json-inspector';
import 'hashlru';
import 'framer-motion';
import 'react-props-stream';
import '@sanity/logos';
import '@portabletext/react';

function createConfig(config) {
  return config;
}

function Studio(props) {
  return /* @__PURE__ */jsx(StudioProvider, _objectSpread(_objectSpread({}, props), {}, {
    children: /* @__PURE__ */jsx(StudioLayout, {})
  }));
}

function renderStudio(rootElement, config) {
  if (!rootElement) {
    throw new Error("Missing root element to mount application into");
  }

  render( /* @__PURE__ */jsx(Studio, {
    config
  }), rootElement);
}

function useTools() {
  return useSource().tools;
}

const defaultTheme = _objectSpread(_objectSpread({}, studioTheme), {}, {
  focusRing: {
    offset: -1,
    width: 2
  }
});

export { Studio, createConfig, defaultTheme, renderStudio, useTools };
//# sourceMappingURL=index.js.map
