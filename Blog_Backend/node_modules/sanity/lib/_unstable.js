const _excluded = ["children", "header", "onClose", "width"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import 'lodash';
import 'rxjs/operators';
import { Flex, Box, Button, Popover, Container, Card, Text } from '@sanity/ui';
import '@sanity/bifur-client';
import React, { useMemo, useState, useEffect } from 'react';
import 'react-is';
import { K as FormFieldPresenceContext, M as useProjectStore, Z as ZIndexContext, N as defaults, O as useUserColorManager, Q as getAnnotationColor, U as DiffTooltip, V as Checkbox, X as FromToArrow, Y as SanityPreview, _ as DiffFromTo, $ as DatetimePreview, a0 as StringPreview, a1 as SlugPreview, I as IntentLink } from './_prepareConfig-56d87958.js';
export { ax as BlockImagePreview, ay as BlockPreview, aP as CONNECTING, cw as ChangeBreadcrumb, ao as ChangeConnectorRoot, ai as ChangeFieldWrapper, aj as ChangeIndicator, ak as ChangeIndicatorContext, cc as ChangeList, cd as ChangeResolver, cx as ChangeTitleSegment, aB as CircularProgress, as as CollapseMenu, at as CollapseMenuButton, c3 as ComponentViewBuilder, a2 as ConfirmDeleteDialog, al as ConnectorContext, aS as CorsOriginError, bS as DEFAULT_INTENT_HANDLER, au as DefaultPreview, av as DetailPreview, ce as DiffCard, cl as DiffContext, cf as DiffErrorBoundary, _ as DiffFromTo, cy as DiffInspectWrapper, ch as DiffString, cg as DiffStringSegment, U as DiffTooltip, an as DisabledChangeConnectorRoot, bH as DocumentBuilder, cm as DocumentChangeContext, bK as DocumentListBuilder, a3 as DocumentPreviewPresence, am as EnabledChangeConnectorRoot, cz as FallbackDiff, cA as FieldChange, a4 as FieldPresence, a5 as FieldPresenceWithOverlay, a6 as FieldPresenceWithoutOverlay, c2 as FormViewBuilder, ci as FromTo, X as FromToArrow, b6 as GUARDED, bN as GenericListBuilder, c4 as GenericViewBuilder, cB as GroupChange, b$ as HELP_URL, aJ as ImperativeToast, bO as InitialValueTemplateItemBuilder, az as InlinePreview, aa as InsufficientPermissionsMessage, aK as LegacyLayerProvider, aC as LinearProgress, aw as MediaPreview, bV as MenuItemBuilder, bZ as MenuItemGroupBuilder, cj as MetaInfo, ck as NoChanges, a7 as OverlayDisabled, P as PatchEvent, a8 as PresenceOverlay, ad as PreviewCard, cC as RevertChangesButton, bA as SESSION_ID, a9 as SanityDefaultPreview, Y as SanityPreview, aH as ScrollContainer, aI as ScrollMonitor, b_ as SerializeError, ab as StyledCard, aA as TemplatePreview, af as TextWithTone, ae as TextWithToneStyle, bz as Timeline, bx as TimelineController, ap as Tracker, ag as UserAvatar, cI as UserColorManagerProvider, aL as ValidationList, cD as ValueError, ah as WithReferringDocuments, aT as __tmp_wrap_crossProjectToken, bB as __tmp_wrap_presenceStore, aN as _createAuthStore, b4 as checkoutPair, c1 as component, aO as createAuthStore, b2 as createBufferedDocument, aR as createConnectionStatusStore, bd as createDocumentStore, bu as createGrantsStore, bw as createHistoryStore, b3 as createObservableBufferedDocument, by as createObservableController, b7 as createOperationsAPI, bE as createProjectStore, cF as createSchema, aD as createScope, bF as createSettingsStore, aE as createUseReporter, cH as createUserColorManager, bG as createUserStore, bP as defaultInitialValueTemplateItems, bT as defaultIntentChecker, bI as documentFromEditor, bJ as documentFromEditorWithInitialValue, b5 as editState, bb as emitOperation, c0 as form, c9 as getAnnotationAtPath, Q as getAnnotationColor, cn as getChangeVerb, ca as getDiffAtPath, bl as getDocumentPairPermissions, bo as getDocumentValuePermissions, bh as getInitialValueStream, bc as getOperationEvents, bW as getOrderingMenuItem, bX as getOrderingMenuItemsForSchemaType, be as getPairListener, br as getTemplatePermissions, bL as getTypeNamesFromFilter, cv as getValueError, cr as isAddedItemDiff, cp as isFieldChange, cq as isGroupChange, cs as isRemovedItemDiff, ct as isUnchangedDiff, bi as listenQuery, bQ as maybeSerializeInitialValueTemplateItem, bU as maybeSerializeMenuItem, bY as maybeSerializeMenuItemGroup, c5 as maybeSerializeView, bR as menuItemsFromInitialValueTemplateItems, co as noop, aQ as onRetry, b8 as remoteSnapshots, bv as removeMissingReferences, cu as resolveDiffComponent, bM as shallowIntentChecker, b9 as snapshotPair, c7 as useAnnotationColor, a_ as useConnectionStatusStore, aY as useCrossProjectTokenStore, c as useCurrentUser, c8 as useDiffAnnotationColor, c6 as useDocumentChange, bn as useDocumentPairPermissions, bm as useDocumentPairPermissionsFromHookFactory, bD as useDocumentPresence, aX as useDocumentPreviewStore, aZ as useDocumentStore, bf as useDocumentType, bq as useDocumentValuePermissions, bp as useDocumentValuePermissionsFromHookFactory, bg as useDocumentValues, bC as useGlobalPresence, aV as useGrantsStore, aW as useHistoryStore, bj as useInitialValue, bk as useInitialValueResolverContext, aG as useOnScroll, a$ as usePresenceStore, ac as usePreviewCard, M as useProjectStore, aq as useReportedValues, ar as useReporter, b1 as useResolveInitialValueForType, aF as useRovingFocus, b0 as useSettingsStore, bt as useTemplatePermissions, bs as useTemplatePermissionsFromHookFactory, cE as useTimeAgo, d as useUser, cG as useUserColor, O as useUserColorManager, aU as useUserStore, aM as useZIndex, ba as validation, cb as visitDiff } from './_prepareConfig-56d87958.js';
import 'react-rx';
import 'rxjs';
import 'shallow-equals';
import { CloseIcon } from '@sanity/icons';
import { jsx, jsxs } from 'react/jsx-runtime';
import { isKeyedObject } from '@sanity/types';
import '@sanity/color';
import '@sanity/util/content';
import '@sanity/portable-text-editor';
import 'scroll-into-view-if-needed';
import * as PathUtils from '@sanity/util/paths';
import '@reach/auto-id';
import '@sanity/util/legacyDateFormat';
import 'date-fns';
import 'speakingurl';
import '@sanity/image-url';
import '@sanity/uuid';
import 'get-random-values-esm';
import '@sanity/asset-utils';
import 'history';
import 'react-dom';
import 'exif-component';
export { r as resolveConfig } from './_resolveConfig-19697b96.js';
export { D as DefaultDocument, G as GlobalErrorHandler } from './_DefaultDocument-08bd7ee5.js';
export { C as ComponentBuilder, D as DocumentListItemBuilder, a as DocumentTypeListBuilder, L as ListBuilder, b as ListItemBuilder, i as isDocumentListItem } from './_DocumentTypeList-43c73c38.js';
export { c as createStructureBuilder } from './_createStructureBuilder-25277a65.js';
import '@sanity/schema';
import '@sanity/schema/_internal';
import '@sanity/validation';
import '@sanity/mutator';
import 'json-reduce';
import 'rxjs-exhaustmap-with-trailing';
import 'dataloader';
import 'raf';
import 'groq-js';
import 'rxjs-etc/operators';
import 'mendoza';
import '@sanity/diff';
import 'react-fast-compare';
import 'pluralize-esm';
import 'sanity-diff-patch';
import '@sanity/client';
import '@juggle/resize-observer';
import 'nano-pubsub';
import 'styled-components';
import 'observable-callback';
import 'debug';
import 'react-refractor';
import 'refractor/lang/bash';
import 'refractor/lang/javascript';
import 'refractor/lang/json';
import 'refractor/lang/jsx';
import 'refractor/lang/typescript';
import 'use-hot-module-reload';
import 'classnames';
import 'use-device-pixel-ratio';
import 'nanoid';
import 'color2k';
import 'react-sortable-hoc';
import '@sanity/block-tools';
import 'diff-match-patch';
import 'date-fns/isValid';
import 'react-focus-lock';
import 'date-fns/formatDistanceToNow';
import '@sanity/generate-help-url';
import 'is-hotkey';
import 'react-copy-to-clipboard';
import '@rexxars/react-json-inspector';
import 'hashlru';
import 'framer-motion';
import 'react-props-stream';
import '@sanity/logos';
import '@portabletext/react';
const EMPTY_ARRAY = [];

function trimChildPath(path, childPath) {
  return PathUtils.startsWith(path, childPath) ? PathUtils.trimLeft(path, childPath) : EMPTY_ARRAY;
}

function PresenceScope(props) {
  const {
    readOnly,
    path,
    children
  } = props;
  const contextPresence = React.useContext(FormFieldPresenceContext);
  const childPresence = useMemo(() => {
    return readOnly ? EMPTY_ARRAY : (contextPresence || EMPTY_ARRAY).filter(presence => {
      return PathUtils.startsWith(path, presence.path);
    }).map(presence => _objectSpread(_objectSpread({}, presence), {}, {
      path: trimChildPath(path, presence.path)
    }));
  }, [contextPresence, path, readOnly]);
  return /* @__PURE__ */jsx(FormFieldPresenceContext.Provider, {
    value: childPresence,
    children
  });
}

function useProject() {
  const projectStore = useProjectStore();
  const [value, setValue] = useState(null);
  useEffect(() => {
    const project$ = projectStore.get();
    const sub = project$.subscribe(setValue);
    return () => sub.unsubscribe();
  }, [projectStore]);
  return {
    value
  };
}

function useProjectDatasets() {
  const projectStore = useProjectStore();
  const [value, setValue] = useState(null);
  useEffect(() => {
    const project$ = projectStore.getDatasets();
    const sub = project$.subscribe(setValue);
    return () => sub.unsubscribe();
  }, [projectStore]);
  return {
    value
  };
}

function ZIndexProvider(_ref) {
  let {
    children
  } = _ref;
  return /* @__PURE__ */jsx(ZIndexContext.Provider, {
    value: defaults,
    children
  });
}

function isEqual(item, otherItem) {
  if (item === otherItem) {
    return true;
  }

  if (typeof item !== typeof otherItem) {
    return false;
  }

  if (typeof item !== "object" && !Array.isArray(item)) {
    return item === otherItem;
  }

  if (isKeyedObject(item) && isKeyedObject(otherItem) && item._key === otherItem._key) {
    return true;
  }

  if (Array.isArray(item) && Array.isArray(otherItem)) {
    if (item.length !== otherItem.length) {
      return false;
    }

    return item.every((child, i) => isEqual(child, otherItem[i]));
  }

  if (item === null || otherItem === null) {
    return item === otherItem;
  }

  const obj = item;
  const otherObj = otherItem;
  const keys = Object.keys(obj);
  const otherKeys = Object.keys(otherObj);

  if (keys.length !== otherKeys.length) {
    return false;
  }

  return keys.every(keyName => isEqual(obj[keyName], otherObj[keyName]));
}

const ArrayOfOptionsFieldDiff = _ref2 => {
  let {
    diff,
    schemaType
  } = _ref2;

  var _a;

  const options = (_a = schemaType.options) == null ? void 0 : _a.list;
  const colorManager = useUserColorManager();

  if (!Array.isArray(options)) {
    return null;
  }

  return /* @__PURE__ */jsx("div", {
    children: diff.items.map(item => normalizeItems(item, diff, schemaType)).filter(item => item !== null).sort(sortItems).map((item, index) => {
      const {
        annotation,
        isPresent,
        value,
        memberType,
        title
      } = item;
      const color = getAnnotationColor(colorManager, annotation);
      const action = isPresent ? "Added" : "Removed";
      return /* @__PURE__ */jsxs(Flex, {
        align: "center",
        children: [/* @__PURE__ */jsx(DiffTooltip, {
          annotations: annotation ? [annotation] : [],
          description: action,
          children: /* @__PURE__ */jsxs(Flex, {
            align: "center",
            children: [/* @__PURE__ */jsx(Checkbox, {
              checked: !isPresent,
              color
            }), /* @__PURE__ */jsx(Box, {
              margin: 2,
              children: /* @__PURE__ */jsx(FromToArrow, {})
            }), /* @__PURE__ */jsx(Checkbox, {
              checked: isPresent,
              color
            })]
          })
        }), /* @__PURE__ */jsx(Flex, {
          align: "center",
          children: /* @__PURE__ */jsx(ItemPreview, {
            value: title || value,
            memberType
          })
        })]
      }, getItemKey(diff, index));
    })
  });
};

function normalizeItems(item, parentDiff, schemaType) {
  if (item.diff.action === "unchanged") {
    return null;
  }

  const {
    fromValue,
    toValue
  } = parentDiff;
  const value = getValue(item.diff);
  const wasPresent = isInArray(value, fromValue);
  const isPresent = isInArray(value, toValue);

  if (wasPresent === isPresent) {
    return null;
  }

  return {
    title: getItemTitle(value, schemaType),
    memberType: resolveMemberType(getValue(item.diff), schemaType),
    itemIndex: getOptionIndex(value, schemaType),
    annotation: item.annotation,
    isPresent,
    value
  };
}

function sortItems(itemA, itemB) {
  return itemA.itemIndex - itemB.itemIndex;
}

function ItemPreview(_ref3) {
  let {
    value,
    memberType
  } = _ref3;
  return /* @__PURE__ */jsx(Box, {
    marginX: 2,
    marginY: 1,
    children: typeof value === "string" || typeof value === "number" ? value : /* @__PURE__ */jsx(SanityPreview, {
      schemaType: memberType,
      value,
      layout: "default"
    })
  });
}

function isInArray(value, parent) {
  const array = parent || [];
  return typeof value === "object" && value !== null ? array.some(item => isEqual(item, value)) : array.includes(value);
}

function getItemKey(diff, index) {
  const value = diff.toValue || diff.fromValue;
  return isKeyedObject(value) ? value._key : index;
}

function getValue(diff) {
  return typeof diff.toValue === "undefined" ? diff.fromValue : diff.toValue;
}

function resolveMemberType(item, schemaType) {
  const itemTypeName = resolveTypeName(item);
  return schemaType.of.find(memberType => memberType.name === itemTypeName);
}

function resolveTypeName(value) {
  const jsType = resolveJSType(value);

  if (jsType !== "object") {
    return jsType;
  }

  const obj = value;
  return "_type" in obj && obj._type || jsType;
}

function resolveJSType(val) {
  if (val === null) {
    return "null";
  }

  if (Array.isArray(val)) {
    return "array";
  }

  return typeof val;
}

function isNamedOption(item) {
  return typeof item === "object" && item !== null && "title" in item;
}

function getOptionIndex(item, schemaType) {
  var _a;

  const list = ((_a = schemaType.options) == null ? void 0 : _a.list) || [];
  return list.findIndex(opt => isEqual(isNamedOption(opt) ? opt.value : opt, item));
}

function getItemTitle(item, schemaType) {
  var _a;

  const list = ((_a = schemaType.options) == null ? void 0 : _a.list) || [];
  const index = getOptionIndex(item, schemaType);
  return index === -1 ? void 0 : list[index].title || void 0;
}

const DatetimeFieldDiff = _ref4 => {
  let {
    diff,
    schemaType
  } = _ref4;
  return /* @__PURE__ */jsx(DiffFromTo, {
    align: "center",
    diff,
    schemaType,
    previewComponent: DatetimePreview
  });
};

const UrlFieldDiff = _ref5 => {
  let {
    diff,
    schemaType
  } = _ref5;
  return /* @__PURE__ */jsx(DiffFromTo, {
    diff,
    schemaType,
    previewComponent: StringPreview
  });
};

const SlugFieldDiff = _ref6 => {
  let {
    diff,
    schemaType
  } = _ref6;
  return /* @__PURE__ */jsx(DiffFromTo, {
    layout: "inline",
    diff,
    schemaType,
    previewComponent: SlugPreview
  });
};

const diffResolver = _ref7 => {
  let {
    schemaType
  } = _ref7;

  var _a;

  if (["datetime", "date"].includes(schemaType.name)) {
    return DatetimeFieldDiff;
  }

  if (schemaType.name === "url") {
    return UrlFieldDiff;
  }

  if (schemaType.name === "slug") {
    return SlugFieldDiff;
  }

  if (schemaType.jsonType === "array" && Array.isArray((_a = schemaType.options) == null ? void 0 : _a.list)) {
    return ArrayOfOptionsFieldDiff;
  }

  return void 0;
};

function IntentButton(props) {
  return props.disabled ? /* @__PURE__ */jsx(Button, _objectSpread(_objectSpread({}, props), {}, {
    as: "a",
    role: "link",
    "aria-disabled": "true"
  })) : /* @__PURE__ */jsx(Button, _objectSpread(_objectSpread({}, props), {}, {
    as: IntentLink
  }));
}

function PopoverDialog(props) {
  const {
    children,
    header,
    onClose,
    width
  } = props,
        restProps = _objectWithoutProperties(props, _excluded);

  return /* @__PURE__ */jsx(Popover, _objectSpread(_objectSpread({}, restProps), {}, {
    content: /* @__PURE__ */jsx(Container, {
      width,
      children: /* @__PURE__ */jsxs(Flex, {
        direction: "column",
        children: [/* @__PURE__ */jsx(Card, {
          flex: "none",
          children: /* @__PURE__ */jsxs(Flex, {
            children: [/* @__PURE__ */jsx(Box, {
              flex: 1,
              children: /* @__PURE__ */jsx(Text, {
                weight: "semibold",
                children: header
              })
            }), /* @__PURE__ */jsx(Box, {
              children: /* @__PURE__ */jsx(Button, {
                icon: CloseIcon,
                onClick: onClose
              })
            })]
          })
        }), /* @__PURE__ */jsx(Card, {
          flex: 1,
          overflow: "auto",
          children
        })]
      })
    })
  }));
}

export { IntentButton, PopoverDialog, PresenceScope, ZIndexProvider, diffResolver, useProject, useProjectDatasets };
//# sourceMappingURL=_unstable.js.map
