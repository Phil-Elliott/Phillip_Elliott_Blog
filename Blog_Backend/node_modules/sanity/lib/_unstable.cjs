'use strict';

const _excluded = ["children", "header", "onClose", "width"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, '__esModule', {
  value: true
});

require('lodash');

require('rxjs/operators');

var ui = require('@sanity/ui');

require('@sanity/bifur-client');

var React = require('react');

require('react-is');

var prepareConfig = require('./_prepareConfig-2f1df9bf.cjs');

require('react-rx');

require('rxjs');

require('shallow-equals');

var icons = require('@sanity/icons');

var jsxRuntime = require('react/jsx-runtime');

var types = require('@sanity/types');

require('@sanity/color');

require('@sanity/util/content');

require('@sanity/portable-text-editor');

require('scroll-into-view-if-needed');

var PathUtils = require('@sanity/util/paths');

require('@reach/auto-id');

require('@sanity/util/legacyDateFormat');

require('date-fns');

require('speakingurl');

require('@sanity/image-url');

require('@sanity/uuid');

require('get-random-values-esm');

require('@sanity/asset-utils');

require('history');

require('react-dom');

require('exif-component');

var resolveConfig = require('./_resolveConfig-435db3ec.cjs');

var DefaultDocument = require('./_DefaultDocument-cb5fd38b.cjs');

var DocumentTypeList = require('./_DocumentTypeList-03e0e0a7.cjs');

var createStructureBuilder = require('./_createStructureBuilder-ad600465.cjs');

require('@sanity/schema');

require('@sanity/schema/_internal');

require('@sanity/validation');

require('@sanity/mutator');

require('json-reduce');

require('rxjs-exhaustmap-with-trailing');

require('dataloader');

require('raf');

require('groq-js');

require('rxjs-etc/operators');

require('mendoza');

require('@sanity/diff');

require('react-fast-compare');

require('pluralize-esm');

require('sanity-diff-patch');

require('@sanity/client');

require('@juggle/resize-observer');

require('nano-pubsub');

require('styled-components');

require('observable-callback');

require('debug');

require('react-refractor');

require('refractor/lang/bash');

require('refractor/lang/javascript');

require('refractor/lang/json');

require('refractor/lang/jsx');

require('refractor/lang/typescript');

require('use-hot-module-reload');

require('classnames');

require('use-device-pixel-ratio');

require('nanoid');

require('color2k');

require('react-sortable-hoc');

require('@sanity/block-tools');

require('diff-match-patch');

require('date-fns/isValid');

require('react-focus-lock');

require('date-fns/formatDistanceToNow');

require('@sanity/generate-help-url');

require('is-hotkey');

require('react-copy-to-clipboard');

require('@rexxars/react-json-inspector');

require('hashlru');

require('framer-motion');

require('react-props-stream');

require('@sanity/logos');

require('@portabletext/react');

function _interopDefaultLegacy(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    'default': e
  };
}

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);

  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }

  n["default"] = e;
  return Object.freeze(n);
}

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var PathUtils__namespace = /*#__PURE__*/_interopNamespace(PathUtils);

const EMPTY_ARRAY = [];

function trimChildPath(path, childPath) {
  return PathUtils__namespace.startsWith(path, childPath) ? PathUtils__namespace.trimLeft(path, childPath) : EMPTY_ARRAY;
}

function PresenceScope(props) {
  const {
    readOnly,
    path,
    children
  } = props;
  const contextPresence = React__default["default"].useContext(prepareConfig.FormFieldPresenceContext);
  const childPresence = React.useMemo(() => {
    return readOnly ? EMPTY_ARRAY : (contextPresence || EMPTY_ARRAY).filter(presence => {
      return PathUtils__namespace.startsWith(path, presence.path);
    }).map(presence => _objectSpread(_objectSpread({}, presence), {}, {
      path: trimChildPath(path, presence.path)
    }));
  }, [contextPresence, path, readOnly]);
  return /* @__PURE__ */jsxRuntime.jsx(prepareConfig.FormFieldPresenceContext.Provider, {
    value: childPresence,
    children
  });
}

function useProject() {
  const projectStore = prepareConfig.useProjectStore();
  const [value, setValue] = React.useState(null);
  React.useEffect(() => {
    const project$ = projectStore.get();
    const sub = project$.subscribe(setValue);
    return () => sub.unsubscribe();
  }, [projectStore]);
  return {
    value
  };
}

function useProjectDatasets() {
  const projectStore = prepareConfig.useProjectStore();
  const [value, setValue] = React.useState(null);
  React.useEffect(() => {
    const project$ = projectStore.getDatasets();
    const sub = project$.subscribe(setValue);
    return () => sub.unsubscribe();
  }, [projectStore]);
  return {
    value
  };
}

function ZIndexProvider(_ref) {
  let {
    children
  } = _ref;
  return /* @__PURE__ */jsxRuntime.jsx(prepareConfig.ZIndexContext.Provider, {
    value: prepareConfig.defaults,
    children
  });
}

function isEqual(item, otherItem) {
  if (item === otherItem) {
    return true;
  }

  if (typeof item !== typeof otherItem) {
    return false;
  }

  if (typeof item !== "object" && !Array.isArray(item)) {
    return item === otherItem;
  }

  if (types.isKeyedObject(item) && types.isKeyedObject(otherItem) && item._key === otherItem._key) {
    return true;
  }

  if (Array.isArray(item) && Array.isArray(otherItem)) {
    if (item.length !== otherItem.length) {
      return false;
    }

    return item.every((child, i) => isEqual(child, otherItem[i]));
  }

  if (item === null || otherItem === null) {
    return item === otherItem;
  }

  const obj = item;
  const otherObj = otherItem;
  const keys = Object.keys(obj);
  const otherKeys = Object.keys(otherObj);

  if (keys.length !== otherKeys.length) {
    return false;
  }

  return keys.every(keyName => isEqual(obj[keyName], otherObj[keyName]));
}

const ArrayOfOptionsFieldDiff = _ref2 => {
  let {
    diff,
    schemaType
  } = _ref2;

  var _a;

  const options = (_a = schemaType.options) == null ? void 0 : _a.list;
  const colorManager = prepareConfig.useUserColorManager();

  if (!Array.isArray(options)) {
    return null;
  }

  return /* @__PURE__ */jsxRuntime.jsx("div", {
    children: diff.items.map(item => normalizeItems(item, diff, schemaType)).filter(item => item !== null).sort(sortItems).map((item, index) => {
      const {
        annotation,
        isPresent,
        value,
        memberType,
        title
      } = item;
      const color = prepareConfig.getAnnotationColor(colorManager, annotation);
      const action = isPresent ? "Added" : "Removed";
      return /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
        align: "center",
        children: [/* @__PURE__ */jsxRuntime.jsx(prepareConfig.DiffTooltip, {
          annotations: annotation ? [annotation] : [],
          description: action,
          children: /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
            align: "center",
            children: [/* @__PURE__ */jsxRuntime.jsx(prepareConfig.Checkbox, {
              checked: !isPresent,
              color
            }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
              margin: 2,
              children: /* @__PURE__ */jsxRuntime.jsx(prepareConfig.FromToArrow, {})
            }), /* @__PURE__ */jsxRuntime.jsx(prepareConfig.Checkbox, {
              checked: isPresent,
              color
            })]
          })
        }), /* @__PURE__ */jsxRuntime.jsx(ui.Flex, {
          align: "center",
          children: /* @__PURE__ */jsxRuntime.jsx(ItemPreview, {
            value: title || value,
            memberType
          })
        })]
      }, getItemKey(diff, index));
    })
  });
};

function normalizeItems(item, parentDiff, schemaType) {
  if (item.diff.action === "unchanged") {
    return null;
  }

  const {
    fromValue,
    toValue
  } = parentDiff;
  const value = getValue(item.diff);
  const wasPresent = isInArray(value, fromValue);
  const isPresent = isInArray(value, toValue);

  if (wasPresent === isPresent) {
    return null;
  }

  return {
    title: getItemTitle(value, schemaType),
    memberType: resolveMemberType(getValue(item.diff), schemaType),
    itemIndex: getOptionIndex(value, schemaType),
    annotation: item.annotation,
    isPresent,
    value
  };
}

function sortItems(itemA, itemB) {
  return itemA.itemIndex - itemB.itemIndex;
}

function ItemPreview(_ref3) {
  let {
    value,
    memberType
  } = _ref3;
  return /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
    marginX: 2,
    marginY: 1,
    children: typeof value === "string" || typeof value === "number" ? value : /* @__PURE__ */jsxRuntime.jsx(prepareConfig.SanityPreview, {
      schemaType: memberType,
      value,
      layout: "default"
    })
  });
}

function isInArray(value, parent) {
  const array = parent || [];
  return typeof value === "object" && value !== null ? array.some(item => isEqual(item, value)) : array.includes(value);
}

function getItemKey(diff, index) {
  const value = diff.toValue || diff.fromValue;
  return types.isKeyedObject(value) ? value._key : index;
}

function getValue(diff) {
  return typeof diff.toValue === "undefined" ? diff.fromValue : diff.toValue;
}

function resolveMemberType(item, schemaType) {
  const itemTypeName = resolveTypeName(item);
  return schemaType.of.find(memberType => memberType.name === itemTypeName);
}

function resolveTypeName(value) {
  const jsType = resolveJSType(value);

  if (jsType !== "object") {
    return jsType;
  }

  const obj = value;
  return "_type" in obj && obj._type || jsType;
}

function resolveJSType(val) {
  if (val === null) {
    return "null";
  }

  if (Array.isArray(val)) {
    return "array";
  }

  return typeof val;
}

function isNamedOption(item) {
  return typeof item === "object" && item !== null && "title" in item;
}

function getOptionIndex(item, schemaType) {
  var _a;

  const list = ((_a = schemaType.options) == null ? void 0 : _a.list) || [];
  return list.findIndex(opt => isEqual(isNamedOption(opt) ? opt.value : opt, item));
}

function getItemTitle(item, schemaType) {
  var _a;

  const list = ((_a = schemaType.options) == null ? void 0 : _a.list) || [];
  const index = getOptionIndex(item, schemaType);
  return index === -1 ? void 0 : list[index].title || void 0;
}

const DatetimeFieldDiff = _ref4 => {
  let {
    diff,
    schemaType
  } = _ref4;
  return /* @__PURE__ */jsxRuntime.jsx(prepareConfig.DiffFromTo, {
    align: "center",
    diff,
    schemaType,
    previewComponent: prepareConfig.DatetimePreview
  });
};

const UrlFieldDiff = _ref5 => {
  let {
    diff,
    schemaType
  } = _ref5;
  return /* @__PURE__ */jsxRuntime.jsx(prepareConfig.DiffFromTo, {
    diff,
    schemaType,
    previewComponent: prepareConfig.StringPreview
  });
};

const SlugFieldDiff = _ref6 => {
  let {
    diff,
    schemaType
  } = _ref6;
  return /* @__PURE__ */jsxRuntime.jsx(prepareConfig.DiffFromTo, {
    layout: "inline",
    diff,
    schemaType,
    previewComponent: prepareConfig.SlugPreview
  });
};

const diffResolver = _ref7 => {
  let {
    schemaType
  } = _ref7;

  var _a;

  if (["datetime", "date"].includes(schemaType.name)) {
    return DatetimeFieldDiff;
  }

  if (schemaType.name === "url") {
    return UrlFieldDiff;
  }

  if (schemaType.name === "slug") {
    return SlugFieldDiff;
  }

  if (schemaType.jsonType === "array" && Array.isArray((_a = schemaType.options) == null ? void 0 : _a.list)) {
    return ArrayOfOptionsFieldDiff;
  }

  return void 0;
};

function IntentButton(props) {
  return props.disabled ? /* @__PURE__ */jsxRuntime.jsx(ui.Button, _objectSpread(_objectSpread({}, props), {}, {
    as: "a",
    role: "link",
    "aria-disabled": "true"
  })) : /* @__PURE__ */jsxRuntime.jsx(ui.Button, _objectSpread(_objectSpread({}, props), {}, {
    as: prepareConfig.IntentLink
  }));
}

function PopoverDialog(props) {
  const {
    children,
    header,
    onClose,
    width
  } = props,
        restProps = _objectWithoutProperties(props, _excluded);

  return /* @__PURE__ */jsxRuntime.jsx(ui.Popover, _objectSpread(_objectSpread({}, restProps), {}, {
    content: /* @__PURE__ */jsxRuntime.jsx(ui.Container, {
      width,
      children: /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
        direction: "column",
        children: [/* @__PURE__ */jsxRuntime.jsx(ui.Card, {
          flex: "none",
          children: /* @__PURE__ */jsxRuntime.jsxs(ui.Flex, {
            children: [/* @__PURE__ */jsxRuntime.jsx(ui.Box, {
              flex: 1,
              children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
                weight: "semibold",
                children: header
              })
            }), /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
              children: /* @__PURE__ */jsxRuntime.jsx(ui.Button, {
                icon: icons.CloseIcon,
                onClick: onClose
              })
            })]
          })
        }), /* @__PURE__ */jsxRuntime.jsx(ui.Card, {
          flex: 1,
          overflow: "auto",
          children
        })]
      })
    })
  }));
}

exports.BlockImagePreview = prepareConfig.BlockImagePreview;
exports.BlockPreview = prepareConfig.BlockPreview;
exports.CONNECTING = prepareConfig.CONNECTING;
exports.ChangeBreadcrumb = prepareConfig.ChangeBreadcrumb;
exports.ChangeConnectorRoot = prepareConfig.ChangeConnectorRoot;
exports.ChangeFieldWrapper = prepareConfig.ChangeFieldWrapper;
exports.ChangeIndicator = prepareConfig.ChangeIndicator;
exports.ChangeIndicatorContext = prepareConfig.ChangeIndicatorContext;
exports.ChangeList = prepareConfig.ChangeList;
exports.ChangeResolver = prepareConfig.ChangeResolver;
exports.ChangeTitleSegment = prepareConfig.ChangeTitleSegment;
exports.CircularProgress = prepareConfig.CircularProgress;
exports.CollapseMenu = prepareConfig.CollapseMenu;
exports.CollapseMenuButton = prepareConfig.CollapseMenuButton;
exports.ComponentViewBuilder = prepareConfig.ComponentViewBuilder;
exports.ConfirmDeleteDialog = prepareConfig.ConfirmDeleteDialogContainer;
exports.ConnectorContext = prepareConfig.ConnectorContext;
exports.CorsOriginError = prepareConfig.CorsOriginError;
exports.DEFAULT_INTENT_HANDLER = prepareConfig.DEFAULT_INTENT_HANDLER;
exports.DefaultPreview = prepareConfig.DefaultPreview;
exports.DetailPreview = prepareConfig.DetailPreview;
exports.DiffCard = prepareConfig.DiffCard;
exports.DiffContext = prepareConfig.DiffContext;
exports.DiffErrorBoundary = prepareConfig.DiffErrorBoundary;
exports.DiffFromTo = prepareConfig.DiffFromTo;
exports.DiffInspectWrapper = prepareConfig.DiffInspectWrapper;
exports.DiffString = prepareConfig.DiffString;
exports.DiffStringSegment = prepareConfig.DiffStringSegment;
exports.DiffTooltip = prepareConfig.DiffTooltip;
exports.DisabledChangeConnectorRoot = prepareConfig.DisabledChangeConnectorRoot;
exports.DocumentBuilder = prepareConfig.DocumentBuilder;
exports.DocumentChangeContext = prepareConfig.DocumentChangeContext;
exports.DocumentListBuilder = prepareConfig.DocumentListBuilder;
exports.DocumentPreviewPresence = prepareConfig.DocumentPreviewPresence;
exports.EnabledChangeConnectorRoot = prepareConfig.EnabledChangeConnectorRoot;
exports.FallbackDiff = prepareConfig.FallbackDiff;
exports.FieldChange = prepareConfig.FieldChange;
exports.FieldPresence = prepareConfig.FieldPresence;
exports.FieldPresenceWithOverlay = prepareConfig.FieldPresenceWithOverlay;
exports.FieldPresenceWithoutOverlay = prepareConfig.FieldPresenceWithoutOverlay;
exports.FormViewBuilder = prepareConfig.FormViewBuilder;
exports.FromTo = prepareConfig.FromTo;
exports.FromToArrow = prepareConfig.FromToArrow;
exports.GUARDED = prepareConfig.GUARDED;
exports.GenericListBuilder = prepareConfig.GenericListBuilder;
exports.GenericViewBuilder = prepareConfig.GenericViewBuilder;
exports.GroupChange = prepareConfig.GroupChange;
exports.HELP_URL = prepareConfig.HELP_URL;
exports.ImperativeToast = prepareConfig.ImperativeToast;
exports.InitialValueTemplateItemBuilder = prepareConfig.InitialValueTemplateItemBuilder;
exports.InlinePreview = prepareConfig.InlinePreview;
exports.InsufficientPermissionsMessage = prepareConfig.InsufficientPermissionsMessage;
exports.LegacyLayerProvider = prepareConfig.LegacyLayerProvider;
exports.LinearProgress = prepareConfig.LinearProgress;
exports.MediaPreview = prepareConfig.MediaPreview;
exports.MenuItemBuilder = prepareConfig.MenuItemBuilder;
exports.MenuItemGroupBuilder = prepareConfig.MenuItemGroupBuilder;
exports.MetaInfo = prepareConfig.MetaInfo;
exports.NoChanges = prepareConfig.NoChanges;
exports.OverlayDisabled = prepareConfig.OverlayDisabled;
exports.PatchEvent = prepareConfig.PatchEvent;
exports.PresenceOverlay = prepareConfig.PresenceOverlay;
exports.PreviewCard = prepareConfig.PreviewCard;
exports.RevertChangesButton = prepareConfig.RevertChangesButton;
exports.SESSION_ID = prepareConfig.SESSION_ID;
exports.SanityDefaultPreview = prepareConfig.SanityDefaultPreview;
exports.SanityPreview = prepareConfig.SanityPreview;
exports.ScrollContainer = prepareConfig.ScrollContainer;
exports.ScrollMonitor = prepareConfig.ScrollMonitor;
exports.SerializeError = prepareConfig.SerializeError;
exports.StyledCard = prepareConfig.StyledCard;
exports.TemplatePreview = prepareConfig.TemplatePreview;
exports.TextWithTone = prepareConfig.TextWithTone;
exports.TextWithToneStyle = prepareConfig.TextWithToneStyle;
exports.Timeline = prepareConfig.Timeline;
exports.TimelineController = prepareConfig.TimelineController;
exports.Tracker = prepareConfig.Tracker;
exports.UserAvatar = prepareConfig.UserAvatar;
exports.UserColorManagerProvider = prepareConfig.UserColorManagerProvider;
exports.ValidationList = prepareConfig.ValidationList;
exports.ValueError = prepareConfig.ValueError;
exports.WithReferringDocuments = prepareConfig.WithReferringDocuments;
exports.__tmp_wrap_crossProjectToken = prepareConfig.__tmp_wrap_crossProjectToken;
exports.__tmp_wrap_presenceStore = prepareConfig.__tmp_wrap_presenceStore;
exports._createAuthStore = prepareConfig._createAuthStore;
exports.checkoutPair = prepareConfig.checkoutPair;
exports.component = prepareConfig.component;
exports.createAuthStore = prepareConfig.createAuthStore;
exports.createBufferedDocument = prepareConfig.createBufferedDocument;
exports.createConnectionStatusStore = prepareConfig.createConnectionStatusStore;
exports.createDocumentStore = prepareConfig.createDocumentStore;
exports.createGrantsStore = prepareConfig.createGrantsStore;
exports.createHistoryStore = prepareConfig.createHistoryStore;
exports.createObservableBufferedDocument = prepareConfig.createObservableBufferedDocument;
exports.createObservableController = prepareConfig.createObservableController;
exports.createOperationsAPI = prepareConfig.createOperationsAPI;
exports.createProjectStore = prepareConfig.createProjectStore;
exports.createSchema = prepareConfig.createSchema;
exports.createScope = prepareConfig.createScope;
exports.createSettingsStore = prepareConfig.createSettingsStore;
exports.createUseReporter = prepareConfig.createUseReporter;
exports.createUserColorManager = prepareConfig.createUserColorManager;
exports.createUserStore = prepareConfig.createUserStore;
exports.defaultInitialValueTemplateItems = prepareConfig.defaultInitialValueTemplateItems;
exports.defaultIntentChecker = prepareConfig.defaultIntentChecker;
exports.documentFromEditor = prepareConfig.documentFromEditor;
exports.documentFromEditorWithInitialValue = prepareConfig.documentFromEditorWithInitialValue;
exports.editState = prepareConfig.editState;
exports.emitOperation = prepareConfig.emitOperation;
exports.form = prepareConfig.form;
exports.getAnnotationAtPath = prepareConfig.getAnnotationAtPath;
exports.getAnnotationColor = prepareConfig.getAnnotationColor;
exports.getChangeVerb = prepareConfig.getChangeVerb;
exports.getDiffAtPath = prepareConfig.getDiffAtPath;
exports.getDocumentPairPermissions = prepareConfig.getDocumentPairPermissions;
exports.getDocumentValuePermissions = prepareConfig.getDocumentValuePermissions;
exports.getInitialValueStream = prepareConfig.getInitialValueStream;
exports.getOperationEvents = prepareConfig.getOperationEvents;
exports.getOrderingMenuItem = prepareConfig.getOrderingMenuItem;
exports.getOrderingMenuItemsForSchemaType = prepareConfig.getOrderingMenuItemsForSchemaType;
exports.getPairListener = prepareConfig.getPairListener;
exports.getTemplatePermissions = prepareConfig.getTemplatePermissions;
exports.getTypeNamesFromFilter = prepareConfig.getTypeNamesFromFilter;
exports.getValueError = prepareConfig.getValueError;
exports.isAddedItemDiff = prepareConfig.isAddedItemDiff;
exports.isFieldChange = prepareConfig.isFieldChange;
exports.isGroupChange = prepareConfig.isGroupChange;
exports.isRemovedItemDiff = prepareConfig.isRemovedItemDiff;
exports.isUnchangedDiff = prepareConfig.isUnchangedDiff;
exports.listenQuery = prepareConfig.listenQuery;
exports.maybeSerializeInitialValueTemplateItem = prepareConfig.maybeSerializeInitialValueTemplateItem;
exports.maybeSerializeMenuItem = prepareConfig.maybeSerializeMenuItem;
exports.maybeSerializeMenuItemGroup = prepareConfig.maybeSerializeMenuItemGroup;
exports.maybeSerializeView = prepareConfig.maybeSerializeView;
exports.menuItemsFromInitialValueTemplateItems = prepareConfig.menuItemsFromInitialValueTemplateItems;
exports.noop = prepareConfig.noop;
exports.onRetry = prepareConfig.onRetry;
exports.remoteSnapshots = prepareConfig.remoteSnapshots;
exports.removeMissingReferences = prepareConfig.removeMissingReferences;
exports.resolveDiffComponent = prepareConfig.resolveDiffComponent;
exports.shallowIntentChecker = prepareConfig.shallowIntentChecker;
exports.snapshotPair = prepareConfig.snapshotPair;
exports.useAnnotationColor = prepareConfig.useAnnotationColor;
exports.useConnectionStatusStore = prepareConfig.useConnectionStatusStore;
exports.useCrossProjectTokenStore = prepareConfig.useCrossProjectTokenStore;
exports.useCurrentUser = prepareConfig.useCurrentUser;
exports.useDiffAnnotationColor = prepareConfig.useDiffAnnotationColor;
exports.useDocumentChange = prepareConfig.useDocumentChange;
exports.useDocumentPairPermissions = prepareConfig.useDocumentPairPermissions;
exports.useDocumentPairPermissionsFromHookFactory = prepareConfig.useDocumentPairPermissionsFromHookFactory;
exports.useDocumentPresence = prepareConfig.useDocumentPresence;
exports.useDocumentPreviewStore = prepareConfig.useDocumentPreviewStore;
exports.useDocumentStore = prepareConfig.useDocumentStore;
exports.useDocumentType = prepareConfig.useDocumentType;
exports.useDocumentValuePermissions = prepareConfig.useDocumentValuePermissions;
exports.useDocumentValuePermissionsFromHookFactory = prepareConfig.useDocumentValuePermissionsFromHookFactory;
exports.useDocumentValues = prepareConfig.useDocumentValues;
exports.useGlobalPresence = prepareConfig.useGlobalPresence;
exports.useGrantsStore = prepareConfig.useGrantsStore;
exports.useHistoryStore = prepareConfig.useHistoryStore;
exports.useInitialValue = prepareConfig.useInitialValue;
exports.useInitialValueResolverContext = prepareConfig.useInitialValueResolverContext;
exports.useOnScroll = prepareConfig.useOnScroll;
exports.usePresenceStore = prepareConfig.usePresenceStore;
exports.usePreviewCard = prepareConfig.usePreviewCard;
exports.useProjectStore = prepareConfig.useProjectStore;
exports.useReportedValues = prepareConfig.useReportedValues;
exports.useReporter = prepareConfig.useReporter;
exports.useResolveInitialValueForType = prepareConfig.useResolveInitialValueForType;
exports.useRovingFocus = prepareConfig.useRovingFocus;
exports.useSettingsStore = prepareConfig.useSettingsStore;
exports.useTemplatePermissions = prepareConfig.useTemplatePermissions;
exports.useTemplatePermissionsFromHookFactory = prepareConfig.useTemplatePermissionsFromHookFactory;
exports.useTimeAgo = prepareConfig.useTimeAgo;
exports.useUser = prepareConfig.useUser;
exports.useUserColor = prepareConfig.useUserColor;
exports.useUserColorManager = prepareConfig.useUserColorManager;
exports.useUserStore = prepareConfig.useUserStore;
exports.useZIndex = prepareConfig.useZIndex;
exports.validation = prepareConfig.validation;
exports.visitDiff = prepareConfig.visitDiff;
exports.resolveConfig = resolveConfig.resolveConfig;
exports.DefaultDocument = DefaultDocument.DefaultDocument;
exports.GlobalErrorHandler = DefaultDocument.GlobalErrorHandler;
exports.ComponentBuilder = DocumentTypeList.ComponentBuilder;
exports.DocumentListItemBuilder = DocumentTypeList.DocumentListItemBuilder;
exports.DocumentTypeListBuilder = DocumentTypeList.DocumentTypeListBuilder;
exports.ListBuilder = DocumentTypeList.ListBuilder;
exports.ListItemBuilder = DocumentTypeList.ListItemBuilder;
exports.isDocumentListItem = DocumentTypeList.isDocumentListItem;
exports.createStructureBuilder = createStructureBuilder.createStructureBuilder;
exports.IntentButton = IntentButton;
exports.PopoverDialog = PopoverDialog;
exports.PresenceScope = PresenceScope;
exports.ZIndexProvider = ZIndexProvider;
exports.diffResolver = diffResolver;
exports.useProject = useProject;
exports.useProjectDatasets = useProjectDatasets;
//# sourceMappingURL=_unstable.cjs.map
