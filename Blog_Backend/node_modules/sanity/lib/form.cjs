'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var prepareConfig = require('./_prepareConfig-2f1df9bf.cjs');

require('rxjs');

require('rxjs/operators');

var React = require('react');

var jsxRuntime = require('react/jsx-runtime');

require('@sanity/icons');

require('lodash');

require('@sanity/ui');

require('history');

require('@sanity/bifur-client');

require('react-is');

require('@sanity/schema');

require('@sanity/schema/_internal');

require('@sanity/validation');

require('react-rx');

require('shallow-equals');

require('@sanity/types');

require('@sanity/image-url');

require('@sanity/util/paths');

require('react-fast-compare');

require('@sanity/util/content');

require('@sanity/util/legacyDateFormat');

require('date-fns');

require('speakingurl');

require('@sanity/uuid');

require('@sanity/asset-utils');

require('exif-component');

require('@reach/auto-id');

require('react-dom');

require('pluralize-esm');

require('@sanity/mutator');

require('json-reduce');

require('rxjs-exhaustmap-with-trailing');

require('dataloader');

require('raf');

require('groq-js');

require('rxjs-etc/operators');

require('@sanity/client');

require('@juggle/resize-observer');

require('nano-pubsub');

require('styled-components');

require('observable-callback');

require('debug');

require('react-refractor');

require('refractor/lang/bash');

require('refractor/lang/javascript');

require('refractor/lang/json');

require('refractor/lang/jsx');

require('refractor/lang/typescript');

require('@sanity/color');

require('use-hot-module-reload');

require('classnames');

require('use-device-pixel-ratio');

require('mendoza');

require('@sanity/diff');

require('nanoid');

require('color2k');

require('react-sortable-hoc');

require('@sanity/portable-text-editor');

require('scroll-into-view-if-needed');

require('get-random-values-esm');

require('@sanity/block-tools');

require('diff-match-patch');

require('date-fns/isValid');

require('react-focus-lock');

require('date-fns/formatDistanceToNow');

require('@sanity/generate-help-url');

require('is-hotkey');

require('react-copy-to-clipboard');

require('sanity-diff-patch');

require('@rexxars/react-json-inspector');

require('hashlru');

require('framer-motion');

require('react-props-stream');

require('@sanity/logos');

require('@portabletext/react');

function _interopDefaultLegacy(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    'default': e
  };
}

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function useReviewChanges() {
  const reviewChanges = React.useContext(prepareConfig.ReviewChangesContext);

  if (!reviewChanges) {
    throw new Error("Review changes: missing context value");
  }

  return reviewChanges;
}

function getHash() {
  return decodeURIComponent(document.location.hash.substring(1));
}

function getPathFromHash() {
  const hash = getHash();
  return hash ? prepareConfig.decodePath(hash) : [];
}

class HashFocusManager extends React__default["default"].Component {
  constructor() {
    super(...arguments);
    this.state = {
      focusPath: getPathFromHash()
    };

    this.handleHashChange = () => {
      this.setState({
        focusPath: getPathFromHash()
      });
    };

    this.handleFocus = focusPath => {
      document.location.hash = prepareConfig.encodePath(focusPath);
    };

    this.handleBlur = () => {};
  }

  componentDidMount() {
    window.addEventListener("hashchange", this.handleHashChange, false);
  }

  componentWillUnmount() {
    window.removeEventListener("hashchange", this.handleHashChange, false);
  }

  render() {
    return this.props.children({
      onBlur: this.handleBlur,
      onFocus: this.handleFocus,
      focusPath: this.state.focusPath
    });
  }

}

class SimpleFocusManager extends React__default["default"].Component {
  constructor() {
    super(...arguments);
    this.state = {
      focusPath: []
    };

    this.handleFocus = path => {
      this.setState({
        focusPath: path
      });
    };

    this.handleBlur = () => {};
  }

  render() {
    return this.props.children({
      onBlur: this.handleBlur,
      onFocus: this.handleFocus,
      focusPath: this.state.focusPath
    });
  }

}

function ArrayOfObjectsMembers(props) {
  const {
    members,
    renderInput,
    renderField,
    renderItem,
    renderPreview
  } = props;
  return /* @__PURE__ */jsxRuntime.jsx(jsxRuntime.Fragment, {
    children: members.map(member => {
      if (member.kind === "item") {
        return /* @__PURE__ */jsxRuntime.jsx(prepareConfig.ArrayOfObjectsItem, {
          member,
          renderInput,
          renderField,
          renderItem,
          renderPreview
        }, member.key);
      }

      if (member.kind === "error") {
        return /* @__PURE__ */jsxRuntime.jsx(prepareConfig.MemberItemError, {
          member
        }, member.key);
      }

      console.warn(new Error("Unhandled member kind ".concat(member.kind)));
      return null;
    })
  });
}

exports.ArrayInput = prepareConfig.ArrayInput;
exports.ArrayOfObjectsInput = prepareConfig.StudioArrayInput;
exports.ArrayOfObjectsItem = prepareConfig.ArrayOfObjectsItem;
exports.ArrayOfPrimitivesItem = prepareConfig.ArrayOfPrimitivesItem;
exports.BlockEditor = prepareConfig.PortableTextInput;
exports.FormField = prepareConfig.FormField;
exports.FormFieldHeaderText = prepareConfig.FormFieldHeaderText;
exports.FormFieldSet = prepareConfig.FormFieldSet;
exports.FormFieldStatus = prepareConfig.FormFieldStatus;
exports.FormFieldValidationStatus = prepareConfig.FormFieldValidationStatus;
exports.FormInput = prepareConfig.FormInput;
exports.MemberField = prepareConfig.MemberField;
exports.MemberFieldError = prepareConfig.MemberFieldError;
exports.MemberFieldSet = prepareConfig.MemberFieldSet;
exports.MemberItemError = prepareConfig.MemberItemError;
exports.ObjectInput = prepareConfig.ObjectInput;
exports.ObjectMembers = prepareConfig.ObjectMembers;
exports.PatchEvent = prepareConfig.PatchEvent;
exports.PortableTextInput = prepareConfig.PortableTextInput;
exports.ReferenceInputOptionsProvider = prepareConfig.ReferenceInputOptionsProvider;
exports.ReviewChangesContext = prepareConfig.ReviewChangesContext;
exports.StudioFormBuilder = prepareConfig.StudioFormBuilder;
exports.StudioFormBuilderProvider = prepareConfig.StudioFormBuilderProvider;
exports.Timeline = prepareConfig.Timeline;
exports.TimelineController = prepareConfig.TimelineController;
exports.createPatchChannel = prepareConfig.createPatchChannel;
exports.dec = prepareConfig.dec;
exports.decodePath = prepareConfig.decodePath;
exports.encodePath = prepareConfig.encodePath;
exports.fromMutationPatches = prepareConfig.fromMutationPatches;
exports.inc = prepareConfig.inc;
exports.insert = prepareConfig.insert;
exports.isArrayOfObjectsInputProps = prepareConfig.isArrayOfObjectsInputProps;
exports.isArrayOfPrimitivesInputProps = prepareConfig.isArrayOfPrimitivesInputProps;
exports.isBooleanInputProps = prepareConfig.isBooleanInputProps;
exports.isNumberInputProps = prepareConfig.isNumberInputProps;
exports.isObjectInputProps = prepareConfig.isObjectInputProps;
exports.isObjectItemProps = prepareConfig.isObjectItemProps;
exports.isStringInputProps = prepareConfig.isStringInputProps;
exports.prefixPath = prepareConfig.prefixPath;
exports.set = prepareConfig.set;
exports.setIfMissing = prepareConfig.setIfMissing;
exports.toMutationPatches = prepareConfig.toMutationPatches;
exports.unset = prepareConfig.unset;
exports.useFormBuilder = prepareConfig.useFormBuilder;
exports.useFormState = prepareConfig.useFormState;
exports.useFormValue = prepareConfig.useFormValue;
exports.useReferenceInputOptions = prepareConfig.useReferenceInputOptions;
exports.ArrayOfObjectsMembers = ArrayOfObjectsMembers;
exports.HashFocusManager = HashFocusManager;
exports.SimpleFocusManager = SimpleFocusManager;
exports.useReviewChanges = useReviewChanges;
//# sourceMappingURL=form.cjs.map
