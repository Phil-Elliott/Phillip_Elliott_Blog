function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { cJ as prepareConfig } from './_prepareConfig-56d87958.js';

function resolveConfig(config) {
  const {
    workspaces
  } = prepareConfig(config);
  return combineLatest(workspaces.flatMap(workspaceSummary => combineLatest(workspaceSummary.__internal.sources.map(_ref => {
    let {
      source
    } = _ref;
    return source;
  })).pipe(map(sources => _objectSpread(_objectSpread(_objectSpread({}, workspaceSummary), sources[0]), {}, {
    unstable_sources: sources,
    type: "workspace"
  })))));
}

export { resolveConfig as r };
//# sourceMappingURL=_resolveConfig-19697b96.js.map
