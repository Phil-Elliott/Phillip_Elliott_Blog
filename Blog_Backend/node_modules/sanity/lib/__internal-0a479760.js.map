{"version":3,"file":"__internal-0a479760.js","sources":["../src/cli/commands/build/buildCommand.ts","../src/cli/commands/check/checkCommand.ts","../src/cli/commands/config/configCheckCommand.ts","../src/cli/commands/dataset/datasetGroup.ts","../src/cli/commands/deploy/deployCommand.ts","../src/cli/commands/deploy/undeployCommand.ts","../src/cli/actions/dataset/alias/validateDatasetAliasName.ts","../src/cli/commands/dataset/alias/datasetAliasesClient.ts","../src/cli/commands/dataset/alias/listAliasesHandler.ts","../src/cli/commands/dataset/listDatasetsCommand.ts","../src/cli/debug.ts","../src/cli/actions/dataset/validateDatasetName.ts","../src/cli/actions/dataset/datasetNamePrompt.ts","../src/cli/commands/dataset/createDatasetCommand.ts","../src/cli/commands/dataset/datasetVisibilityCommand.ts","../src/cli/commands/dataset/deleteDatasetCommand.ts","../src/cli/actions/dataset/chooseDatasetPrompt.ts","../src/cli/commands/dataset/exportDatasetCommand.ts","../src/cli/commands/dataset/importDatasetCommand.ts","../src/cli/commands/dataset/copyDatasetCommand.ts","../src/cli/actions/dataset/alias/promptForDatasetAliasName.ts","../src/cli/commands/dataset/alias/createAliasHandler.ts","../src/cli/commands/dataset/alias/deleteAliasHandler.ts","../src/cli/commands/dataset/alias/unlinkAliasHandler.ts","../src/cli/commands/dataset/alias/linkAliasHandler.ts","../src/cli/commands/dataset/alias/aliasCommands.ts","../src/cli/commands/documents/documentsGroup.ts","../src/cli/util/colorizeJson.ts","../src/cli/commands/documents/getDocumentsCommand.ts","../src/cli/commands/documents/queryDocumentsCommand.ts","../src/cli/commands/documents/deleteDocumentsCommand.ts","../src/cli/commands/documents/createDocumentsCommand.ts","../src/cli/commands/start/startCommand.ts","../src/cli/commands/uninstall/uninstallCommand.ts","../src/cli/commands/hook/hookGroup.ts","../src/cli/commands/hook/createHookCommand.ts","../src/cli/commands/hook/deleteHookCommand.ts","../src/cli/commands/hook/listHooksCommand.ts","../src/cli/commands/hook/printHookAttemptCommand.ts","../src/cli/commands/hook/listHookLogsCommand.ts","../src/cli/commands/exec/execCommand.ts","../src/cli/commands/cors/corsGroup.ts","../src/cli/actions/cors/addCorsOrigin.ts","../src/cli/commands/cors/addCorsOriginCommand.ts","../src/cli/commands/cors/listCorsOriginsCommand.ts","../src/cli/commands/cors/deleteCorsOriginCommand.ts","../src/cli/commands/graphql/graphqlGroup.ts","../src/cli/commands/graphql/listGraphQLAPIsCommand.ts","../src/cli/commands/graphql/deployGraphQLAPICommand.ts","../src/cli/commands/graphql/deleteGraphQLAPICommand.ts","../src/cli/commands/users/usersGroup.ts","../src/cli/util/prettifyQuotaError.ts","../src/cli/commands/users/inviteUserCommand.ts","../src/cli/commands/users/listUsersCommand.ts","../src/cli/commands/index.ts"],"sourcesContent":["import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport {BuildSanityStudioCommandFlags} from '../../actions/build/buildAction'\n\nconst helpText = `\nOptions\n  --source-maps Enable source maps for built bundles (increases size of bundle)\n  --no-minify Skip minifying built JavaScript (speeds up build, increases size of bundle)\n  -y, --yes Use unattended mode, accepting defaults and using only flags for choices\n\nExamples\n  sanity build\n  sanity build --no-minify --source-maps\n`\n\nconst buildCommand: CliCommandDefinition = {\n  name: 'build',\n  signature: '[OUTPUT_DIR]',\n  description: 'Builds the current Sanity configuration to a static bundle',\n  action: async (\n    args: CliCommandArguments<BuildSanityStudioCommandFlags>,\n    context: CliCommandContext,\n    overrides?: {basePath?: string}\n  ) => {\n    const mod = await import('../../actions/build/buildAction')\n\n    return mod.default(args, context, overrides)\n  },\n  helpText,\n}\n\nexport default buildCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\n\nconst checkCommand: CliCommandDefinition = {\n  name: 'check',\n  signature: '',\n  description: '[deprecated]',\n  helpText: '',\n  hideFromHelp: true,\n  action: (_args, context) => {\n    const {output} = context\n    output.print('`sanity check` is deprecated and no longer has any effect')\n    return Promise.resolve()\n  },\n}\n\nexport default checkCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\n\nconst configCheckCommand: CliCommandDefinition = {\n  name: 'configcheck',\n  signature: '',\n  description: 'Checks if the required configuration files for plugins exists and are up to date',\n  helpText: '',\n  hideFromHelp: true,\n  action: async (args, context) => {\n    context.output.error('`sanity configcheck` is no longer required/used')\n    return Promise.resolve()\n  },\n}\n\nexport default configCheckCommand\n","export default {\n  name: 'dataset',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interact with datasets in your project',\n}\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport type {DeployStudioActionFlags} from '../../actions/deploy/deployAction'\n\nconst helpText = `\nOptions\n  --source-maps Enable source maps for built bundles (increases size of bundle)\n  --no-minify Skip minifying built JavaScript (speeds up build, increases size of bundle)\n  --no-build Don't build the studio prior to deploy, instead deploying the version currently in \\`dist/\\`\n\nExamples\n  sanity deploy\n  sanity deploy --no-minify --source-maps\n`\n\nconst deployCommand: CliCommandDefinition = {\n  name: 'deploy',\n  signature: '[SOURCE_DIR] [--no-build]  [--source-maps] [--no-minify]',\n  description: 'Deploys a statically built Sanity studio',\n  action: async (\n    args: CliCommandArguments<DeployStudioActionFlags>,\n    context: CliCommandContext\n  ) => {\n    const mod = await import('../../actions/deploy/deployAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default deployCommand\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\n\nconst helpText = `\nExamples\n  sanity undeploy\n`\n\nconst undeployCommand: CliCommandDefinition = {\n  name: 'undeploy',\n  signature: '',\n  description: 'Removes the deployed studio from <hostname>.sanity.studio',\n  action: async (\n    args: CliCommandArguments<Record<string, unknown>>,\n    context: CliCommandContext\n  ) => {\n    const mod = await import('../../actions/deploy/undeployAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default undeployCommand\n","const MAX_DATASET_NAME_LENGTH = 64\n\nexport function validateDatasetAliasName(datasetName: string): false | string {\n  if (!datasetName) {\n    return 'Alias name is missing'\n  }\n\n  const name = `${datasetName}`\n\n  if (name.toLowerCase() !== name) {\n    return 'Alias name must be all lowercase characters'\n  }\n\n  if (name.length < 2) {\n    return 'Alias name must be at least two characters long'\n  }\n\n  if (name.length > MAX_DATASET_NAME_LENGTH) {\n    return `Alias name must be at most ${MAX_DATASET_NAME_LENGTH} characters`\n  }\n\n  if (!/^[a-z0-9~]/.test(name)) {\n    return 'Alias name must start with a letter or a number'\n  }\n\n  if (!/^[a-z0-9~][-_a-z0-9]+$/.test(name)) {\n    return 'Alias name must only contain letters, numbers, dashes and underscores'\n  }\n\n  if (/[-_]$/.test(name)) {\n    return 'Alias name must not end with a dash or an underscore'\n  }\n\n  return false\n}\n","import type {SanityClient} from '@sanity/client'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport type {DatasetAliasDefinition, DatasetModificationResponse} from './types'\n\nexport const ALIAS_PREFIX = '~'\n\nexport function listAliases(client: SanityClient): Promise<DatasetAliasDefinition[]> {\n  return client.request<DatasetAliasDefinition[]>({uri: '/aliases'})\n}\n\nexport function createAlias(\n  client: SanityClient,\n  aliasName: string,\n  datasetName: string | null\n): Promise<DatasetModificationResponse> {\n  return modify(client, 'PUT', aliasName, datasetName ? {datasetName} : undefined)\n}\n\nexport function updateAlias(\n  client: SanityClient,\n  aliasName: string,\n  datasetName: string | null\n): Promise<DatasetModificationResponse> {\n  return modify(client, 'PATCH', aliasName, datasetName ? {datasetName} : undefined)\n}\n\nexport function unlinkAlias(\n  client: SanityClient,\n  aliasName: string\n): Promise<DatasetModificationResponse> {\n  validateDatasetAliasName(aliasName)\n  return modify(client, 'PATCH', `${aliasName}/unlink`, {})\n}\n\nexport function removeAlias(client: SanityClient, aliasName: string): Promise<{deleted: boolean}> {\n  return modify(client, 'DELETE', aliasName)\n}\n\nfunction modify(\n  client: SanityClient,\n  method: string,\n  aliasName: string,\n  body?: {datasetName?: string}\n) {\n  return client.request({method, uri: `/aliases/${aliasName}`, body})\n}\n","import type {CliCommandAction} from '@sanity/cli'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const listAliasesHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output} = context\n  const client = apiClient()\n\n  const aliases = await aliasClient.listAliases(client)\n  output.print(\n    aliases\n      .map((set) => `${ALIAS_PREFIX}${set.name} -> ${set.datasetName || '<unlinked>'}`)\n      .join('\\n')\n  )\n}\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport {listAliasesHandler} from './alias/listAliasesHandler'\n\nconst listDatasetsCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'dataset',\n  helpText: '',\n  signature: '',\n  description: 'List datasets of your project',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const client = apiClient()\n    const datasets = await client.datasets.list()\n    output.print(datasets.map((set) => set.name).join('\\n'))\n\n    // Print alias list\n    await listAliasesHandler(args, context)\n  },\n}\n\nexport default listDatasetsCommand\n","import debugIt from 'debug'\n\nexport const debug = debugIt('sanity:core')\n","const MAX_DATASET_NAME_LENGTH = 64\n\nexport function validateDatasetName(datasetName: string): false | string {\n  if (!datasetName) {\n    return 'Dataset name is missing'\n  }\n\n  const name = `${datasetName}`\n\n  if (name.toLowerCase() !== name) {\n    return 'Dataset name must be all lowercase characters'\n  }\n\n  if (name.length < 2) {\n    return 'Dataset name must be at least two characters long'\n  }\n\n  if (name.length > MAX_DATASET_NAME_LENGTH) {\n    return `Dataset name must be at most ${MAX_DATASET_NAME_LENGTH} characters`\n  }\n\n  if (!/^[a-z0-9]/.test(name)) {\n    return 'Dataset name must start with a letter or a number'\n  }\n\n  if (!/^[a-z0-9][-_a-z0-9]+$/.test(name)) {\n    return 'Dataset name must only contain letters, numbers, dashes and underscores'\n  }\n\n  if (/[-_]$/.test(name)) {\n    return 'Dataset name must not end with a dash or an underscore'\n  }\n\n  return false\n}\n","import type {CliPrompter} from '@sanity/cli'\nimport {validateDatasetName} from './validateDatasetName'\n\nexport function promptForDatasetName(\n  prompt: CliPrompter,\n  options: {message?: string; default?: string} = {}\n): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Dataset name:',\n    validate: (name) => {\n      const err = validateDatasetName(name)\n      if (err) {\n        return err\n      }\n\n      return true\n    },\n    ...options,\n  })\n}\n","import type {CliCommandDefinition, CliOutputter, CliPrompter} from '@sanity/cli'\nimport {debug} from '../../debug'\nimport {promptForDatasetName} from '../../actions/dataset/datasetNamePrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst helpText = `\nOptions\n  --visibility <mode> Set visibility for this dataset (public/private)\n\nExamples\n  sanity dataset create\n  sanity dataset create <name>\n  sanity dataset create <name> --visibility private\n`\n\nconst allowedModes = ['private', 'public', 'custom']\n\ninterface CreateFlags {\n  visibility?: 'private' | 'public' | 'custom'\n}\n\nconst createDatasetCommand: CliCommandDefinition<CreateFlags> = {\n  name: 'create',\n  group: 'dataset',\n  signature: '[NAME]',\n  helpText,\n  description: 'Create a new dataset within your project',\n  action: async (args, context) => {\n    const {apiClient, output, prompt} = context\n    const flags = args.extOptions\n    const [dataset] = args.argsWithoutOptions\n    const client = apiClient()\n\n    const nameError = dataset && validateDatasetName(dataset)\n    if (nameError) {\n      throw new Error(nameError)\n    }\n\n    const [datasets, projectFeatures] = await Promise.all([\n      client.datasets.list().then((sets) => sets.map((ds) => ds.name)),\n      client.request({uri: '/features'}),\n    ])\n\n    if (flags.visibility && !allowedModes.includes(flags.visibility)) {\n      throw new Error(`Visibility mode \"${flags.visibility}\" not allowed`)\n    }\n\n    const datasetName = await (dataset || promptForDatasetName(prompt))\n    if (datasets.includes(datasetName)) {\n      throw new Error(`Dataset \"${datasetName}\" already exists`)\n    }\n\n    const canCreatePrivate = projectFeatures.includes('privateDataset')\n    debug('%s create private datasets', canCreatePrivate ? 'Can' : 'Cannot')\n\n    const defaultAclMode = canCreatePrivate ? flags.visibility : 'public'\n    const aclMode = await (defaultAclMode || promptForDatasetVisibility(prompt, output))\n\n    try {\n      await client.datasets.create(datasetName, {aclMode})\n      output.print('Dataset created successfully')\n    } catch (err) {\n      throw new Error(`Dataset creation failed:\\n${err.message}`)\n    }\n  },\n}\n\nasync function promptForDatasetVisibility(prompt: CliPrompter, output: CliOutputter) {\n  const mode = await prompt.single<'public' | 'private'>({\n    type: 'list',\n    message: 'Dataset visibility',\n    choices: [\n      {\n        value: 'public',\n        name: 'Public (world readable)',\n      },\n      {\n        value: 'private',\n        name: 'Private (Authenticated user or token needed)',\n      },\n    ],\n  })\n\n  if (mode === 'private') {\n    output.print(\n      'Please note that while documents are private, assets (files and images) are still public\\n'\n    )\n  }\n\n  return mode\n}\n\nexport default createDatasetCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst datasetVisibilityCommand: CliCommandDefinition = {\n  name: 'visibility',\n  group: 'dataset',\n  helpText: '',\n  signature: 'get/set [dataset] [mode]',\n  description: 'Set visibility of a dataset',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const [action, ds, aclMode] = args.argsWithoutOptions\n    const client = apiClient()\n\n    if (!client.datasets.edit) {\n      throw new Error('@sanity/cli must be upgraded first:\\n  npm install -g @sanity/cli')\n    }\n\n    if (!action) {\n      throw new Error('Action must be provided (get/set)')\n    }\n\n    if (!['set', 'get'].includes(action)) {\n      throw new Error('Invalid action (only get/set allowed)')\n    }\n\n    if (!ds) {\n      throw new Error('Dataset name must be provided')\n    }\n\n    if (action === 'set' && !aclMode) {\n      throw new Error('Please provide a visibility mode (public/private)')\n    }\n\n    const dataset = `${ds}`\n    const dsError = validateDatasetName(dataset)\n    if (dsError) {\n      throw new Error(dsError)\n    }\n\n    const current = (await client.datasets.list()).find((curr) => curr.name === dataset)\n\n    if (!current) {\n      throw new Error('Dataset not found')\n    }\n\n    if (action === 'get') {\n      output.print(current.aclMode)\n      return\n    }\n\n    if (current.aclMode === aclMode) {\n      output.print(`Dataset already in \"${aclMode}\"-mode`)\n      return\n    }\n\n    if (aclMode === 'private') {\n      output.print(\n        'Please note that while documents are private, assets (files and images) are still public\\n'\n      )\n    }\n\n    await client.datasets.edit(dataset, {aclMode: aclMode as 'public' | 'private'})\n    output.print('Dataset visibility changed')\n  },\n}\n\nexport default datasetVisibilityCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst deleteDatasetCommand: CliCommandDefinition = {\n  name: 'delete',\n  group: 'dataset',\n  helpText: '',\n  signature: '[datasetName]',\n  description: 'Delete a dataset within your project',\n  action: async (args, context) => {\n    const {apiClient, prompt, output} = context\n    const [ds] = args.argsWithoutOptions\n    if (!ds) {\n      throw new Error('Dataset name must be provided')\n    }\n\n    const dataset = `${ds}`\n    const dsError = validateDatasetName(dataset)\n    if (dsError) {\n      throw dsError\n    }\n\n    await prompt.single({\n      type: 'input',\n      message:\n        'Are you ABSOLUTELY sure you want to delete this dataset?\\n  Type the name of the dataset to confirm delete:',\n      filter: (input) => `${input}`.trim(),\n      validate: (input) => {\n        return input === dataset || 'Incorrect dataset name. Ctrl + C to cancel delete.'\n      },\n    })\n\n    await apiClient().datasets.delete(dataset)\n    output.print('Dataset deleted successfully')\n  },\n}\n\nexport default deleteDatasetCommand\n","import type {CliCommandContext} from '@sanity/cli'\nimport {debug} from '../../debug'\nimport {promptForDatasetName} from './datasetNamePrompt'\n\nexport async function chooseDatasetPrompt(\n  context: CliCommandContext,\n  options: {message?: string; allowCreation?: boolean} = {}\n): Promise<string> {\n  const {apiClient, prompt} = context\n  const {message, allowCreation} = options\n  const client = apiClient()\n\n  const datasets = await client.datasets.list()\n  const hasProduction = datasets.find((dataset) => dataset.name === 'production')\n  const datasetChoices = datasets.map((dataset) => ({value: dataset.name}))\n  const selected = await prompt.single({\n    message: message || 'Select dataset to use',\n    type: 'list',\n    choices: allowCreation\n      ? [{value: 'new', name: 'Create new dataset'}, new prompt.Separator(), ...datasetChoices]\n      : datasetChoices,\n  })\n\n  if (selected === 'new') {\n    debug('User wants to create a new dataset, prompting for name')\n    const newDatasetName = await promptForDatasetName(prompt, {\n      message: 'Name your dataset:',\n      default: hasProduction ? undefined : 'production',\n    })\n    await client.datasets.create(newDatasetName)\n    return newDatasetName\n  }\n\n  return selected\n}\n","import path from 'path'\nimport fs from 'fs/promises'\nimport type {CliCommandDefinition, CliPrompter} from '@sanity/cli'\nimport prettyMs from 'pretty-ms'\nimport {absolutify} from '@sanity/util/fs'\nimport exportDataset from '@sanity/export'\nimport {chooseDatasetPrompt} from '../../actions/dataset/chooseDatasetPrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\n\nconst noop = () => null\n\nconst helpText = `\nOptions\n  --raw                     Extract only documents, without rewriting asset references\n  --no-assets               Export only non-asset documents and remove references to image assets\n  --no-drafts               Export only published versions of documents\n  --no-compress             Skips compressing tarball entries (still generates a gzip file)\n  --types                   Defines which document types to export\n  --overwrite               Overwrite any file with the same name\n  --asset-concurrency <num> Concurrent number of asset downloads\n\nExamples\n  sanity dataset export moviedb localPath.tar.gz\n  sanity dataset export moviedb assetless.tar.gz --no-assets\n  sanity dataset export staging staging.tar.gz --raw\n  sanity dataset export staging staging.tar.gz --types products,shops\n`\n\ninterface ExportFlags {\n  raw?: boolean\n  assets?: boolean\n  drafts?: boolean\n  compress?: boolean\n  overwrite?: boolean\n  types?: string\n  'asset-concurrency'?: string\n}\n\ninterface ParsedExportFlags {\n  raw?: boolean\n  assets?: boolean\n  drafts?: boolean\n  compress?: boolean\n  overwrite?: boolean\n  types?: string[]\n  assetConcurrency?: number\n}\n\nfunction parseFlags(rawFlags: ExportFlags): ParsedExportFlags {\n  const flags: ParsedExportFlags = {}\n  if (rawFlags.types) {\n    flags.types = `${rawFlags.types}`.split(',')\n  }\n\n  if (rawFlags['asset-concurrency']) {\n    flags.assetConcurrency = parseInt(rawFlags['asset-concurrency'], 10)\n  }\n\n  if (typeof rawFlags.raw !== 'undefined') {\n    flags.raw = Boolean(rawFlags.raw)\n  }\n\n  if (typeof rawFlags.assets !== 'undefined') {\n    flags.assets = Boolean(rawFlags.assets)\n  }\n\n  if (typeof rawFlags.drafts !== 'undefined') {\n    flags.drafts = Boolean(rawFlags.drafts)\n  }\n\n  if (typeof rawFlags.compress !== 'undefined') {\n    flags.compress = Boolean(rawFlags.compress)\n  }\n\n  if (typeof rawFlags.overwrite !== 'undefined') {\n    flags.overwrite = Boolean(rawFlags.overwrite)\n  }\n\n  return flags\n}\n\ninterface ProgressEvent {\n  step: string\n  update?: boolean\n  current: number\n  total: number\n}\n\nconst exportDatasetCommand: CliCommandDefinition<ExportFlags> = {\n  name: 'export',\n  group: 'dataset',\n  signature: '[NAME] [DESTINATION]',\n  description: 'Export dataset to local filesystem as a gzipped tarball',\n  helpText,\n  action: async (args, context) => {\n    const {apiClient, output, chalk, workDir, prompt} = context\n    const client = apiClient()\n    const [targetDataset, targetDestination] = args.argsWithoutOptions\n    const flags = parseFlags(args.extOptions)\n\n    let dataset = targetDataset ? `${targetDataset}` : null\n    if (!dataset) {\n      dataset = await chooseDatasetPrompt(context, {message: 'Select dataset to export'})\n    }\n\n    const dsError = validateDatasetName(dataset)\n    if (dsError) {\n      throw dsError\n    }\n\n    // Verify existence of dataset before trying to export from it\n    const datasets = await client.datasets.list()\n    if (!datasets.find((set) => set.name === dataset)) {\n      throw new Error(`Dataset with name \"${dataset}\" not found`)\n    }\n\n    let destinationPath = targetDestination\n    if (!destinationPath) {\n      destinationPath = await prompt.single({\n        type: 'input',\n        message: 'Output path:',\n        default: path.join(workDir, `${dataset}.tar.gz`),\n        filter: absolutify,\n      })\n    }\n\n    const outputPath = await getOutputPath(destinationPath, dataset, prompt, flags)\n    if (!outputPath) {\n      output.print('Cancelled')\n      return\n    }\n\n    // If we are dumping to a file, let the user know where it's at\n    if (outputPath !== '-') {\n      output.print(`Exporting dataset \"${chalk.cyan(dataset)}\" to \"${chalk.cyan(outputPath)}\"`)\n    }\n\n    let currentStep = 'Exporting documents...'\n    let spinner = output.spinner(currentStep).start()\n    const onProgress = (progress: ProgressEvent) => {\n      if (progress.step !== currentStep) {\n        spinner.succeed()\n        spinner = output.spinner(progress.step).start()\n      } else if (progress.step === currentStep && progress.update) {\n        spinner.text = `${progress.step} (${progress.current}/${progress.total})`\n      }\n\n      currentStep = progress.step\n    }\n\n    const start = Date.now()\n    try {\n      await exportDataset({\n        client,\n        dataset,\n        outputPath,\n        onProgress,\n        ...flags,\n      })\n      spinner.succeed()\n    } catch (err) {\n      spinner.fail()\n      throw err\n    }\n\n    output.print(`Export finished (${prettyMs(Date.now() - start)})`)\n  },\n}\n\n// eslint-disable-next-line complexity\nasync function getOutputPath(\n  destination: string,\n  dataset: string,\n  prompt: CliPrompter,\n  flags: ParsedExportFlags\n) {\n  if (destination === '-') {\n    return '-'\n  }\n\n  const dstPath = path.isAbsolute(destination)\n    ? destination\n    : path.resolve(process.cwd(), destination)\n\n  let dstStats = await fs.stat(dstPath).catch(noop)\n  const looksLikeFile = dstStats ? dstStats.isFile() : path.basename(dstPath).indexOf('.') !== -1\n\n  if (!dstStats) {\n    const createPath = looksLikeFile ? path.dirname(dstPath) : dstPath\n\n    await fs.mkdir(createPath, {recursive: true})\n  }\n\n  const finalPath = looksLikeFile ? dstPath : path.join(dstPath, `${dataset}.tar.gz`)\n  dstStats = await fs.stat(finalPath).catch(noop)\n\n  if (!flags.overwrite && dstStats && dstStats.isFile()) {\n    const shouldOverwrite = await prompt.single({\n      type: 'confirm',\n      message: `File \"${finalPath}\" already exists, would you like to overwrite it?`,\n      default: false,\n    })\n\n    if (!shouldOverwrite) {\n      return false\n    }\n  }\n\n  return finalPath\n}\n\nexport default exportDatasetCommand\n","import path from 'path'\nimport fs from 'fs/promises'\nimport {createReadStream} from 'fs'\nimport type {CliCommandContext, CliCommandDefinition, CliOutputter} from '@sanity/cli'\nimport getIt from 'get-it'\nimport {promise} from 'get-it/middleware'\nimport sanityImport from '@sanity/import'\nimport padStart from 'lodash/padStart'\nimport prettyMs from 'pretty-ms'\nimport {chooseDatasetPrompt} from '../../actions/dataset/chooseDatasetPrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\nimport {debug} from '../../debug'\n\nconst yellow = (str: string) => `\\u001b[33m${str}\\u001b[39m`\n\nconst helpText = `\nOptions\n  --missing On duplicate document IDs, skip importing document in question\n  --replace On duplicate document IDs, replace existing document with imported document\n  --allow-failing-assets Skip assets that cannot be fetched/uploaded\n  --replace-assets Skip reuse of existing assets\n\nRarely used options (should generally not be used)\n  --allow-assets-in-different-dataset Allow asset documents to reference different project/dataset\n\nExamples\n  # Import \"moviedb.ndjson\" from the current directory to the dataset called \"moviedb\"\n  sanity dataset import moviedb.ndjson moviedb\n\n  # Import \"moviedb.tar.gz\" from the current directory to the dataset called \"moviedb\",\n  # replacing any documents encountered that have the same document IDs\n  sanity dataset import moviedb.tar.gz moviedb --replace\n\n  # Import from a folder containing an ndjson file, such as an extracted tarball\n  # retrieved through \"sanity dataset export\".\n  sanity dataset import ~/some/folder moviedb\n\n  # Import from a remote URL. Will download and extract the tarball to a temporary\n  # location before importing it.\n  sanity dataset import https://some.url/moviedb.tar.gz moviedb --replace\n`\n\ninterface ImportFlags {\n  'allow-assets-in-different-dataset'?: boolean\n  'allow-failing-assets'?: boolean\n  'asset-concurrency'?: boolean\n  'replace-assets'?: boolean\n  replace?: boolean\n  missing?: boolean\n}\n\ninterface ParsedImportFlags {\n  allowAssetsInDifferentDataset?: boolean\n  allowFailingAssets?: boolean\n  assetConcurrency?: boolean\n  replaceAssets?: boolean\n  replace?: boolean\n  missing?: boolean\n}\n\ninterface ProgressEvent {\n  step: string\n  total?: number\n  current?: number\n}\n\ninterface ImportWarning {\n  type?: string\n  url?: string\n}\n\nfunction toBoolIfSet(flag: unknown): boolean | undefined {\n  return typeof flag === 'undefined' ? undefined : Boolean(flag)\n}\n\nfunction parseFlags(rawFlags: ImportFlags): ParsedImportFlags {\n  const allowAssetsInDifferentDataset = toBoolIfSet(rawFlags['allow-assets-in-different-dataset'])\n  const allowFailingAssets = toBoolIfSet(rawFlags['allow-failing-assets'])\n  const assetConcurrency = toBoolIfSet(rawFlags['asset-concurrency'])\n  const replaceAssets = toBoolIfSet(rawFlags['replace-assets'])\n  const replace = toBoolIfSet(rawFlags.replace)\n  const missing = toBoolIfSet(rawFlags.missing)\n  return {\n    allowAssetsInDifferentDataset,\n    allowFailingAssets,\n    assetConcurrency,\n    replaceAssets,\n    replace,\n    missing,\n  }\n}\n\nconst importDatasetCommand: CliCommandDefinition = {\n  name: 'import',\n  group: 'dataset',\n  signature: '[FILE | FOLDER | URL] [TARGET_DATASET]',\n  description: 'Import documents to given dataset from ndjson file',\n  helpText,\n  // eslint-disable-next-line max-statements\n  action: async (args, context) => {\n    const {apiClient, output, chalk, fromInitCommand} = context\n    const flags = parseFlags(args.extOptions)\n    const {allowAssetsInDifferentDataset, allowFailingAssets, assetConcurrency, replaceAssets} =\n      flags\n\n    const operation = getMutationOperation(args.extOptions)\n    const client = apiClient()\n\n    const [file, target] = args.argsWithoutOptions\n    if (!file) {\n      throw new Error(\n        `Source file name and target dataset must be specified (\"sanity dataset import ${chalk.bold(\n          '[file]'\n        )} [dataset]\")`\n      )\n    }\n\n    const targetDataset = await determineTargetDataset(target, context)\n    debug(`Target dataset has been set to \"${targetDataset}\"`)\n\n    const isUrl = /^https?:\\/\\//i.test(file)\n    let inputStream\n    let assetsBase\n    let sourceIsFolder = false\n\n    if (isUrl) {\n      debug('Input is a URL, streaming from source URL')\n      inputStream = await getUrlStream(file)\n    } else {\n      const sourceFile = path.resolve(process.cwd(), file)\n      const fileStats = await fs.stat(sourceFile).catch(() => null)\n      if (!fileStats) {\n        throw new Error(`${sourceFile} does not exist or is not readable`)\n      }\n\n      sourceIsFolder = fileStats.isDirectory()\n      if (sourceIsFolder) {\n        inputStream = sourceFile\n      } else {\n        assetsBase = path.dirname(sourceFile)\n        inputStream = await createReadStream(sourceFile)\n      }\n    }\n\n    const importClient = client.clone().config({dataset: targetDataset})\n\n    let currentStep: string | undefined\n    let currentProgress: ReturnType<CliOutputter['spinner']> | undefined\n    let stepStart: number | undefined\n    let spinInterval: NodeJS.Timeout | null = null\n    let percent: string | undefined\n\n    function onProgress(opts: ProgressEvent) {\n      const lengthComputable = opts.total\n      const sameStep = opts.step == currentStep\n      percent = getPercentage(opts)\n\n      if (lengthComputable && opts.total === opts.current) {\n        if (spinInterval) {\n          clearInterval(spinInterval)\n        }\n        spinInterval = null\n      }\n\n      if (sameStep) {\n        return\n      }\n\n      // Moved to a new step\n      const prevStep = currentStep\n      const prevStepStart = stepStart || Date.now()\n      stepStart = Date.now()\n      currentStep = opts.step\n\n      if (currentProgress && currentProgress.succeed) {\n        const timeSpent = prettyMs(Date.now() - prevStepStart, {\n          secondsDecimalDigits: 2,\n        })\n        currentProgress.text = `[100%] ${prevStep} (${timeSpent})`\n        currentProgress.succeed()\n      }\n\n      currentProgress = output.spinner(`[0%] ${opts.step} (0.00s)`).start()\n\n      if (spinInterval) {\n        clearInterval(spinInterval)\n        spinInterval = null\n      }\n\n      spinInterval = setInterval(() => {\n        const timeSpent = prettyMs(Date.now() - prevStepStart, {\n          secondsDecimalDigits: 2,\n        })\n\n        if (currentProgress) {\n          currentProgress.text = `${percent}${opts.step} (${timeSpent})`\n        }\n      }, 60)\n    }\n\n    function endTask({success}: {success: boolean}) {\n      if (spinInterval) {\n        clearInterval(spinInterval)\n      }\n\n      spinInterval = null\n\n      if (success && stepStart && currentProgress) {\n        const timeSpent = prettyMs(Date.now() - stepStart, {\n          secondsDecimalDigits: 2,\n        })\n        currentProgress.text = `[100%] ${currentStep} (${timeSpent})`\n        currentProgress.succeed()\n      } else if (currentProgress) {\n        currentProgress.fail()\n      }\n    }\n\n    // Start the import!\n    try {\n      const {numDocs, warnings} = await sanityImport(inputStream, {\n        client: importClient,\n        assetsBase,\n        operation,\n        onProgress,\n        allowFailingAssets,\n        allowAssetsInDifferentDataset,\n        assetConcurrency,\n        replaceAssets,\n      })\n\n      endTask({success: true})\n\n      output.print('Done! Imported %d documents to dataset \"%s\"\\n', numDocs, targetDataset)\n      printWarnings(warnings, output)\n    } catch (err) {\n      endTask({success: false})\n\n      const isNonRefConflict =\n        !fromInitCommand &&\n        err.response &&\n        err.response.statusCode === 409 &&\n        err.step !== 'strengthen-references'\n\n      if (!isNonRefConflict) {\n        throw err\n      }\n\n      const message = [\n        err.message,\n        '',\n        'You probably want either:',\n        ' --replace (replace existing documents with same IDs)',\n        ' --missing (only import documents that do not already exist)',\n        '',\n      ].join('\\n')\n\n      // @todo SUBCLASS ERROR?\n      const error = new Error(message) as any\n      error.details = err.details\n      error.response = err.response\n      error.responseBody = err.responseBody\n\n      throw error\n    }\n  },\n}\n\nasync function determineTargetDataset(target: string, context: CliCommandContext) {\n  const {apiClient, output, prompt} = context\n  const client = apiClient()\n\n  if (target) {\n    const dsError = validateDatasetName(target)\n    if (dsError) {\n      throw new Error(dsError)\n    }\n  }\n\n  debug('Fetching available datasets')\n  const spinner = output.spinner('Fetching available datasets').start()\n  const datasets = await client.datasets.list()\n  spinner.succeed('[100%] Fetching available datasets')\n\n  let targetDataset = target ? `${target}` : null\n  if (!targetDataset) {\n    targetDataset = await chooseDatasetPrompt(context, {\n      message: 'Select target dataset',\n      allowCreation: true,\n    })\n  } else if (!datasets.find((dataset) => dataset.name === targetDataset)) {\n    debug('Target dataset does not exist, prompting for creation')\n    const shouldCreate = await prompt.single({\n      type: 'confirm',\n      message: `Dataset \"${targetDataset}\" does not exist, would you like to create it?`,\n      default: true,\n    })\n\n    if (!shouldCreate) {\n      throw new Error(`Dataset \"${targetDataset}\" does not exist`)\n    }\n\n    await client.datasets.create(targetDataset)\n  }\n\n  return targetDataset\n}\n\nfunction getMutationOperation(flags: ParsedImportFlags) {\n  const {replace, missing} = flags\n  if (replace && missing) {\n    throw new Error('Cannot use both --replace and --missing')\n  }\n\n  if (flags.replace) {\n    return 'createOrReplace'\n  }\n\n  if (flags.missing) {\n    return 'createIfNotExists'\n  }\n\n  return 'create'\n}\n\nfunction getPercentage(opts: ProgressEvent) {\n  if (!opts.total || typeof opts.current === 'undefined') {\n    return ''\n  }\n\n  const percent = Math.floor((opts.current / opts.total) * 100)\n  return `[${padStart(`${percent}`, 3, ' ')}%] `\n}\n\nfunction getUrlStream(url: string) {\n  const request = getIt([promise({onlyBody: true})])\n  return request({url, stream: true})\n}\n\nfunction printWarnings(warnings: ImportWarning[], output: CliOutputter) {\n  const assetFails = warnings.filter((warn) => warn.type === 'asset')\n\n  if (!assetFails.length) {\n    return\n  }\n\n  const warn = (output.warn || output.print).bind(output)\n\n  warn(yellow('⚠ Failed to import the following %s:'), assetFails.length > 1 ? 'assets' : 'asset')\n\n  warnings.forEach((warning) => {\n    warn(`  ${warning.url}`)\n  })\n}\n\nexport default importDatasetCommand\n","import type {SanityClient} from '@sanity/client'\nimport type {CliCommandDefinition, CliOutputter} from '@sanity/cli'\nimport EventSource from '@sanity/eventsource'\nimport {Observable} from 'rxjs'\nimport {promptForDatasetName} from '../../actions/dataset/datasetNamePrompt'\nimport {validateDatasetName} from '../../actions/dataset/validateDatasetName'\nimport {debug} from '../../debug'\n\nconst helpText = `\nOptions\n  --detach Start the copy without waiting for it to finish\n  --attach <job-id> Attach to the running copy process to show progress\n  --skip-history Don't preserve document history on copy\n\nExamples\n  sanity dataset copy\n  sanity dataset copy <source-dataset>\n  sanity dataset copy <source-dataset> <target-dataset>\n  sanity dataset copy --skip-history <source-dataset> <target-dataset>\n  sanity dataset copy --detach <source-dataset> <target-dataset>\n  sanity dataset copy --attach <job-id>\n`\n\ninterface CopyProgressStreamEvent {\n  type: 'reconnect' | string\n  progress?: number\n}\n\ninterface CopyFlags {\n  attach?: string\n  detach?: boolean\n  'skip-history'?: boolean\n}\n\nconst progress = (url: string) => {\n  return new Observable<CopyProgressStreamEvent>((observer) => {\n    let progressSource = new EventSource(url)\n    let stopped = false\n\n    function onError(error: unknown) {\n      if (progressSource) {\n        progressSource.close()\n      }\n\n      debug(`Error received: ${error}`)\n      if (stopped) {\n        return\n      }\n      observer.next({type: 'reconnect'})\n      progressSource = new EventSource(url)\n    }\n\n    function onChannelError(error: MessageEvent) {\n      stopped = true\n      progressSource.close()\n      observer.error(error)\n    }\n\n    function onMessage(event: MessageEvent) {\n      const data = JSON.parse(event.data)\n      if (data.state === 'failed') {\n        debug('Job failed. Data: %o', event)\n        observer.error(event)\n      } else if (data.state === 'completed') {\n        debug('Job succeeded. Data: %o', event)\n        onComplete()\n      } else {\n        debug(`Job progressed. Data: %o`, event)\n        observer.next(data)\n      }\n    }\n\n    function onComplete() {\n      progressSource.removeEventListener('error', onError)\n      progressSource.removeEventListener('channel_error', onChannelError)\n      progressSource.removeEventListener('job', onMessage)\n      progressSource.removeEventListener('done', onComplete)\n      progressSource.close()\n      observer.complete()\n    }\n\n    progressSource.addEventListener('error', onError)\n    progressSource.addEventListener('channel_error', onChannelError)\n    progressSource.addEventListener('job', onMessage)\n    progressSource.addEventListener('done', onComplete)\n  })\n}\n\nconst followProgress = (jobId: string, client: SanityClient, output: CliOutputter) => {\n  let currentProgress = 0\n\n  const spinner = output.spinner({}).start()\n  const listenUrl = client.getUrl(`jobs/${jobId}/listen`)\n\n  debug(`Listening to ${listenUrl}`)\n\n  progress(listenUrl).subscribe({\n    next: (event) => {\n      if (typeof event.progress === 'number') {\n        currentProgress = event.progress\n      }\n\n      spinner.text = `Copy in progress: ${currentProgress}%`\n    },\n    error: (err) => {\n      spinner.fail(`There was an error copying the dataset: ${err.message}`)\n    },\n    complete: () => {\n      spinner.succeed('Copy finished.')\n    },\n  })\n}\n\nconst copyDatasetCommand: CliCommandDefinition<CopyFlags> = {\n  name: 'copy',\n  group: 'dataset',\n  signature: '[SOURCE_DATASET] [TARGET_DATASET]',\n  helpText,\n  description: 'Copies a dataset including its assets to a new dataset',\n  action: async (args, context) => {\n    const {apiClient, output, prompt, chalk} = context\n    const flags = args.extOptions\n    const client = apiClient()\n\n    if (flags.attach) {\n      const jobId = flags.attach\n\n      if (!jobId) {\n        throw new Error('Please supply a jobId')\n      }\n\n      followProgress(jobId, client, output)\n\n      return\n    }\n\n    const [sourceDataset, targetDataset] = args.argsWithoutOptions\n    const shouldSkipHistory = Boolean(flags['skip-history'])\n\n    const nameError = sourceDataset && validateDatasetName(sourceDataset)\n    if (nameError) {\n      throw new Error(nameError)\n    }\n\n    const existingDatasets = await client.datasets\n      .list()\n      .then((datasets) => datasets.map((ds) => ds.name))\n\n    const sourceDatasetName = await (sourceDataset ||\n      promptForDatasetName(prompt, {message: 'Source dataset name:'}))\n    if (!existingDatasets.includes(sourceDatasetName)) {\n      throw new Error(`Source dataset \"${sourceDatasetName}\" doesn't exist`)\n    }\n\n    const targetDatasetName = await (targetDataset ||\n      promptForDatasetName(prompt, {message: 'Target dataset name:'}))\n    if (existingDatasets.includes(targetDatasetName)) {\n      throw new Error(`Target dataset \"${targetDatasetName}\" already exists`)\n    }\n\n    const err = validateDatasetName(targetDatasetName)\n    if (err) {\n      throw new Error(err)\n    }\n\n    try {\n      const response = await client.request({\n        method: 'PUT',\n        uri: `/datasets/${sourceDatasetName}/copy`,\n        body: {\n          targetDataset: targetDatasetName,\n          skipHistory: shouldSkipHistory,\n        },\n      })\n\n      output.print(\n        `Copying dataset ${chalk.green(sourceDatasetName)} to ${chalk.green(targetDatasetName)}...`\n      )\n      output.print(`Job ${chalk.green(response.jobId)} started`)\n\n      if (flags.detach) {\n        return\n      }\n\n      followProgress(response.jobId, client, output)\n    } catch (error) {\n      if (error.statusCode) {\n        output.print(`${chalk.red(`Dataset copying failed:\\n${error.response.body.message}`)}\\n`)\n      } else {\n        output.print(`${chalk.red(`Dataset copying failed:\\n${error.message}`)}\\n`)\n      }\n    }\n  },\n}\n\nexport default copyDatasetCommand\n","import type {CliPrompter} from '@sanity/cli'\nimport {validateDatasetAliasName} from './validateDatasetAliasName'\n\nexport function promptForDatasetAliasName(\n  prompt: CliPrompter,\n  options: {message?: string; default?: string} = {}\n): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Alias name:',\n    validate: (name) => {\n      const err = validateDatasetAliasName(name)\n      if (err) {\n        return err\n      }\n\n      return true\n    },\n    ...options,\n  })\n}\n","import type {CliCommandAction} from '@sanity/cli'\nimport {promptForDatasetName} from '../../../actions/dataset/datasetNamePrompt'\nimport {promptForDatasetAliasName} from '../../../actions/dataset/alias/promptForDatasetAliasName'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport {validateDatasetName} from '../../../actions/dataset/validateDatasetName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const createAliasHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output, prompt} = context\n  const [, alias, targetDataset] = args.argsWithoutOptions\n  const client = apiClient()\n\n  const nameError = alias && validateDatasetAliasName(alias)\n  if (nameError) {\n    throw new Error(nameError)\n  }\n\n  const [datasets, aliases, projectFeatures] = await Promise.all([\n    client.datasets.list().then((sets) => sets.map((ds) => ds.name)),\n    aliasClient.listAliases(client).then((sets) => sets.map((ds) => ds.name)),\n    client.request({uri: '/features'}),\n  ])\n\n  let aliasName = await (alias || promptForDatasetAliasName(prompt))\n  let aliasOutputName = aliasName\n\n  if (aliasName.startsWith(ALIAS_PREFIX)) {\n    aliasName = aliasName.substring(1)\n  } else {\n    aliasOutputName = `${ALIAS_PREFIX}${aliasName}`\n  }\n\n  if (aliases.includes(aliasName)) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" already exists`)\n  }\n\n  if (targetDataset) {\n    const datasetErr = validateDatasetName(targetDataset)\n    if (datasetErr) {\n      throw new Error(datasetErr)\n    }\n  }\n\n  const datasetName = await (targetDataset || promptForDatasetName(prompt))\n  if (datasetName && !datasets.includes(datasetName)) {\n    throw new Error(`Dataset \"${datasetName}\" does not exist `)\n  }\n\n  const canCreateAlias = projectFeatures.includes('advancedDatasetManagement')\n  if (!canCreateAlias) {\n    throw new Error(`This project cannot create a dataset alias`)\n  }\n\n  try {\n    await aliasClient.createAlias(client, aliasName, datasetName)\n    output.print(\n      `Dataset alias ${aliasOutputName} created ${\n        datasetName && `and linked to ${datasetName}`\n      } successfully`\n    )\n  } catch (err) {\n    throw new Error(`Dataset alias creation failed:\\n${err.message}`)\n  }\n}\n","import type {CliCommandAction} from '@sanity/cli'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const deleteAliasHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, prompt, output} = context\n  const [, ds] = args.argsWithoutOptions\n  const client = apiClient()\n  if (!ds) {\n    throw new Error('Dataset alias name must be provided')\n  }\n\n  let aliasName = `${ds}`\n  const dsError = validateDatasetAliasName(aliasName)\n  if (dsError) {\n    throw dsError\n  }\n  aliasName = aliasName.startsWith(ALIAS_PREFIX) ? aliasName.substring(1) : aliasName\n\n  const [fetchedAliases] = await Promise.all([aliasClient.listAliases(client)])\n  const linkedAlias = fetchedAliases.find((elem) => elem.name === aliasName)\n  const message =\n    linkedAlias && linkedAlias.datasetName\n      ? `This dataset alias is linked to ${linkedAlias.datasetName}. `\n      : ''\n\n  await prompt.single({\n    type: 'input',\n    message: `${message}Are you ABSOLUTELY sure you want to delete this dataset alias?\\n  Type the name of the dataset alias to confirm delete: `,\n    filter: (input) => `${input}`.trim(),\n    validate: (input) => {\n      return input === aliasName || 'Incorrect dataset alias name. Ctrl + C to cancel delete.'\n    },\n  })\n\n  // Strip out alias prefix if it exist in the string\n  aliasName = aliasName.startsWith(ALIAS_PREFIX) ? aliasName.substring(1) : aliasName\n\n  return aliasClient.removeAlias(client, aliasName).then(() => {\n    output.print('Dataset alias deleted successfully')\n  })\n}\n","import type {CliCommandAction} from '@sanity/cli'\nimport {promptForDatasetAliasName} from '../../../actions/dataset/alias/promptForDatasetAliasName'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const unlinkAliasHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output, prompt} = context\n  const [, alias] = args.argsWithoutOptions\n  const client = apiClient()\n\n  const nameError = alias && validateDatasetAliasName(alias)\n  if (nameError) {\n    throw new Error(nameError)\n  }\n\n  const fetchedAliases = await aliasClient.listAliases(client)\n\n  let aliasName = await (alias || promptForDatasetAliasName(prompt))\n  let aliasOutputName = aliasName\n\n  if (aliasName.startsWith(ALIAS_PREFIX)) {\n    aliasName = aliasName.substring(1)\n  } else {\n    aliasOutputName = `${ALIAS_PREFIX}${aliasName}`\n  }\n\n  // get the current alias from the remote alias list\n  const linkedAlias = fetchedAliases.find((elem) => elem.name === aliasName)\n  if (!linkedAlias) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" does not exist`)\n  }\n\n  if (!linkedAlias.datasetName) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" is not linked to a dataset`)\n  }\n\n  await prompt.single({\n    type: 'input',\n    message: `Are you ABSOLUTELY sure you want to unlink this alias from the \"${linkedAlias.datasetName}\" dataset?\n      \\n  Type YES/NO: `,\n    filter: (input) => `${input}`.toLowerCase(),\n    validate: (input) => {\n      return input === 'yes' || 'Ctrl + C to cancel dataset alias unlink.'\n    },\n  })\n\n  try {\n    const result = await aliasClient.unlinkAlias(client, aliasName)\n    output.print(\n      `Dataset alias ${aliasOutputName} unlinked from ${result.datasetName} successfully`\n    )\n  } catch (err) {\n    throw new Error(`Dataset alias unlink failed:\\n${err.message}`)\n  }\n}\n","import type {CliCommandAction} from '@sanity/cli'\nimport {promptForDatasetName} from '../../../actions/dataset/datasetNamePrompt'\nimport {promptForDatasetAliasName} from '../../../actions/dataset/alias/promptForDatasetAliasName'\nimport {validateDatasetAliasName} from '../../../actions/dataset/alias/validateDatasetAliasName'\nimport {validateDatasetName} from '../../../actions/dataset/validateDatasetName'\nimport * as aliasClient from './datasetAliasesClient'\nimport {ALIAS_PREFIX} from './datasetAliasesClient'\n\nexport const linkAliasHandler: CliCommandAction = async (args, context) => {\n  const {apiClient, output, prompt} = context\n  const [, alias, targetDataset] = args.argsWithoutOptions\n  const flags = args.extOptions\n  const client = apiClient()\n\n  const nameError = alias && validateDatasetAliasName(alias)\n  if (nameError) {\n    throw new Error(nameError)\n  }\n\n  const [datasets, fetchedAliases] = await Promise.all([\n    client.datasets.list().then((sets) => sets.map((ds) => ds.name)),\n    aliasClient.listAliases(client),\n  ])\n  const aliases = fetchedAliases.map((da) => da.name)\n\n  let aliasName = await (alias || promptForDatasetAliasName(prompt))\n  let aliasOutputName = aliasName\n\n  if (aliasName.startsWith(ALIAS_PREFIX)) {\n    aliasName = aliasName.substring(1)\n  } else {\n    aliasOutputName = `${ALIAS_PREFIX}${aliasName}`\n  }\n\n  if (!aliases.includes(aliasName)) {\n    throw new Error(`Dataset alias \"${aliasOutputName}\" does not exist `)\n  }\n\n  const datasetName = await (targetDataset || promptForDatasetName(prompt))\n  const datasetErr = validateDatasetName(datasetName)\n  if (datasetErr) {\n    throw new Error(datasetErr)\n  }\n\n  if (!datasets.includes(datasetName)) {\n    throw new Error(`Dataset \"${datasetName}\" does not exist `)\n  }\n\n  const linkedAlias = fetchedAliases.find((elem) => elem.name === aliasName)\n\n  if (linkedAlias && linkedAlias.datasetName) {\n    if (linkedAlias.datasetName === datasetName) {\n      throw new Error(`Dataset alias ${aliasOutputName} already linked to ${datasetName}`)\n    }\n\n    if (!flags.force) {\n      await prompt.single({\n        type: 'input',\n        message: `This alias is linked to dataset <${linkedAlias.datasetName}>. Are you ABSOLUTELY sure you want to link this dataset alias to this dataset?\n        \\n  Type YES/NO: `,\n        filter: (input) => `${input}`.toLowerCase(),\n        validate: (input) => {\n          return input === 'yes' || 'Ctrl + C to cancel dataset alias link.'\n        },\n      })\n    }\n  }\n\n  try {\n    await aliasClient.updateAlias(client, aliasName, datasetName)\n    output.print(`Dataset alias ${aliasOutputName} linked to ${datasetName} successfully`)\n  } catch (err) {\n    throw new Error(`Dataset alias link failed:\\n${err.message}`)\n  }\n}\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport oneline from 'oneline'\nimport {createAliasHandler} from './createAliasHandler'\nimport {deleteAliasHandler} from './deleteAliasHandler'\nimport {unlinkAliasHandler} from './unlinkAliasHandler'\nimport {linkAliasHandler} from './linkAliasHandler'\n\nconst helpText = `\nBelow are examples of the alias subcommand\n\nCreate Alias\n  sanity dataset alias create\n  sanity dataset alias create <alias-name>\n  sanity dataset alias create <alias-name> <target-dataset>\n\nDelete Alias\n  sanity dataset alias delete <alias-name>\n\nLink Alias\n  Options\n    --force Skips security prompt and forces link command\n\n  Usage\n    sanity dataset alias link\n    sanity dataset alias link <alias-name>\n    sanity dataset alias link <alias-name> <target-dataset>\n\nUn-link Alias\n  sanity dataset alias unlink\n  sanity dataset alias unlink <alias-name>\n`\n\nconst aliasCommand: CliCommandDefinition = {\n  name: 'alias',\n  group: 'dataset',\n  signature: 'SUBCOMMAND [ALIAS_NAME, TARGET_DATASET]',\n  helpText,\n  description: 'You can manage your dataset alias using this command.',\n  action: async (args, context) => {\n    const [verb] = args.argsWithoutOptions\n    switch (verb) {\n      case 'create':\n        await createAliasHandler(args, context)\n        break\n      case 'delete':\n        await deleteAliasHandler(args, context)\n        break\n      case 'unlink':\n        await unlinkAliasHandler(args, context)\n        break\n      case 'link':\n        await linkAliasHandler(args, context)\n        break\n      default:\n        throw new Error(oneline`\n          Invalid command provided. Available commands are: create, delete, link and unlink.\n          For more guide run the help command 'sanity dataset alias --help'\n        `)\n    }\n  },\n}\n\nexport default aliasCommand\n","import type {CliCommandGroupDefinition} from '@sanity/cli'\n\nconst documentsGroup: CliCommandGroupDefinition = {\n  name: 'documents',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interact with documents in your project',\n}\n\nexport default documentsGroup\n","import type {CliCommandContext} from '@sanity/cli'\nimport tokenize, {LexerToken} from 'json-lexer'\n\ninterface KeyToken {\n  type: 'key'\n  value: string\n  raw: string\n}\n\ntype ExtendedLexerToken = LexerToken | KeyToken\n\nconst identity = (inp: string): string => inp\n\nexport function colorizeJson(input: unknown, chalk: CliCommandContext['chalk']): string {\n  const formatters: Record<ExtendedLexerToken['type'], (str: string) => string> = {\n    punctuator: chalk.white,\n    key: chalk.white,\n    string: chalk.green,\n    number: chalk.yellow,\n    literal: chalk.bold,\n    whitespace: identity,\n  }\n\n  const json = JSON.stringify(input, null, 2)\n\n  return tokenize(json)\n    .map((token, i, arr): ExtendedLexerToken => {\n      // Note how the following only works because we pretty-print the JSON\n      const prevToken = i === 0 ? token : arr[i - 1]\n      if (\n        token.type === 'string' &&\n        prevToken.type === 'whitespace' &&\n        /^\\n\\s+$/.test(prevToken.value)\n      ) {\n        return {...token, type: 'key'}\n      }\n\n      return token\n    })\n    .map((token) => {\n      const formatter = formatters[token.type] || identity\n      return formatter(token.raw)\n    })\n    .join('')\n}\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport {colorizeJson} from '../../util/colorizeJson'\n\nconst helpText = `\nGet and print a document from the projects configured dataset\n\nOptions\n  --pretty colorized JSON output\n  --dataset NAME to override dataset\n\nExamples\n  # Get the document with the ID \"myDocId\"\n  sanity documents get myDocId\n\n  # ID wrapped in double or single quote works equally well\n  sanity documents get 'myDocId'\n`\n\ninterface GetDocumentFlags {\n  pretty?: boolean\n  dataset?: string\n}\n\nconst getDocumentsCommand: CliCommandDefinition<GetDocumentFlags> = {\n  name: 'get',\n  group: 'documents',\n  signature: '[DOCUMENT_ID]',\n  helpText,\n  description: 'Get and print a document by ID',\n  action: async (args, context) => {\n    const {apiClient, output, chalk} = context\n    const {pretty, dataset} = args.extOptions\n    const [docId] = args.argsWithoutOptions.map((str) => `${str}`)\n\n    if (!docId) {\n      throw new Error('Document ID must be specified')\n    }\n\n    const client = dataset ? apiClient().clone().config({dataset}) : apiClient()\n\n    try {\n      const doc = await client.getDocument(docId)\n      if (!doc) {\n        throw new Error('Document not found')\n      }\n\n      output.print(pretty ? colorizeJson(doc, chalk) : JSON.stringify(doc, null, 2))\n    } catch (err) {\n      throw new Error(`Failed to fetch document:\\n${err.message}`)\n    }\n  },\n}\n\nexport default getDocumentsCommand\n","import yargs from 'yargs/yargs'\nimport {hideBin} from 'yargs/helpers'\nimport type {CliCommandArguments, CliCommandContext} from '@sanity/cli'\nimport {colorizeJson} from '../../util/colorizeJson'\n\nconst defaultApiVersion = 'v2022-06-01'\n\nconst helpText = `\nRun a query against the projects configured dataset\n\nOptions\n  --pretty colorized JSON output\n  --dataset NAME to override dataset\n  --project PROJECT to override project ID\n  --anonymous Send the query without any authorization token\n  --api-version API version to use (defaults to \\`${defaultApiVersion}\\`)\n\nEnvironment variables\n  \\`SANITY_CLI_QUERY_API_VERSION\\` - will use the defined API version,\n  unless \\`--api-version\\` is specified.\n\nExamples\n  # Fetch 5 documents of type \"movie\"\n  sanity documents query '*[_type == \"movie\"][0..4]'\n\n  # Fetch title of the oldest movie in the dataset named \"staging\"\n  sanity documents query '*[_type == \"movie\"]|order(releaseDate asc)[0]{title}' --dataset staging\n\n  # Use API version v2021-06-07 and do a query\n  sanity documents query --api-version v2021-06-07 '*[_id == \"header\"] { \"headerText\": pt::text(body) }'\n`\n\ninterface CliQueryCommandFlags {\n  pretty?: boolean\n  anonymous?: boolean\n  dataset?: string\n  project?: string\n  apiVersion?: string\n}\n\nexport default {\n  name: 'query',\n  group: 'documents',\n  signature: '[QUERY]',\n  helpText,\n  description: 'Query for documents',\n  action: async (\n    args: CliCommandArguments<CliQueryCommandFlags>,\n    context: CliCommandContext\n  ): Promise<void> => {\n    // Reparsing arguments for improved control of flags\n    const {\n      pretty,\n      dataset,\n      project,\n      anonymous,\n      'api-version': apiVersion,\n    } = await parseCliFlags(args)\n    const {apiClient, output, chalk, cliConfig} = context\n    const [query] = args.argsWithoutOptions\n\n    if (!query) {\n      throw new Error('Query must be specified')\n    }\n\n    if (!apiVersion) {\n      output.warn(chalk.yellow(`--api-version not specified, using \\`${defaultApiVersion}\\``))\n    }\n\n    const requireDataset = !dataset\n    const requireProject = !project\n    const requireUser = !anonymous\n\n    if (requireProject && !cliConfig?.api?.projectId) {\n      throw new Error(\n        'No project configured in CLI config - either configure one, or use `--project` flag'\n      )\n    }\n\n    if (requireDataset && !cliConfig?.api?.dataset) {\n      throw new Error(\n        'No dataset configured in CLI config - either configure one, or use `--dataset` flag'\n      )\n    }\n\n    const baseClient = apiClient({requireProject, requireUser}).clone()\n    const {dataset: originalDataset, projectId: originalProjectId} = baseClient.config()\n\n    const client = baseClient.config({\n      projectId: project || originalProjectId,\n      dataset: dataset || originalDataset,\n      apiVersion: apiVersion || defaultApiVersion,\n    })\n\n    try {\n      const docs = await client.fetch(query)\n      if (!docs) {\n        throw new Error('Query returned no results')\n      }\n\n      output.print(pretty ? colorizeJson(docs, chalk) : JSON.stringify(docs, null, 2))\n    } catch (err) {\n      throw new Error(`Failed to run query:\\n${err.message}`)\n    }\n  },\n}\n\nfunction parseCliFlags(args: CliCommandArguments<CliQueryCommandFlags>) {\n  // eslint-disable-next-line no-process-env\n  const fallbackApiVersion = process.env.SANITY_CLI_QUERY_API_VERSION\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .option('pretty', {type: 'boolean', default: false})\n    .option('dataset', {type: 'string'})\n    .option('project', {type: 'string'})\n    .option('anonymous', {type: 'boolean', default: false})\n    .option('api-version', {type: 'string', default: fallbackApiVersion}).argv\n}\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport pluralize from 'pluralize-esm'\n\nconst helpText = `\nDelete a document from the projects configured dataset\n\nOptions\n  --dataset NAME to override dataset\n\nExample\n  # Delete the document with the ID \"myDocId\"\n  sanity documents delete myDocId\n\n  # ID wrapped in double or single quote works equally well\n  sanity documents delete 'myDocId'\n\n  # Delete document with ID \"someDocId\" from dataset \"blog\"\n  sanity documents delete --dataset=blog someDocId\n\n  # Delete the document with ID \"doc1\" and \"doc2\"\n  sanity documents delete doc1 doc2\n`\n\ninterface DeleteFlags {\n  dataset?: string\n}\n\nconst deleteDocumentsCommand: CliCommandDefinition<DeleteFlags> = {\n  name: 'delete',\n  group: 'documents',\n  signature: '[ID] [...IDS]',\n  helpText,\n  description: 'Delete a document by ID',\n  action: async (args, context) => {\n    const {apiClient, output, chalk} = context\n    const {dataset} = args.extOptions\n    const ids = args.argsWithoutOptions.map((str) => `${str}`)\n\n    if (!ids.length) {\n      throw new Error('Document ID must be specified')\n    }\n\n    const client = dataset ? apiClient().clone().config({dataset}) : apiClient()\n\n    const transaction = ids.reduce((trx, id) => trx.delete(id), client.transaction())\n    try {\n      const {results} = await transaction.commit()\n      const deleted = results.filter((res) => res.operation === 'delete').map((res) => res.id)\n      const notFound = ids.filter((id) => !deleted.includes(id))\n      if (deleted.length > 0) {\n        output.print(`Deleted ${deleted.length} ${pluralize('document', deleted.length)}`)\n      }\n\n      if (notFound.length > 0) {\n        output.error(\n          chalk.red(`${pluralize('Document', notFound.length)} not found: ${notFound.join(', ')}`)\n        )\n      }\n    } catch (err) {\n      throw new Error(`Failed to delete ${pluralize('document', ids.length)}:\\n${err.message}`)\n    }\n  },\n}\n\nexport default deleteDocumentsCommand\n","import path from 'path'\nimport fs from 'fs/promises'\nimport os from 'os'\nimport type {CliCommandDefinition} from '@sanity/cli'\nimport type {\n  SanityClient,\n  MultipleMutationResult,\n  Mutation,\n  IdentifiedSanityDocumentStub,\n} from '@sanity/client'\nimport json5 from 'json5'\nimport execa from 'execa'\nimport chokidar from 'chokidar'\nimport {isPlainObject, isEqual, noop} from 'lodash'\nimport {uuid} from '@sanity/uuid'\n\ntype MutationOperationName = 'create' | 'createOrReplace' | 'createIfNotExists'\n\ninterface CreateFlags {\n  dataset?: string\n  replace?: boolean\n  missing?: boolean\n  watch?: boolean\n  json5?: boolean\n  id?: string\n}\n\nconst helpText = `\nOptions\n  --replace On duplicate document IDs, replace existing document with specified document(s)\n  --missing On duplicate document IDs, don't modify the target document(s)\n  --watch   Write the documents whenever the target file or buffer changes\n  --json5   Use JSON5 file type to allow a \"simplified\" version of JSON\n  --id <id> Specify a document ID to use. Will fetch remote document ID and populate editor.\n  --dataset NAME to override dataset\n\nExamples\n  # Create the document specified in \"myDocument.json\".\n  sanity documents create myDocument.json\n\n  # Open configured $EDITOR and create the specified document(s)\n  sanity documents create\n\n  # Fetch document with the ID \"myDocId\" and open configured $EDITOR with the\n  # current document content (if any). Replace document with the edited version\n  # when the editor closes\n  sanity documents create --id myDocId --replace\n\n  # Open configured $EDITOR and replace the document with the given content\n  # on each save. Use JSON5 file extension and parser for simplified syntax.\n  sanity documents create --id myDocId --watch --replace --json5\n`\n\nconst createDocumentsCommand: CliCommandDefinition<CreateFlags> = {\n  name: 'create',\n  group: 'documents',\n  signature: '[FILE]',\n  helpText,\n  description: 'Create one or more documents',\n  // eslint-disable-next-line complexity\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const {replace, missing, watch, id, dataset} = args.extOptions\n    const [file] = args.argsWithoutOptions\n    const useJson5 = args.extOptions.json5\n    const client = dataset ? apiClient().clone().config({dataset}) : apiClient()\n\n    if (replace && missing) {\n      throw new Error('Cannot use both --replace and --missing')\n    }\n\n    if (id && file) {\n      throw new Error('Cannot use --id when specifying a file path')\n    }\n\n    let operation: MutationOperationName = 'create'\n    if (replace || missing) {\n      operation = replace ? 'createOrReplace' : 'createIfNotExists'\n    }\n\n    if (file) {\n      const contentPath = path.resolve(process.cwd(), file)\n      const content = json5.parse(await fs.readFile(contentPath, 'utf8'))\n      const result = await writeDocuments(content, operation, client)\n      output.print(getResultMessage(result, operation))\n      return\n    }\n\n    // Create a temporary file and use that as source, opening an editor on it\n    const docId = id || uuid()\n    const ext = useJson5 ? 'json5' : 'json'\n    const tmpFile = path.join(os.tmpdir(), 'sanity-cli', `${docId}.${ext}`)\n    const stringify = useJson5 ? json5.stringify : JSON.stringify\n    const defaultValue = (id && (await client.getDocument(id))) || {_id: docId, _type: 'specify-me'}\n    await fs.mkdir(path.join(os.tmpdir(), 'sanity-cli'), {recursive: true})\n    await fs.writeFile(tmpFile, stringify(defaultValue, null, 2), 'utf8')\n\n    const editor = getEditor()\n    if (watch) {\n      // If we're in watch mode, we want to run the creation on each change (if it validates)\n      registerUnlinkOnSigInt(tmpFile)\n      output.print(`Watch mode: ${tmpFile}`)\n      output.print('Watch mode: Will write documents on each save.')\n      output.print('Watch mode: Press Ctrl + C to cancel watch mode.')\n      chokidar.watch(tmpFile).on('change', () => {\n        output.print('')\n        return readAndPerformCreatesFromFile(tmpFile)\n      })\n      execa(editor.bin, editor.args.concat(tmpFile), {stdio: 'inherit'})\n    } else {\n      // While in normal mode, we just want to wait for the editor to close and run the thing once\n      execa.sync(editor.bin, editor.args.concat(tmpFile), {stdio: 'inherit'})\n      await readAndPerformCreatesFromFile(tmpFile)\n      await fs.unlink(tmpFile).catch(noop)\n    }\n\n    async function readAndPerformCreatesFromFile(filePath: string) {\n      let content\n      try {\n        content = json5.parse(await fs.readFile(filePath, 'utf8'))\n      } catch (err) {\n        output.error(`Failed to read input: ${err.message}`)\n        return\n      }\n\n      if (isEqual(content, defaultValue)) {\n        output.print('Value not modified, doing nothing.')\n        output.print('Modify document to trigger creation.')\n        return\n      }\n\n      try {\n        const writeResult = await writeDocuments(content, operation, client)\n        output.print(getResultMessage(writeResult, operation))\n      } catch (err) {\n        output.error(`Failed to write documents: ${err.message}`)\n        if (err.message.includes('already exists')) {\n          output.error('Perhaps you want to use `--replace` or `--missing`?')\n        }\n      }\n    }\n  },\n}\n\nfunction registerUnlinkOnSigInt(tmpFile: string) {\n  process.on('SIGINT', async () => {\n    await fs.unlink(tmpFile).catch(noop)\n    // eslint-disable-next-line no-process-exit\n    process.exit(130)\n  })\n}\n\nfunction writeDocuments(\n  documents: {_id?: string; _type: string} | {_id?: string; _type: string}[],\n  operation: MutationOperationName,\n  client: SanityClient\n) {\n  const docs = Array.isArray(documents) ? documents : [documents]\n  if (docs.length === 0) {\n    throw new Error('No documents provided')\n  }\n\n  const mutations = docs.map((doc, index): Mutation => {\n    validateDocument(doc, index, docs)\n    if (operation === 'create') {\n      return {create: doc}\n    }\n\n    if (operation === 'createIfNotExists') {\n      if (isIdentifiedSanityDocument(doc)) {\n        return {createIfNotExists: doc}\n      }\n\n      throw new Error(`Missing required _id attribute for ${operation}`)\n    }\n\n    if (operation === 'createOrReplace') {\n      if (isIdentifiedSanityDocument(doc)) {\n        return {createOrReplace: doc}\n      }\n\n      throw new Error(`Missing required _id attribute for ${operation}`)\n    }\n\n    throw new Error(`Unsupported operation ${operation}`)\n  })\n\n  return client.transaction(mutations).commit()\n}\n\nfunction validateDocument(doc: unknown, index: number, arr: unknown[]) {\n  const isSingle = arr.length === 1\n\n  if (!isPlainObject(doc)) {\n    throw new Error(getErrorMessage('must be an object', index, isSingle))\n  }\n\n  if (!isSanityDocumentish(doc)) {\n    throw new Error(getErrorMessage('must have a `_type` property of type string', index, isSingle))\n  }\n}\n\nfunction isSanityDocumentish(doc: unknown): doc is {_type: string} {\n  return (\n    doc !== null &&\n    typeof doc === 'object' &&\n    '_type' in doc &&\n    typeof (doc as any)._type === 'string'\n  )\n}\n\nfunction isIdentifiedSanityDocument(doc: unknown): doc is IdentifiedSanityDocumentStub {\n  return isSanityDocumentish(doc) && '_id' in doc\n}\n\nfunction getErrorMessage(message: string, index: number, isSingle: boolean): string {\n  return isSingle ? `Document ${message}` : `Document at index ${index} ${message}`\n}\n\nfunction getResultMessage(\n  result: MultipleMutationResult,\n  operation: MutationOperationName\n): string {\n  const joiner = '\\n  - '\n  if (operation === 'createOrReplace') {\n    return `Upserted:\\n  - ${result.results.map((res) => res.id).join(joiner)}`\n  }\n\n  if (operation === 'create') {\n    return `Created:\\n  - ${result.results.map((res) => res.id).join(joiner)}`\n  }\n\n  // \"Missing\" (createIfNotExists)\n  const created: string[] = []\n  const skipped: string[] = []\n  for (const res of result.results) {\n    if (res.operation === 'update') {\n      skipped.push(res.id)\n    } else {\n      created.push(res.id)\n    }\n  }\n\n  if (created.length > 0 && skipped.length > 0) {\n    return [\n      `Created:\\n  - ${created.join(joiner)}`,\n      `Skipped (already exists):${joiner}${skipped.join(joiner)}`,\n    ].join('\\n\\n')\n  } else if (created.length > 0) {\n    return `Created:\\n  - ${created.join(joiner)}`\n  }\n\n  return `Skipped (already exists):\\n  - ${skipped.join(joiner)}`\n}\n\nfunction getEditor() {\n  const defaultEditor = /^win/.test(process.platform) ? 'notepad' : 'vim'\n  // eslint-disable-next-line no-process-env\n  const editor = process.env.VISUAL || process.env.EDITOR || defaultEditor\n  const args = editor.split(/\\s+/)\n  const bin = args.shift() || ''\n  return {bin, args}\n}\n\nexport default createDocumentsCommand\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport type {StartDevServerCommandFlags} from '../../actions/start/startAction'\n\nconst helpText = `\nNotes\n  Changing the hostname or port number might require a new CORS-entry to be added.\n\nOptions\n  --port <port> TCP port to start server on. [default: 3333]\n  --host <host> The local network interface at which to listen. [default: \"127.0.0.1\"]\n\nExamples\n  sanity start --host=0.0.0.0\n  sanity start --port=1942\n`\n\nconst startCommand: CliCommandDefinition = {\n  name: 'start',\n  signature: '[--port <port>] [--host <host>]',\n  description: 'Starts a web server for the Sanity Studio',\n  action: async (\n    args: CliCommandArguments<StartDevServerCommandFlags>,\n    context: CliCommandContext\n  ) => {\n    const mod = await import('../../actions/start/startAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default startCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\n\nconst uninstallCommand: CliCommandDefinition = {\n  name: 'uninstall',\n  signature: '[plugin]',\n  helpText: '',\n  description: 'Removes a Sanity plugin from the current Sanity configuration',\n  hideFromHelp: true,\n  action: async (args, context) => {\n    await context.output.error('`sanity uninstall` is no longer supported - use npm/yarn')\n  },\n}\n\nexport default uninstallCommand\n","import type {CliCommandGroupDefinition} from '@sanity/cli'\n\nconst hookGroup: CliCommandGroupDefinition = {\n  name: 'hook',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interact with hooks in your project',\n}\n\nexport default hookGroup\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport open from 'open'\n\nconst createHookCommand: CliCommandDefinition = {\n  name: 'create',\n  group: 'hook',\n  signature: '',\n  helpText: '',\n  description: 'Create a new hook for the given dataset',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const client = apiClient()\n\n    const {projectId} = client.config()\n    if (!projectId) {\n      throw new Error('No project ID found')\n    }\n\n    const projectInfo = (await client.projects.getById(projectId)) || {}\n    const organizationId = projectInfo.organizationId || 'personal'\n    const manageUrl = `https://www.sanity.io/organizations/${organizationId}/project/${projectId}/api/webhooks/new`\n\n    output.print(`Opening ${manageUrl}`)\n    open(manageUrl)\n  },\n}\n\nexport default createHookCommand\n","import type {CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport type {Hook} from './types'\n\nconst deleteHookCommand: CliCommandDefinition = {\n  name: 'delete',\n  group: 'hook',\n  signature: '[NAME]',\n  helpText: '',\n  description: 'Delete a hook within your project',\n  action: async (args, context) => {\n    const {apiClient} = context\n    const [name] = args.argsWithoutOptions\n    const client = apiClient()\n\n    const hookId = await promptForHook(name, context)\n    try {\n      await client\n        .clone()\n        .config({apiVersion: '2021-10-04'})\n        .request({method: 'DELETE', uri: `/hooks/${hookId}`})\n    } catch (err) {\n      throw new Error(`Hook deletion failed:\\n${err.message}`)\n    }\n  },\n}\n\nasync function promptForHook(specified: string | undefined, context: CliCommandContext) {\n  const specifiedName = specified && specified.toLowerCase()\n  const {prompt, apiClient} = context\n  const client = apiClient()\n\n  const hooks = await client\n    .clone()\n    .config({apiVersion: '2021-10-04'})\n    .request<Hook[]>({uri: '/hooks', json: true})\n\n  if (specifiedName) {\n    const selected = hooks.filter((hook) => hook.name.toLowerCase() === specifiedName)[0]\n    if (!selected) {\n      throw new Error(`Hook with name \"${specified} not found\"`)\n    }\n\n    return selected.id\n  }\n\n  const choices = hooks.map((hook) => ({value: hook.id, name: hook.name}))\n  return prompt.single({\n    message: 'Select hook to delete',\n    type: 'list',\n    choices,\n  })\n}\n\nexport default deleteHookCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport type {Hook} from './types'\n\nconst listHooksCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'hook',\n  signature: '',\n  helpText: '',\n  description: 'List hooks for a given project',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const client = apiClient()\n\n    let hooks\n    try {\n      hooks = await client\n        .clone()\n        .config({apiVersion: '2021-10-04'})\n        .request<Hook[]>({uri: '/hooks'})\n    } catch (err) {\n      throw new Error(`Hook list retrieval failed:\\n${err.message}`)\n    }\n\n    hooks.forEach((hook) => {\n      output.print(`Name: ${hook.name}`)\n      output.print(`Dataset: ${hook.dataset}`)\n      output.print(`URL: ${hook.url}`)\n\n      if (hook.type === 'document') {\n        output.print(`HTTP method: ${hook.httpMethod}`)\n\n        if (hook.description) {\n          output.print(`Description: ${hook.description}`)\n        }\n      }\n\n      output.print('')\n    })\n  },\n}\n\nexport default listHooksCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport type {DeliveryAttempt} from './types'\n\nconst printHookAttemptCommand: CliCommandDefinition = {\n  name: 'attempt',\n  group: 'hook',\n  signature: 'ATTEMPT_ID',\n  helpText: '',\n  description: 'Print details of a given webhook delivery attempt',\n  action: async (args, context) => {\n    const {apiClient, output} = context\n    const [attemptId] = args.argsWithoutOptions\n    const client = apiClient()\n\n    let attempt\n    try {\n      attempt = await client.request<DeliveryAttempt>({uri: `/hooks/attempts/${attemptId}`})\n    } catch (err) {\n      throw new Error(`Hook attempt retrieval failed:\\n${err.message}`)\n    }\n\n    const {createdAt, resultCode, resultBody, failureReason, inProgress} = attempt\n\n    output.print(`Date: ${createdAt}`)\n    output.print(`Status: ${getStatus(attempt)}`)\n    output.print(`Status code: ${resultCode}`)\n\n    if (attempt.isFailure) {\n      output.print(`Failure: ${formatFailure(attempt)}`)\n    }\n\n    if (!inProgress && (!failureReason || failureReason === 'http')) {\n      const body = resultBody ? `\\n---\\n${resultBody}\\n---\\n` : '<empty>'\n      output.print(`Response body: ${body}`)\n    }\n  },\n}\n\nexport default printHookAttemptCommand\n\nexport function formatFailure(\n  attempt: DeliveryAttempt,\n  options: {includeHelp?: boolean} = {}\n): string {\n  const {includeHelp} = options\n  const {id, failureReason, resultCode} = attempt\n  const help = includeHelp ? `(run \\`sanity hook attempt ${id}\\` for details)` : ''\n  switch (failureReason) {\n    case 'http':\n      return `HTTP ${resultCode} ${help}`\n    case 'timeout':\n      return 'Request timed out'\n    case 'network':\n      return 'Network error'\n    case 'other':\n    default:\n  }\n\n  return 'Unknown error'\n}\n\nexport function getStatus(attempt: DeliveryAttempt): string {\n  if (attempt.isFailure) {\n    return 'Failed'\n  }\n\n  if (attempt.inProgress) {\n    return 'In progress'\n  }\n\n  return 'Delivered'\n}\n","import {inspect} from 'util'\nimport type {CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport {groupBy} from 'lodash'\nimport {formatFailure} from './printHookAttemptCommand'\nimport type {DeliveryAttempt, Hook, HookMessage} from './types'\n\ninterface ListHookFlags {\n  detailed?: boolean\n}\n\nconst listHookLogsCommand: CliCommandDefinition<ListHookFlags> = {\n  name: 'logs',\n  group: 'hook',\n  signature: '[NAME]',\n  helpText: '',\n  description: 'List latest log entries for a given hook',\n  action: async (args, context) => {\n    const {apiClient} = context\n    const flags = args.extOptions\n    const [name] = args.argsWithoutOptions\n    const client = apiClient()\n\n    const hookId = await promptForHook(name, context)\n    let messages\n    let attempts\n    try {\n      messages = await client.request<HookMessage[]>({uri: `/hooks/${hookId}/messages`})\n      attempts = await client.request<DeliveryAttempt[]>({uri: `/hooks/${hookId}/attempts`})\n    } catch (err) {\n      throw new Error(`Hook logs retrieval failed:\\n${err.message}`)\n    }\n\n    const groupedAttempts = groupBy(attempts, 'messageId')\n    const populated = messages.map((msg): HookMessage & {attempts: DeliveryAttempt[]} => ({\n      ...msg,\n      attempts: groupedAttempts[msg.id],\n    }))\n\n    const totalMessages = messages.length - 1\n    populated.forEach((message, i) => {\n      printMessage(message, context, {detailed: flags.detailed})\n      printSeparator(context, totalMessages === i)\n    })\n  },\n}\n\nexport default listHookLogsCommand\n\nasync function promptForHook(specified: string | undefined, context: CliCommandContext) {\n  const specifiedName = specified && specified.toLowerCase()\n  const {prompt, apiClient} = context\n  const client = apiClient()\n\n  const hooks = await client\n    .clone()\n    .config({apiVersion: '2021-10-04'})\n    .request<Hook[]>({uri: '/hooks', json: true})\n\n  if (specifiedName) {\n    const selected = hooks.filter((hook) => hook.name.toLowerCase() === specifiedName)[0]\n    if (!selected) {\n      throw new Error(`Hook with name \"${specified} not found\"`)\n    }\n\n    return selected.id\n  }\n\n  if (hooks.length === 0) {\n    throw new Error('No hooks currently registered')\n  }\n\n  if (hooks.length === 1) {\n    return hooks[0].id\n  }\n\n  const choices = hooks.map((hook) => ({value: hook.id, name: hook.name}))\n  return prompt.single({\n    message: 'Select hook to list logs for',\n    type: 'list',\n    choices,\n  })\n}\n\nfunction printSeparator(context: CliCommandContext, skip: boolean) {\n  if (!skip) {\n    context.output.print('---\\n')\n  }\n}\n\nfunction printMessage(\n  message: HookMessage & {attempts: DeliveryAttempt[]},\n  context: CliCommandContext,\n  options: {detailed?: boolean}\n) {\n  const {detailed} = options\n  const {output, chalk} = context\n\n  output.print(`Date: ${message.createdAt}`)\n  output.print(`Status: ${message.status}`)\n  output.print(`Result code: ${message.resultCode}`)\n\n  if (message.failureCount > 0) {\n    output.print(`Failures: ${message.failureCount}`)\n  }\n\n  if (detailed) {\n    output.print('Payload:')\n    output.print(inspect(JSON.parse(message.payload), {colors: true}))\n  }\n\n  if (detailed && message.attempts) {\n    output.print('Attempts:')\n    message.attempts.forEach((attempt) => {\n      const date = attempt.createdAt.replace(/\\.\\d+Z$/, 'Z')\n      const prefix = `  [${date}]`\n\n      if (attempt.inProgress) {\n        output.print(`${prefix} ${chalk.yellow('Pending')}`)\n      } else if (attempt.isFailure) {\n        const failure = formatFailure(attempt, {includeHelp: true})\n        output.print(`${prefix} ${chalk.yellow(`Failure: ${failure}`)}`)\n      } else {\n        output.print(`${prefix} Success: HTTP ${attempt.resultCode} (${attempt.duration}ms)`)\n      }\n    })\n  }\n\n  // Leave some empty space between messages\n  output.print('')\n}\n","import type {CliCommandDefinition} from '@sanity/cli'\n\nconst helpText = `\nOptions\n  --with-user-token Prime access token from CLI config into getCliClient()\n  --mock-browser-env Mocks a browser-like environment using jsdom\n\nExamples\n  # Run the script at some/script.js in Sanity context\n  sanity exec some/script.js\n\n  # Run the script at migrations/fullname.ts and configure \\`getCliClient()\\`\n  # from \\`sanity/cli\\`to include the current user's token\n  sanity exec migrations/fullname.ts --with-user-token\n\n  # Run the script at scripts/browserScript.js in a mock browser environment\n  sanity exec scripts/browserScript.js --mock-browser-env\n\n  # Pass arbitrary arguments to scripts by separating them with a \\`--\\`.\n  # Arguments are available in \\`process.argv\\` as they would in regular node scripts\n  # eg the following command would yield a \\`process.argv\\` of:\n  # ['/path/to/node', '/path/to/myscript.js', '--dry-run', 'positional-argument']\n  sanity exec --mock-browser-env myscript.js -- --dry-run positional-argument\n`\n\nexport const execCommand: CliCommandDefinition = {\n  name: 'exec',\n  signature: 'SCRIPT',\n  description: 'Runs a script in Sanity context',\n  helpText,\n  action: async (args, context) => {\n    const mod = await import('../../actions/exec/execScript')\n\n    return mod.default(args, context)\n  },\n}\n\nexport default execCommand\n","import type {CliCommandGroupDefinition} from '@sanity/cli'\n\nconst corsGroup: CliCommandGroupDefinition = {\n  name: 'cors',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interact with CORS-entries for your project',\n}\n\nexport default corsGroup\n","import url from 'url'\nimport logSymbols from 'log-symbols'\nimport oneline from 'oneline'\nimport type {CliCommandContext, CliPrompter} from '@sanity/cli'\n\nconst wildcardReplacement = 'a-wild-card-r3pl4c3m3n7-a'\nconst portReplacement = ':7777777'\n\ninterface AddCorsOriginFlags {\n  credentials?: boolean\n}\n\nexport async function addCorsOrigin(\n  givenOrigin: string,\n  flags: AddCorsOriginFlags,\n  context: CliCommandContext\n): Promise<boolean> {\n  const {apiClient, prompt, output} = context\n  const origin = await (givenOrigin\n    ? filterAndValidateOrigin(givenOrigin)\n    : promptForOrigin(prompt))\n\n  const hasWildcard = origin.includes('*')\n  if (hasWildcard && !(await promptForWildcardConfirmation(origin, context))) {\n    return false\n  }\n  const allowCredentials =\n    typeof flags.credentials === 'undefined'\n      ? await promptForCredentials(hasWildcard, context)\n      : Boolean(flags.credentials)\n\n  if (givenOrigin !== origin) {\n    output.print(`Normalized origin to ${origin}`)\n  }\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: true,\n  })\n\n  await client.request({\n    method: 'POST',\n    url: '/cors',\n    body: {origin, allowCredentials},\n    maxRedirects: 0,\n  })\n\n  return true\n}\n\nfunction promptForCredentials(hasWildcard: boolean, context: CliCommandContext): Promise<string> {\n  const {prompt, output, chalk} = context\n\n  output.print('')\n  if (hasWildcard) {\n    output.print(oneline`\n      ${chalk.yellow(`${logSymbols.warning} Warning:`)}\n      We ${chalk.red(chalk.underline('HIGHLY'))} recommend NOT allowing credentials\n      on origins containing wildcards. If you are logged in to a studio, people will\n      be able to send requests ${chalk.underline('on your behalf')} to read and modify\n      data, from any matching origin. Please tread carefully!\n    `)\n  } else {\n    output.print(oneline`\n      ${chalk.yellow(`${logSymbols.warning} Warning:`)}\n      Should this origin be allowed to send requests using authentication tokens or\n      session cookies? Be aware that any script on this origin will be able to send\n      requests ${chalk.underline('on your behalf')} to read and modify data if you\n      are logged in to a Sanity studio. If this origin hosts a studio, you will need\n      this, otherwise you should probably answer \"No\" (n).\n    `)\n  }\n\n  output.print('')\n\n  return prompt.single({\n    type: 'confirm',\n    message: oneline`\n      Allow credentials to be sent from this origin? Please read the warning above.\n    `,\n    default: false,\n  })\n}\n\nfunction promptForWildcardConfirmation(\n  origin: string,\n  context: CliCommandContext\n): Promise<boolean> {\n  const {prompt, output, chalk} = context\n\n  output.print('')\n  output.print(chalk.yellow(`${logSymbols.warning} Warning: Examples of allowed origins:`))\n\n  if (origin === '*') {\n    output.print('- http://www.some-malicious.site')\n    output.print('- https://not.what-you-were-expecting.com')\n    output.print('- https://high-traffic-site.com')\n    output.print('- http://192.168.1.1:8080')\n  } else {\n    output.print(`- ${origin.replace(/:\\*/, ':1234').replace(/\\*/g, 'foo')}`)\n    output.print(`- ${origin.replace(/:\\*/, ':3030').replace(/\\*/g, 'foo.bar')}`)\n  }\n\n  output.print('')\n\n  return prompt.single({\n    type: 'confirm',\n    message: oneline`\n      Using wildcards can be ${chalk.red('risky')}.\n      Are you ${chalk.underline('absolutely sure')} you want to allow this origin?`,\n    default: false,\n  })\n}\n\nfunction promptForOrigin(prompt: CliPrompter): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Origin (including protocol):',\n    filter: filterOrigin,\n    validate: (origin) => validateOrigin(origin, origin),\n  })\n}\n\nfunction filterOrigin(origin: string): string | null {\n  if (origin === '*' || origin === 'file:///*' || origin === 'null') {\n    return origin\n  }\n\n  try {\n    const example = origin\n      .replace(/([^:])\\*/g, `$1${wildcardReplacement}`)\n      .replace(/:\\*/, portReplacement)\n\n    const parsed = url.parse(example)\n    let host = parsed.host || ''\n    if (/^https?:$/.test(parsed.protocol || '')) {\n      host = host.replace(/:(80|443)$/, '')\n    }\n\n    host = host.replace(portReplacement, ':*').replace(new RegExp(wildcardReplacement, 'g'), '*')\n\n    return `${parsed.protocol}//${host}`\n  } catch (err) {\n    return null\n  }\n}\n\nfunction validateOrigin(origin: string | null, givenOrigin: string): true | string {\n  if (origin === '*' || origin === 'file:///*' || origin === 'null') {\n    return true\n  }\n\n  try {\n    url.parse(origin || (0 as any as string)) // Use 0 to trigger error for unset values\n    return true\n  } catch (err) {\n    // Fall-through to error\n  }\n\n  if (/^file:\\/\\//.test(givenOrigin)) {\n    return `Only a local file wildcard is currently allowed: file:///*`\n  }\n\n  return `Invalid origin \"${givenOrigin}\", must include protocol (https://some.host)`\n}\n\nfunction filterAndValidateOrigin(givenOrigin: string): string {\n  const origin = filterOrigin(givenOrigin)\n  const result = validateOrigin(origin, givenOrigin)\n  if (result !== true) {\n    throw new Error(result)\n  }\n\n  if (!origin) {\n    throw new Error('Invalid origin')\n  }\n\n  return origin\n}\n","import fs from 'fs'\nimport path from 'path'\nimport type {CliCommandDefinition} from '@sanity/cli'\nimport {addCorsOrigin} from '../../actions/cors/addCorsOrigin'\n\nconst helpText = `\nOptions\n  --credentials Allow credentials (token/cookie) to be sent from this origin\n  --no-credentials Disallow credentials (token/cookie) to be sent from this origin\n\nExamples\n  sanity cors add\n  sanity cors add http://localhost:3000 --no-credentials\n`\n\nconst addCorsOriginCommand: CliCommandDefinition = {\n  name: 'add',\n  group: 'cors',\n  signature: '[ORIGIN]',\n  helpText,\n  description: 'Allow a new origin to use your project API through CORS',\n  action: async (args, context) => {\n    const {output} = context\n    const [origin] = args.argsWithoutOptions\n\n    if (!origin) {\n      throw new Error('No origin specified, use `sanity cors add <origin-url>`')\n    }\n\n    const flags = args.extOptions\n\n    // eslint-disable-next-line no-sync\n    const isFile = fs.existsSync(path.join(process.cwd(), origin))\n    if (isFile) {\n      output.warn(`Origin \"${origin}?\" Remember to quote values (sanity cors add \"*\")`)\n    }\n\n    const success = await addCorsOrigin(origin, flags, context)\n    if (success) {\n      output.print('CORS origin added successfully')\n    }\n  },\n}\n\nexport default addCorsOriginCommand\n","import type {CliCommandDefinition} from '@sanity/cli'\nimport type {CorsOrigin} from './types'\n\nconst helpText = `\nExamples\n  sanity cors list\n`\n\nconst listCorsOriginsCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'cors',\n  signature: '',\n  helpText,\n  description: 'List all origins allowed to access the API for this project',\n  action: async (args, context) => {\n    const {output} = context\n    const {apiClient} = context\n    const client = apiClient({requireUser: true, requireProject: true})\n    const origins = await client.request<CorsOrigin[]>({url: '/cors'})\n    output.print(origins.map((origin) => origin.origin).join('\\n'))\n  },\n}\n\nexport default listCorsOriginsCommand\n","import type {CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport type {CorsOrigin} from './types'\n\nconst helpText = `\nExamples\n  sanity cors delete\n  sanity cors delete http://localhost:3000\n`\n\nconst deleteCorsOriginCommand: CliCommandDefinition = {\n  name: 'delete',\n  group: 'cors',\n  signature: '[ORIGIN]',\n  helpText,\n  description: 'Delete an existing CORS-origin from your project',\n  action: async (args, context) => {\n    const {output, apiClient} = context\n    const [origin] = args.argsWithoutOptions\n    const client = apiClient({requireUser: true, requireProject: true})\n    const originId = await promptForOrigin(origin, context)\n    try {\n      await client.request({method: 'DELETE', uri: `/cors/${originId}`})\n      output.print('Origin deleted')\n    } catch (err) {\n      throw new Error(`Origin deletion failed:\\n${err.message}`)\n    }\n  },\n}\n\nexport default deleteCorsOriginCommand\n\nasync function promptForOrigin(specified: string | undefined, context: CliCommandContext) {\n  const specifiedOrigin = specified && specified.toLowerCase()\n  const {prompt, apiClient} = context\n  const client = apiClient({requireUser: true, requireProject: true})\n\n  const origins = await client.request<CorsOrigin[]>({url: '/cors'})\n  if (specifiedOrigin) {\n    const selected = origins.filter((origin) => origin.origin.toLowerCase() === specifiedOrigin)[0]\n    if (!selected) {\n      throw new Error(`Origin \"${specified} not found\"`)\n    }\n\n    return selected.id\n  }\n\n  const choices = origins.map((origin) => ({value: origin.id, name: origin.origin}))\n  return prompt.single({\n    message: 'Select origin to delete',\n    type: 'list',\n    choices,\n  })\n}\n","import type {CliCommandGroupDefinition} from '@sanity/cli'\n\nconst graphqlGroup: CliCommandGroupDefinition = {\n  name: 'graphql',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Interact with GraphQL APIs',\n}\n\nexport default graphqlGroup\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\n\nconst helpText = `\nExamples\n  sanity graphql list\n`\n\nconst listGraphQLAPIsCommand: CliCommandDefinition = {\n  name: 'list',\n  signature: '',\n  group: 'graphql',\n  description: 'Lists all the GraphQL endpoints deployed for this project',\n  action: async (\n    args: CliCommandArguments<Record<string, unknown>>,\n    context: CliCommandContext\n  ) => {\n    const mod = await import('../../actions/graphql/listApisAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default listGraphQLAPIsCommand\n","import type {CliCommandContext, CliCommandDefinition} from '@sanity/cli'\n\nconst helpText = `\nOptions\n  --dry-run Validate defined APIs, exiting with an error on breaking changes\n  --force Deploy API without confirming breaking changes\n  --api <api-id> Only deploy API with this ID. Can be specified multiple times.\n\nExamples\n  # Deploy all defined GraphQL APIs\n  sanity graphql deploy\n\n  # Validate defined GraphQL APIs and check for breaking changes\n  sanity graphql deploy --dry-run\n\n  # Deploy only the GraphQL APIs with the IDs \"staging\" and \"ios\"\n  sanity graphql deploy --api staging --api ios\n`\n\nconst deployGraphQLAPICommand: CliCommandDefinition = {\n  name: 'deploy',\n  signature: '',\n  group: 'graphql',\n  description: 'Deploy a GraphQL API from the current Sanity schema',\n  action: async (args: {argv?: string[]}, context: CliCommandContext) => {\n    const mod = await import('../../actions/graphql/deployApiAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default deployGraphQLAPICommand\n","import type {CliCommandArguments, CliCommandContext, CliCommandDefinition} from '@sanity/cli'\nimport type {DeleteGraphQLApiFlags} from '../../actions/graphql/deleteApiAction'\n\nconst helpText = `\nOptions\n  --project <projectId> Project ID to delete GraphQL API for\n  --dataset <dataset> Delete GraphQL API for the given dataset\n  --tag <tag> Delete GraphQL API for the given tag (defaults to 'default')\n\nExamples\n  sanity graphql undeploy\n  sanity graphql undeploy --dataset staging\n  sanity graphql undeploy --dataset staging --tag next\n`\n\nconst deleteGraphQLAPICommand: CliCommandDefinition = {\n  name: 'undeploy',\n  group: 'graphql',\n  signature: '',\n  description: 'Remove a deployed GraphQL API',\n  action: async (args: CliCommandArguments<DeleteGraphQLApiFlags>, context: CliCommandContext) => {\n    const mod = await import('../../actions/graphql/deleteApiAction')\n\n    return mod.default(args, context)\n  },\n  helpText,\n}\n\nexport default deleteGraphQLAPICommand\n","import type {CliCommandGroupDefinition} from '@sanity/cli'\n\nexport const usersGroup: CliCommandGroupDefinition = {\n  name: 'users',\n  signature: '[COMMAND]',\n  isGroupRoot: true,\n  description: 'Manage users of your project',\n}\n\nexport default usersGroup\n","export function prettifyQuotaError(message: string) {\n  return (err: Error & {statusCode?: number}): Error & {statusCode?: number} => {\n    if (err.statusCode === 402) {\n      err.message = message\n      throw err\n    }\n\n    throw err\n  }\n}\n","import type {CliCommandDefinition, CliPrompter} from '@sanity/cli'\nimport {prettifyQuotaError} from '../../util/prettifyQuotaError'\nimport type {Role} from './types'\n\nconst helpText = `\nOptions\n  --role Role to invite the user as\n\nExamples\n  # Invite a new user to the project (prompt for details)\n  sanity users invite\n\n  # Send a new user invite to the email \"pippi@sanity.io\", prompt for role\n  sanity users invite pippi@sanity.io\n\n  # Send a new user invite to the email \"pippi@sanity.io\", as administrator\n  sanity users invite pippi@sanity.io --role administrator\n`\n\ninterface InviteFlags {\n  role?: string\n}\n\nconst inviteUserCommand: CliCommandDefinition<InviteFlags> = {\n  name: 'invite',\n  group: 'users',\n  signature: '[EMAIL]',\n  helpText,\n  description: 'Invite a new user to the project',\n  action: async (args, context) => {\n    const {apiClient, output, prompt} = context\n    const [selectedEmail] = args.argsWithoutOptions\n    const flags = args.extOptions\n\n    const client = apiClient().clone().config({useProjectHostname: false, apiVersion: '2021-06-07'})\n    const {projectId} = client.config()\n    const roles = (await client.request<Role[]>({uri: `/projects/${projectId}/roles`})).filter(\n      (role) => role.appliesToUsers\n    )\n    const email = selectedEmail || (await promptForEmail(prompt))\n    const selectedRole = flags.role || (await promptForRole(prompt, roles))\n    const role = roles.find(({name}) => name.toLowerCase() === selectedRole.toLowerCase())\n    if (!role) {\n      throw new Error(`Role name \"${selectedRole}\" not found`)\n    }\n\n    await client\n      .clone()\n      .request({\n        method: 'POST',\n        uri: `/invitations/project/${projectId}`,\n        body: {email, role: role.name},\n        useGlobalApi: true,\n        maxRedirects: 0,\n      })\n      .catch(\n        prettifyQuotaError(\n          'Project is already at user quota, add billing details to the project in order to allow overage charges.'\n        )\n      )\n\n    output.print(`Invitation sent to ${email}`)\n  },\n}\n\nexport default inviteUserCommand\n\nfunction promptForEmail(prompt: CliPrompter): Promise<string> {\n  return prompt.single({\n    type: 'input',\n    message: 'Email to invite:',\n    filter: (val) => val.trim(),\n    validate: (name) => {\n      if (!name || !name.includes('@')) {\n        return 'Invalid email'\n      }\n\n      return true\n    },\n  })\n}\n\nfunction promptForRole(prompt: CliPrompter, roles: Role[]): Promise<string> {\n  return prompt.single({\n    type: 'list',\n    message: 'Which role should the user have?',\n    choices: roles.map((role) => ({\n      value: role.name,\n      name: `${role.title} (${role.description})`,\n    })),\n  })\n}\n","import {sortBy, size} from 'lodash'\nimport type {CliCommandDefinition} from '@sanity/cli'\nimport type {Invite, PartialProjectResponse, User} from './types'\n\nconst sortFields = ['id', 'name', 'role', 'date']\n\nconst helpText = `\nOptions\n  --no-invitations Don't include pending invitations\n  --no-robots Don't include robots (token users)\n  --sort <field> Sort users by specified column: ${sortFields.join(', ')}\n  --order <asc/desc> Sort output ascending/descending\n\nExamples\n  # List all users of the project\n  sanity users list\n\n  # List all users of the project, but exclude pending invitations and robots\n  sanity users list --no-invitations --no-robots\n\n  # List all users, sorted by role\n  sanity users list --sort role\n`\n\nconst listUsersCommand: CliCommandDefinition = {\n  name: 'list',\n  group: 'users',\n  signature: '',\n  helpText,\n  description: 'List all users of the project',\n  action: async (args, context) => {\n    const {apiClient, output, chalk} = context\n    const {sort, order, robots, invitations} = {\n      sort: 'date',\n      order: 'asc',\n      robots: true,\n      invitations: true,\n      ...args.extOptions,\n    }\n\n    if (!sortFields.includes(sort)) {\n      throw new Error(`Can't sort by field \"${sort}\". Must be one of ${sortFields.join(', ')}`)\n    }\n\n    if (order !== 'asc' && order !== 'desc') {\n      throw new Error(`Unknown sort order \"${order}\", must be either \"asc\" or \"desc\"`)\n    }\n\n    const client = apiClient()\n    const globalClient = client.clone().config({useProjectHostname: false})\n    const {projectId} = client.config()\n\n    const useGlobalApi = true\n    const [pendingInvitations, project] = await Promise.all([\n      invitations\n        ? globalClient\n            .request<Invite[]>({uri: `/invitations/project/${projectId}`, useGlobalApi})\n            .then(getPendingInvitations)\n        : [],\n      globalClient.request<PartialProjectResponse>({uri: `/projects/${projectId}`, useGlobalApi}),\n    ])\n\n    const memberIds = project.members.map((member) => member.id)\n    const users = await globalClient\n      .request<User | User[]>({uri: `/users/${memberIds.join(',')}`, useGlobalApi})\n      .then((user) => (Array.isArray(user) ? user : [user]))\n\n    const projectMembers = project.members\n      .map((member) => ({\n        ...member,\n        ...getUserProps(users.find((candidate) => candidate.id === member.id)),\n      }))\n      .filter((member) => !member.isRobot || robots)\n\n    const members = [...projectMembers, ...pendingInvitations]\n\n    const ordered = sortBy(\n      members.map(({id, name, role, date}) => [id, name, role, date]),\n      [sortFields.indexOf(sort)]\n    )\n\n    const rows = order === 'asc' ? ordered : ordered.reverse()\n\n    const maxWidths = rows.reduce(\n      (max, row) => row.map((current, index) => Math.max(size(current), max[index])),\n      sortFields.map((str) => size(str))\n    )\n\n    const printRow = (row: string[]) => {\n      const isInvite = row[0] === '<pending>'\n      const textRow = row.map((col, i) => `${col}`.padEnd(maxWidths[i])).join('   ')\n      return isInvite ? chalk.dim(textRow) : textRow\n    }\n\n    output.print(chalk.cyan(printRow(sortFields)))\n    rows.forEach((row) => output.print(printRow(row)))\n  },\n}\n\nfunction getUserProps(user: User | undefined) {\n  const {displayName: name, createdAt: date} = user || {}\n  return {name: name || '', date: date || ''}\n}\n\nfunction getPendingInvitations(invitations: Invite[]) {\n  return invitations\n    .filter((invite) => !invite.isAccepted && !invite.isRevoked && !invite.acceptedByUserId)\n    .map((invite) => ({\n      id: '<pending>',\n      name: invite.email,\n      role: invite.role,\n      date: invite.createdAt,\n    }))\n}\n\nexport default listUsersCommand\n","import type {CliCommandDefinition, CliCommandGroupDefinition} from '@sanity/cli'\nimport buildCommand from './build/buildCommand'\nimport checkCommand from './check/checkCommand'\nimport configCheckCommand from './config/configCheckCommand'\nimport datasetGroup from './dataset/datasetGroup'\nimport deployCommand from './deploy/deployCommand'\nimport undeployCommand from './deploy/undeployCommand'\nimport listDatasetsCommand from './dataset/listDatasetsCommand'\nimport createDatasetCommand from './dataset/createDatasetCommand'\nimport datasetVisibilityCommand from './dataset/datasetVisibilityCommand'\nimport deleteDatasetCommand from './dataset/deleteDatasetCommand'\nimport exportDatasetCommand from './dataset/exportDatasetCommand'\nimport importDatasetCommand from './dataset/importDatasetCommand'\nimport copyDatasetCommand from './dataset/copyDatasetCommand'\nimport aliasDatasetCommand from './dataset/alias/aliasCommands'\nimport documentsGroup from './documents/documentsGroup'\nimport getDocumentsCommand from './documents/getDocumentsCommand'\nimport queryDocumentsCommand from './documents/queryDocumentsCommand'\nimport deleteDocumentsCommand from './documents/deleteDocumentsCommand'\nimport createDocumentsCommand from './documents/createDocumentsCommand'\nimport startCommand from './start/startCommand'\nimport uninstallCommand from './uninstall/uninstallCommand'\nimport hookGroup from './hook/hookGroup'\nimport createHookCommand from './hook/createHookCommand'\nimport deleteHookCommand from './hook/deleteHookCommand'\nimport listHooksCommand from './hook/listHooksCommand'\nimport printHookAttemptCommand from './hook/printHookAttemptCommand'\nimport listHookLogsCommand from './hook/listHookLogsCommand'\nimport execCommand from './exec/execCommand'\nimport corsGroup from './cors/corsGroup'\nimport addCorsOriginCommand from './cors/addCorsOriginCommand'\nimport listCorsOriginsCommand from './cors/listCorsOriginsCommand'\nimport deleteCorsOriginCommand from './cors/deleteCorsOriginCommand'\nimport graphqlGroup from './graphql/graphqlGroup'\nimport listGraphQLAPIsCommand from './graphql/listGraphQLAPIsCommand'\nimport deployGraphQLAPICommand from './graphql/deployGraphQLAPICommand'\nimport deleteGraphQLAPICommand from './graphql/deleteGraphQLAPICommand'\nimport usersGroup from './users/usersGroup'\nimport inviteUserCommand from './users/inviteUserCommand'\nimport listUsersCommand from './users/listUsersCommand'\n\nconst commands: (CliCommandDefinition | CliCommandGroupDefinition)[] = [\n  buildCommand,\n  checkCommand,\n  configCheckCommand,\n  datasetGroup,\n  deployCommand,\n  undeployCommand,\n  listDatasetsCommand,\n  createDatasetCommand,\n  datasetVisibilityCommand,\n  exportDatasetCommand,\n  importDatasetCommand,\n  deleteDatasetCommand,\n  copyDatasetCommand,\n  aliasDatasetCommand,\n  corsGroup,\n  listCorsOriginsCommand,\n  addCorsOriginCommand,\n  deleteCorsOriginCommand,\n  usersGroup,\n  inviteUserCommand,\n  listUsersCommand,\n  hookGroup,\n  listHooksCommand,\n  createHookCommand,\n  deleteHookCommand,\n  listHookLogsCommand,\n  printHookAttemptCommand,\n  documentsGroup,\n  getDocumentsCommand,\n  queryDocumentsCommand,\n  deleteDocumentsCommand,\n  createDocumentsCommand,\n  graphqlGroup,\n  listGraphQLAPIsCommand,\n  deployGraphQLAPICommand,\n  deleteGraphQLAPICommand,\n  startCommand,\n  uninstallCommand,\n  execCommand,\n]\n\n/**\n * @deprecated Not actually deprecated, but these are internals and should not be relied upon outside of the Sanity team\n * @internal\n */\nexport const cliProjectCommands = {\n  requiredCliVersionRange: '^3.0.0',\n  commands,\n}\n"],"names":["helpText","buildCommand","name","signature","description","action","args","context","overrides","mod","default","checkCommand","hideFromHelp","_args","output","print","Promise","resolve","configCheckCommand","error","datasetGroup","isGroupRoot","deployCommand","undeployCommand","MAX_DATASET_NAME_LENGTH","validateDatasetAliasName","datasetName","toLowerCase","length","test","ALIAS_PREFIX","listAliases","client","request","uri","createAlias","aliasName","modify","updateAlias","unlinkAlias","removeAlias","method","body","listAliasesHandler","apiClient","aliases","aliasClient.listAliases","map","set","join","listDatasetsCommand","group","datasets","list","debug","debugIt","validateDatasetName","promptForDatasetName","prompt","options","single","type","message","validate","err","allowedModes","createDatasetCommand","flags","extOptions","dataset","argsWithoutOptions","nameError","Error","projectFeatures","all","then","sets","ds","visibility","includes","canCreatePrivate","defaultAclMode","aclMode","promptForDatasetVisibility","create","mode","choices","value","datasetVisibilityCommand","edit","dsError","current","find","curr","deleteDatasetCommand","filter","input","trim","delete","chooseDatasetPrompt","allowCreation","hasProduction","datasetChoices","selected","Separator","newDatasetName","noop","parseFlags","rawFlags","types","split","assetConcurrency","parseInt","raw","Boolean","assets","drafts","compress","overwrite","exportDatasetCommand","chalk","workDir","targetDataset","targetDestination","destinationPath","path","absolutify","outputPath","getOutputPath","cyan","currentStep","spinner","start","onProgress","progress","step","succeed","update","text","total","Date","now","exportDataset","fail","prettyMs","destination","dstPath","isAbsolute","process","cwd","dstStats","fs","stat","catch","looksLikeFile","isFile","basename","indexOf","createPath","dirname","mkdir","recursive","finalPath","shouldOverwrite","yellow","str","toBoolIfSet","flag","allowAssetsInDifferentDataset","allowFailingAssets","replaceAssets","replace","missing","importDatasetCommand","fromInitCommand","operation","getMutationOperation","file","target","bold","determineTargetDataset","isUrl","inputStream","assetsBase","sourceIsFolder","getUrlStream","sourceFile","fileStats","isDirectory","createReadStream","importClient","clone","config","currentProgress","stepStart","spinInterval","percent","opts","lengthComputable","sameStep","getPercentage","clearInterval","prevStep","prevStepStart","timeSpent","secondsDecimalDigits","setInterval","endTask","success","numDocs","warnings","sanityImport","printWarnings","isNonRefConflict","response","statusCode","details","responseBody","shouldCreate","Math","floor","padStart","url","getIt","promise","onlyBody","stream","assetFails","warn","bind","forEach","warning","Observable","observer","progressSource","EventSource","stopped","onError","close","next","onChannelError","onMessage","event","data","JSON","parse","state","onComplete","removeEventListener","complete","addEventListener","followProgress","jobId","listenUrl","getUrl","subscribe","copyDatasetCommand","attach","sourceDataset","shouldSkipHistory","existingDatasets","sourceDatasetName","targetDatasetName","skipHistory","green","detach","red","promptForDatasetAliasName","createAliasHandler","alias","aliasOutputName","startsWith","substring","datasetErr","canCreateAlias","aliasClient.createAlias","deleteAliasHandler","fetchedAliases","linkedAlias","elem","aliasClient.removeAlias","unlinkAliasHandler","result","aliasClient.unlinkAlias","linkAliasHandler","da","force","aliasClient.updateAlias","aliasCommand","verb","oneline","documentsGroup","identity","inp","colorizeJson","formatters","punctuator","white","key","string","number","literal","whitespace","json","stringify","tokenize","token","i","arr","prevToken","formatter","getDocumentsCommand","pretty","docId","doc","getDocument","defaultApiVersion","queryDocumentsCommand","_a","_b","project","anonymous","apiVersion","parseCliFlags","cliConfig","query","requireDataset","requireProject","requireUser","api","projectId","baseClient","originalDataset","originalProjectId","docs","fetch","fallbackApiVersion","env","SANITY_CLI_QUERY_API_VERSION","yargs","hideBin","argv","slice","option","deleteDocumentsCommand","ids","transaction","reduce","trx","id","results","commit","deleted","res","notFound","pluralize","createDocumentsCommand","watch","useJson5","json5","contentPath","content","readFile","writeDocuments","getResultMessage","uuid","ext","tmpFile","os","tmpdir","defaultValue","_id","_type","writeFile","editor","getEditor","registerUnlinkOnSigInt","chokidar","on","readAndPerformCreatesFromFile","execa","bin","concat","stdio","sync","unlink","filePath","isEqual","writeResult","exit","documents","Array","isArray","mutations","index","validateDocument","isIdentifiedSanityDocument","createIfNotExists","createOrReplace","isSingle","isPlainObject","getErrorMessage","isSanityDocumentish","joiner","created","skipped","push","defaultEditor","platform","VISUAL","EDITOR","shift","startCommand","uninstallCommand","hookGroup","createHookCommand","projectInfo","projects","getById","organizationId","manageUrl","open","deleteHookCommand","hookId","promptForHook","specified","specifiedName","hooks","hook","listHooksCommand","httpMethod","printHookAttemptCommand","attemptId","attempt","createdAt","resultCode","resultBody","failureReason","inProgress","getStatus","isFailure","formatFailure","includeHelp","help","listHookLogsCommand","messages","attempts","groupedAttempts","groupBy","populated","msg","totalMessages","printMessage","detailed","printSeparator","skip","status","failureCount","inspect","payload","colors","date","prefix","failure","duration","execCommand","corsGroup","wildcardReplacement","portReplacement","addCorsOrigin","givenOrigin","origin","filterAndValidateOrigin","promptForOrigin","hasWildcard","promptForWildcardConfirmation","allowCredentials","credentials","promptForCredentials","maxRedirects","logSymbols","underline","filterOrigin","validateOrigin","example","parsed","host","protocol","RegExp","addCorsOriginCommand","existsSync","listCorsOriginsCommand","origins","deleteCorsOriginCommand","originId","specifiedOrigin","graphqlGroup","listGraphQLAPIsCommand","deployGraphQLAPICommand","deleteGraphQLAPICommand","usersGroup","prettifyQuotaError","inviteUserCommand","selectedEmail","useProjectHostname","roles","role","appliesToUsers","email","promptForEmail","selectedRole","promptForRole","useGlobalApi","val","title","sortFields","listUsersCommand","sort","order","robots","invitations","globalClient","pendingInvitations","getPendingInvitations","memberIds","members","member","users","user","projectMembers","getUserProps","candidate","isRobot","ordered","sortBy","rows","reverse","maxWidths","max","row","size","printRow","isInvite","textRow","col","padEnd","dim","displayName","invite","isAccepted","isRevoked","acceptedByUserId","commands","aliasDatasetCommand","cliProjectCommands","requiredCliVersionRange"],"mappings":"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"}