import _get from "lodash/get";
import { isArraySchemaType } from '@sanity/types';
export function getOption(type, optionName) {
  return _get(type.options, optionName);
}
const PSEUDO_OBJECTS = ['array', 'file', 'image', 'reference', 'slug'];
const HIDDEN_FIELDS = ['asset', 'crop', 'hotspot', '_ref', '_weak'];
const NO_LEVEL_LAYOUTS = ['tags'];
const NO_LEVEL_TYPES = ['slug'];
export function getFieldLevel(schemaType, currentLevel) {
  return isArraySchemaType(schemaType) ? getArrayFieldLevel(schemaType, currentLevel) : getObjectFieldLevel(schemaType, currentLevel);
}

function getObjectFieldLevel(schemaType, currentLevel) {
  var _fields$filter$length, _options$list$length, _options$list;

  const {
    type,
    options
  } = schemaType;
  const typeIfRelevant = asType(type, PSEUDO_OBJECTS);
  const fields = (schemaType === null || schemaType === void 0 ? void 0 : schemaType.jsonType) === 'object' ? schemaType.fields : undefined;
  const typeName = (typeIfRelevant === null || typeIfRelevant === void 0 ? void 0 : typeIfRelevant.name) || '';

  if (NO_LEVEL_TYPES.includes(typeName)) {
    return 0;
  }

  const isPseudoObject = PSEUDO_OBJECTS.includes(typeName);
  const hasVisibleFields = ((_fields$filter$length = fields === null || fields === void 0 ? void 0 : fields.filter(f => !HIDDEN_FIELDS.includes(f.name)).length) !== null && _fields$filter$length !== void 0 ? _fields$filter$length : 0) > 0;
  const hasListOptions = ((_options$list$length = options === null || options === void 0 ? void 0 : (_options$list = options.list) === null || _options$list === void 0 ? void 0 : _options$list.length) !== null && _options$list$length !== void 0 ? _options$list$length : 0) > 0;

  if (hasVisibleFields || hasListOptions || !isPseudoObject) {
    return currentLevel;
  }

  return 0;
}

function getArrayFieldLevel(schemaType, currentLevel) {
  var _ref;

  const {
    options
  } = schemaType;
  const hasListOptions = ((_ref = (options === null || options === void 0 ? void 0 : options.list) || []) === null || _ref === void 0 ? void 0 : _ref.length) > 0;
  const isNoLevelLayout = NO_LEVEL_LAYOUTS.includes((options === null || options === void 0 ? void 0 : options.layout) || '');

  if (hasListOptions && !isNoLevelLayout) {
    return currentLevel;
  }

  return 0;
}

function asType(schemaType, asOneOfTypes) {
  if (schemaType !== null && schemaType !== void 0 && schemaType.name && asOneOfTypes.includes(schemaType === null || schemaType === void 0 ? void 0 : schemaType.name)) {
    return schemaType;
  }

  if (!schemaType) {
    return undefined;
  }

  return asType(schemaType.type, asOneOfTypes);
}