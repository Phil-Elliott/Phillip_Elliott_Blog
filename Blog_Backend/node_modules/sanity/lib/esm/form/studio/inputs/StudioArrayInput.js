function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useCallback } from 'react';
import { DEFAULT_STUDIO_CLIENT_OPTIONS } from '../../../studioClient';
import { resolveUploader as defaultResolveUploader } from '../uploads/resolveUploader';
import { ArrayInput } from '../../inputs/arrays/ArrayOfObjectsInput';
import { ArrayOfPrimitivesInput } from '../../inputs/arrays/ArrayOfPrimitivesInput';
import * as is from '../../utils/is';
import { useFormBuilder } from '../../useFormBuilder';
import { useClient } from '../../../hooks';
import { useResolveInitialValueForType } from '../../../datastores';
export function StudioArrayInput(props) {
  const formBuilder = useFormBuilder(); // todo abstract the client away

  const client = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS);
  const supportsImageUploads = formBuilder.__internal.image.directUploads;
  const supportsFileUploads = formBuilder.__internal.file.directUploads;
  const resolveUploader = useCallback((type, file) => {
    if (is.type('image', type) && !supportsImageUploads) {
      return null;
    }

    if (is.type('file', type) && !supportsFileUploads) {
      return null;
    }

    return defaultResolveUploader(type, file);
  }, [supportsFileUploads, supportsImageUploads]);
  const resolveInitialValue = useResolveInitialValueForType();
  return /*#__PURE__*/React.createElement(ArrayInput, _extends({}, props, {
    resolveInitialValue: resolveInitialValue,
    resolveUploader: resolveUploader,
    client: client
  }));
}
export const StudioArrayOfPrimitivesInput = /*#__PURE__*/forwardRef(function StudioArrayOfPrimitivesInput(props, ref) {
  const formBuilder = useFormBuilder();
  return /*#__PURE__*/React.createElement(ArrayOfPrimitivesInput, _extends({}, props, {
    ArrayFunctionsImpl: formBuilder.__internal.components.ArrayFunctions,
    ref: ref
  }));
});