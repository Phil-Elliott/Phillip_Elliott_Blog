var _templateObject;

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import { TextArea } from '@sanity/ui';
import React, { useCallback } from 'react';
import styled, { css } from 'styled-components';
import { set } from '../../../../patch';
const DebugTextArea = styled(TextArea)(_ref => {
  let {
    theme
  } = _ref;
  return css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    font-family: ", ";\n  "])), theme.sanity.fonts.code.family);
});

function DebugInput(props) {
  const {
    onChange,
    readOnly,
    elementProps
  } = props;
  const handleChange = useCallback(() => {
    onChange(set({}));
  }, [onChange]);
  return /*#__PURE__*/React.createElement(DebugTextArea, _extends({}, elementProps, {
    onChange: handleChange,
    padding: 3,
    radius: 1,
    readOnly: readOnly,
    rows: 100,
    value: JSON.stringify(props.value, null, 2)
  }));
} // export const resolveInputComponent: FormInputComponentResolver = () => {
//   return DebugInput
// }
// export const resolvePreviewComponent = () => {
//   return function PreviewAny() {
//     return <div>preview</div>
//   }
// }