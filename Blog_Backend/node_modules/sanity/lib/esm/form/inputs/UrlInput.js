function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { TextInput } from '@sanity/ui';
import React from 'react';
import { getValidationRule } from '../utils/getValidationRule';
// @todo Rename to `URLInput`?
export function UrlInput(props) {
  var _uriRule$constraint, _uriRule$constraint$o;

  const {
    schemaType,
    validationError,
    elementProps
  } = props;
  const uriRule = getValidationRule(schemaType, 'uri');
  const inputType = uriRule !== null && uriRule !== void 0 && (_uriRule$constraint = uriRule.constraint) !== null && _uriRule$constraint !== void 0 && (_uriRule$constraint$o = _uriRule$constraint.options) !== null && _uriRule$constraint$o !== void 0 && _uriRule$constraint$o.allowRelative ? 'text' : 'url';
  return /*#__PURE__*/React.createElement(TextInput, _extends({
    type: inputType,
    inputMode: "url",
    customValidity: validationError
  }, elementProps));
}