function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback, useMemo } from 'react';
import { set, unset } from '../patch';
import { TagInput } from '../components/tagInput';
export function TagsArrayInput(props) {
  const {
    onChange,
    readOnly,
    value = [],
    elementProps
  } = props;
  const tagInputValue = useMemo(() => value === null || value === void 0 ? void 0 : value.map(v => ({
    value: v
  })), [value]);
  const handleChange = useCallback(nextValue => {
    onChange(nextValue.length === 0 ? unset() : set(nextValue.map(v => v.value)));
  }, [onChange]);
  return /*#__PURE__*/React.createElement(TagInput, _extends({
    onChange: handleChange,
    readOnly: readOnly,
    value: tagInputValue
  }, elementProps));
}