{"version":3,"file":"_deployAction-3f20e9fc.js","sources":["../src/cli/actions/deploy/deployAction.ts"],"sourcesContent":["import path from 'path'\nimport zlib from 'zlib'\nimport {promises as fs} from 'fs'\nimport tar from 'tar-fs'\nimport type {SanityClient} from '@sanity/client'\nimport type {CliCommandArguments, CliCommandContext} from '@sanity/cli'\nimport buildSanityStudio, {BuildSanityStudioCommandFlags} from '../build/buildAction'\n\nexport interface DeployStudioActionFlags extends BuildSanityStudioCommandFlags {\n  build?: boolean\n}\n\nexport default async function deployStudio(\n  args: CliCommandArguments<DeployStudioActionFlags>,\n  context: CliCommandContext\n): Promise<void> {\n  const {apiClient, workDir, chalk, output, prompt} = context\n  const flags = {build: true, ...args.extOptions}\n  const destFolder = args.argsWithoutOptions[0]\n  const sourceDir = path.resolve(process.cwd(), destFolder || path.join(workDir, 'dist'))\n\n  if (destFolder === 'graphql') {\n    throw new Error('Did you mean `sanity graphql deploy`?')\n  }\n\n  if (destFolder) {\n    let relativeOutput = path.relative(process.cwd(), sourceDir)\n    if (relativeOutput[0] !== '.') {\n      relativeOutput = `./${relativeOutput}`\n    }\n\n    const isEmpty = await dirIsEmptyOrNonExistent(sourceDir)\n    const shouldProceed =\n      isEmpty ||\n      (await prompt.single({\n        type: 'confirm',\n        message: `\"${relativeOutput}\" is not empty, do you want to proceed?`,\n        default: false,\n      }))\n\n    if (!shouldProceed) {\n      output.print('Cancelled.')\n      return\n    }\n\n    output.print(`Building to ${relativeOutput}\\n`)\n  }\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: true,\n  })\n\n  // Check that the project has a studio hostname\n  let spinner = output.spinner('Checking project info').start()\n  const project = await client.projects.getById(client.config().projectId as string)\n  let studioHostname = project && project.studioHost\n  spinner.succeed()\n\n  if (!studioHostname) {\n    output.print('Your project has not been assigned a studio hostname.')\n    output.print('To deploy your Sanity Studio to our hosted Sanity.Studio service,')\n    output.print('you will need one. Please enter the part you want to use.')\n\n    studioHostname = await prompt.single({\n      type: 'input',\n      filter: (inp: string) => inp.replace(/\\.sanity\\.studio$/i, ''),\n      message: 'Studio hostname (<value>.sanity.studio):',\n      validate: (name: string) => validateHostname(name, client),\n    })\n  }\n\n  // Always build the project, unless --no-build is passed\n  const shouldBuild = flags.build\n  if (shouldBuild) {\n    const buildArgs = [destFolder].filter(Boolean)\n    const {didCompile} = await buildSanityStudio(\n      {...args, extOptions: flags, argsWithoutOptions: buildArgs},\n      context,\n      {basePath: '/'}\n    )\n\n    if (!didCompile) {\n      return\n    }\n  }\n\n  // Ensure that the directory exists, is a directory and seems to have valid content\n  spinner = output.spinner('Verifying local content').start()\n  try {\n    await checkDir(sourceDir)\n    spinner.succeed()\n  } catch (err) {\n    spinner.fail()\n    throw err\n  }\n\n  // Now create a tarball of the given directory\n  const parentDir = path.dirname(sourceDir)\n  const base = path.basename(sourceDir)\n  const tarball = tar.pack(parentDir, {entries: [base]}).pipe(zlib.createGzip())\n\n  spinner = output.spinner('Deploying to Sanity.Studio').start()\n  try {\n    const response = await client.request({\n      method: 'POST',\n      url: '/deploy',\n      body: tarball,\n      maxRedirects: 0,\n    })\n\n    spinner.succeed()\n\n    // And let the user know we're done\n    output.print(`\\nSuccess! Studio deployed to ${chalk.cyan(response.location)}`)\n  } catch (err) {\n    spinner.fail()\n    throw err\n  }\n}\n\nasync function dirIsEmptyOrNonExistent(sourceDir: string): Promise<boolean> {\n  try {\n    const stats = await fs.stat(sourceDir)\n    if (!stats.isDirectory()) {\n      throw new Error(`Directory ${sourceDir} is not a directory`)\n    }\n  } catch (err) {\n    if (err.code === 'ENOENT') {\n      return true\n    }\n\n    throw err\n  }\n\n  const content = await fs.readdir(sourceDir)\n  return content.length === 0\n}\n\nasync function checkDir(sourceDir: string) {\n  try {\n    const stats = await fs.stat(sourceDir)\n    if (!stats.isDirectory()) {\n      throw new Error(`Directory ${sourceDir} is not a directory`)\n    }\n  } catch (err) {\n    const error = err.code === 'ENOENT' ? new Error(`Directory \"${sourceDir}\" does not exist`) : err\n\n    throw error\n  }\n\n  try {\n    await fs.stat(path.join(sourceDir, 'index.html'))\n  } catch (err) {\n    const error =\n      err.code === 'ENOENT'\n        ? new Error(\n            [\n              `\"${sourceDir}/index.html\" does not exist -`,\n              '[SOURCE_DIR] must be a directory containing',\n              'a Sanity studio built using \"sanity build\"',\n            ].join(' ')\n          )\n        : err\n\n    throw error\n  }\n}\n\nasync function validateHostname(value: string, client: SanityClient): Promise<boolean | string> {\n  const projectId = client.config().projectId\n  const uri = `/projects/${projectId}`\n  const studioHost = value || ''\n\n  // Check that it matches allowed character range\n  if (!/^[a-z0-9_-]+$/i.test(studioHost)) {\n    return 'Hostname can contain only A-Z, 0-9, _ and -'\n  }\n\n  // Check that the hostname is not already taken\n  try {\n    await client.request({uri, method: 'PATCH', body: {studioHost}})\n    return true\n  } catch (error) {\n    if (error?.response?.body?.message) {\n      return error.response.body.message\n    }\n    throw error\n  }\n}\n"],"names":["deployStudio","args","context","apiClient","workDir","chalk","output","prompt","flags","build","extOptions","destFolder","argsWithoutOptions","sourceDir","path","resolve","process","cwd","join","Error","relativeOutput","relative","isEmpty","dirIsEmptyOrNonExistent","shouldProceed","single","type","message","default","print","client","requireUser","requireProject","spinner","start","project","projects","getById","config","projectId","studioHostname","studioHost","succeed","filter","inp","replace","validate","name","validateHostname","shouldBuild","buildArgs","Boolean","didCompile","buildSanityStudio","basePath","checkDir","err","fail","parentDir","dirname","base","basename","tarball","tar","pack","entries","pipe","zlib","createGzip","response","request","method","url","body","maxRedirects","cyan","location","stats","fs","stat","isDirectory","code","content","readdir","length","error","value","_a","_b","uri","test"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAY8B,eAAAA,YAAA,CAC5BC,IAD4B,EAE5BC,OAF4B,EAGb;EACf,MAAM;IAACC,SAAD;IAAYC,OAAZ;IAAqBC,KAArB;IAA4BC,MAA5B;IAAoCC;EAApC,IAA8CL,OAApD;;EACA,MAAMM;IAASC,KAAA,EAAO;KAASR,KAAKS,WAApC;;EACM,MAAAC,UAAA,GAAaV,KAAKW,kBAAL,CAAwB,CAAxB,CAAb;EACA,MAAAC,SAAA,GAAYC,IAAK,CAAAC,OAAL,CAAaC,OAAQ,CAAAC,GAAR,EAAb,EAA4BN,UAAA,IAAcG,IAAK,CAAAI,IAAL,CAAUd,OAAV,EAAmB,MAAnB,CAA1C,CAAZ;;EAEN,IAAIO,eAAe,SAAnB,EAA8B;IACtB,MAAA,IAAIQ,KAAJ,CAAU,uCAAV,CAAA;EACR;;EAEA,IAAIR,UAAJ,EAAgB;IACd,IAAIS,iBAAiBN,IAAK,CAAAO,QAAL,CAAcL,OAAQ,CAAAC,GAAR,EAAd,EAA6BJ,SAA7B,CAArB;;IACI,IAAAO,cAAA,CAAe,CAAf,CAAA,KAAsB,GAAtB,EAA2B;MAC7BA,cAAA,eAAsBA,cAAtB,CAAA;IACF;;IAEM,MAAAE,OAAA,GAAU,MAAMC,uBAAA,CAAwBV,SAAxB,CAAhB;IACN,MAAMW,aACJ,GAAAF,OAAA,KACC,MAAMf,MAAA,CAAOkB,MAAP,CAAc;MACnBC,IAAM,EAAA,SADa;MAEnBC,qBAAaP,2DAFM;MAGnBQ,OAAS,EAAA;IAHU,CAAd,CADP,CADF;;IAQA,IAAI,CAACJ,aAAL,EAAoB;MAClBlB,MAAA,CAAOuB,KAAP,CAAa,YAAb;MACA;IACF;;IAEAvB,MAAA,CAAOuB,KAAP,uBAA4BT,cAA5B;EACF;;EAEA,MAAMU,SAAS3B,SAAU,CAAA;IACvB4B,WAAa,EAAA,IADU;IAEvBC,cAAgB,EAAA;EAFO,CAAA,CAAzB;EAMA,IAAIC,OAAU,GAAA3B,MAAA,CAAO2B,OAAP,CAAe,uBAAf,EAAwCC,KAAxC,EAAd;EACM,MAAAC,OAAA,GAAU,MAAML,MAAO,CAAAM,QAAP,CAAgBC,OAAhB,CAAwBP,MAAO,CAAAQ,MAAP,GAAgBC,SAAxC,CAAhB;EACF,IAAAC,cAAA,GAAiBL,WAAWA,OAAQ,CAAAM,UAApC;EACJR,OAAA,CAAQS,OAAR;;EAEA,IAAI,CAACF,cAAL,EAAqB;IACnBlC,MAAA,CAAOuB,KAAP,CAAa,uDAAb;IACAvB,MAAA,CAAOuB,KAAP,CAAa,mEAAb;IACAvB,MAAA,CAAOuB,KAAP,CAAa,2DAAb;IAEiBW,cAAA,GAAA,MAAMjC,OAAOkB,MAAP,CAAc;MACnCC,IAAM,EAAA,OAD6B;MAEnCiB,QAASC,GAAD,IAAiBA,GAAI,CAAAC,OAAJ,CAAY,oBAAZ,EAAkC,EAAlC,CAFU;MAGnClB,OAAS,EAAA,0CAH0B;MAInCmB,QAAU,EAACC,IAAD,IAAkBC,gBAAA,CAAiBD,IAAjB,EAAuBjB,MAAvB;IAJO,CAAd,CAAN;EAMnB;;EAGA,MAAMmB,cAAczC,KAAM,CAAAC,KAA1B;;EACA,IAAIwC,WAAJ,EAAiB;IACf,MAAMC,SAAY,GAAA,CAACvC,UAAD,EAAagC,MAAb,CAAoBQ,OAApB,CAAlB;IACM,MAAA;MAACC;IAAD,IAAe,MAAMC,iBAAA,iCACrBpD,IADqB;MACfS,UAAY,EAAAF,KADG;MACII,oBAAoBsC;IADxB,IAEzBhD,OAFyB,EAGzB;MAACoD,UAAU;IAAX,CAHyB,CAArB;;IAMN,IAAI,CAACF,UAAL,EAAiB;MACf;IACF;EACF;;EAGAnB,OAAA,GAAU3B,MAAO,CAAA2B,OAAP,CAAe,yBAAf,EAA0CC,KAA1C,EAAV;;EACI,IAAA;IACF,MAAMqB,SAAS1C,UAAf;IACAoB,OAAA,CAAQS,OAAR;GAFE,QAGKc,KAAP;IACAvB,OAAA,CAAQwB,IAAR;IACM,MAAAD,GAAA;EACR;;EAGM,MAAAE,SAAA,GAAY5C,IAAK,CAAA6C,OAAL,CAAa9C,SAAb,CAAZ;EACA,MAAA+C,IAAA,GAAO9C,IAAK,CAAA+C,QAAL,CAAchD,SAAd,CAAP;EACN,MAAMiD,OAAU,GAAAC,GAAA,CAAIC,IAAJ,CAASN,SAAT,EAAoB;IAACO,OAAS,EAAA,CAACL,IAAD;EAAV,CAApB,EAAuCM,IAAvC,CAA4CC,IAAA,CAAKC,UAAL,EAA5C,CAAhB;EAEAnC,OAAA,GAAU3B,MAAO,CAAA2B,OAAP,CAAe,4BAAf,EAA6CC,KAA7C,EAAV;;EACI,IAAA;IACI,MAAAmC,QAAA,GAAW,MAAMvC,MAAA,CAAOwC,OAAP,CAAe;MACpCC,MAAQ,EAAA,MAD4B;MAEpCC,GAAK,EAAA,SAF+B;MAGpCC,IAAM,EAAAX,OAH8B;MAIpCY,YAAc,EAAA;IAJsB,CAAf,CAAjB;IAONzC,OAAA,CAAQS,OAAR;IAGApC,MAAA,CAAOuB,KAAP,yCAA8CxB,KAAM,CAAAsE,IAAN,CAAWN,QAAS,CAAAO,QAApB,CAA9C;GAXE,QAYKpB,KAAP;IACAvB,OAAA,CAAQwB,IAAR;IACM,MAAAD,GAAA;EACR;AACF;;AAEA,eAAejC,uBAAf,CAAuCV,SAAvC,EAA4E;EACtE,IAAA;IACF,MAAMgE,KAAQ,GAAA,MAAMC,QAAG,CAAAC,IAAHD,CAAQjE,SAARiE,CAApB;;IACI,IAAA,CAACD,KAAM,CAAAG,WAAN,EAAD,EAAsB;MAClB,MAAA,IAAI7D,KAAJ,qBAAuBN,SAAvB,yBAAA;IACR;GAJE,QAKK2C,KAAP;IACI,IAAAA,GAAA,CAAIyB,IAAJ,KAAa,QAAb,EAAuB;MAClB,OAAA,IAAA;IACT;;IAEM,MAAAzB,GAAA;EACR;;EAEA,MAAM0B,OAAU,GAAA,MAAMJ,QAAG,CAAAK,OAAHL,CAAWjE,SAAXiE,CAAtB;EACA,OAAOI,QAAQE,MAAR,KAAmB,CAA1B;AACF;;AAEA,eAAe7B,QAAf,CAAwB1C,SAAxB,EAA2C;EACrC,IAAA;IACF,MAAMgE,KAAQ,GAAA,MAAMC,QAAG,CAAAC,IAAHD,CAAQjE,SAARiE,CAApB;;IACI,IAAA,CAACD,KAAM,CAAAG,WAAN,EAAD,EAAsB;MAClB,MAAA,IAAI7D,KAAJ,qBAAuBN,SAAvB,yBAAA;IACR;GAJE,QAKK2C,KAAP;IACM,MAAA6B,KAAA,GAAQ7B,IAAIyB,IAAJ,KAAa,QAAb,GAAwB,IAAI9D,KAAJ,uBAAwBN,SAAxB,uBAAxB,GAA+E2C,GAAvF;IAEA,MAAA6B,KAAA;EACR;;EAEI,IAAA;IACF,MAAMP,SAAGC,IAAHD,CAAQhE,IAAA,CAAKI,IAAL,CAAUL,SAAV,EAAqB,YAArB,CAARiE,CAAN;GADE,QAEKtB,KAAP;IACA,MAAM6B,KACJ,GAAA7B,GAAA,CAAIyB,IAAJ,KAAa,QAAb,GACI,IAAI9D,KAAJ,CACE,aACMN,SADN,qCAEE,6CAFF,EAGE,4CAHF,EAIEK,IAJF,CAIO,GAJP,CADF,CADJ,GAQIsC,GATN;IAWM,MAAA6B,KAAA;EACR;AACF;;AAEA,eAAerC,gBAAf,CAAgCsC,KAAhC,EAA+CxD,MAA/C,EAAgG;EAzKhG,IAAAyD,EAAA,EAAAC,EAAA;;EA0KQ,MAAAjD,SAAA,GAAYT,MAAO,CAAAQ,MAAP,GAAgBC,SAA5B;EACN,MAAMkD,0BAAmBlD,UAAzB;EACA,MAAME,aAAa6C,KAAS,IAAA,EAA5B;;EAGA,IAAI,CAAC,iBAAiBI,IAAjB,CAAsBjD,UAAtB,CAAL,EAAwC;IAC/B,OAAA,6CAAA;EACT;;EAGI,IAAA;IACI,MAAAX,MAAA,CAAOwC,OAAP,CAAe;MAACmB,GAAD;MAAMlB,MAAA,EAAQ,OAAd;MAAuBE,IAAM,EAAA;QAAChC;MAAD;IAA7B,CAAf,CAAA;IACC,OAAA,IAAA;GAFL,QAGK4C,OAAP;IACA,IAAA,CAAIG,EAAO,GAAA,CAAAD,EAAA,GAAAF,KAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,KAAA,CAAAhB,QAAA,KAAP,IAAO,GAAU,KAAA,CAAV,GAAUkB,EAAA,CAAAd,IAArB,KAAI,IAAJ,SAAA,MAA2B9C,OAA3B,EAAoC;MAC3B,OAAA0D,KAAA,CAAMhB,QAAN,CAAeI,IAAf,CAAoB9C,OAApB;IACT;;IACM,MAAA0D,KAAA;EACR;AACF;;"}