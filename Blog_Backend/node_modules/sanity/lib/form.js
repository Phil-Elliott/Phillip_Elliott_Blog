import { cX as ReviewChangesContext, cY as encodePath, cZ as decodePath, c_ as ArrayOfObjectsItem, c$ as MemberItemError } from './_prepareConfig-56d87958.js';
export { dy as ArrayInput, d0 as ArrayOfObjectsInput, c_ as ArrayOfObjectsItem, db as ArrayOfPrimitivesItem, d2 as BlockEditor, dz as FormField, dA as FormFieldHeaderText, dB as FormFieldSet, dC as FormFieldStatus, dD as FormFieldValidationStatus, d3 as FormInput, d8 as MemberField, d9 as MemberFieldError, da as MemberFieldSet, c$ as MemberItemError, dx as ObjectInput, dc as ObjectMembers, P as PatchEvent, d2 as PortableTextInput, d5 as ReferenceInputOptionsProvider, cX as ReviewChangesContext, d6 as StudioFormBuilder, d7 as StudioFormBuilderProvider, bz as Timeline, bx as TimelineController, dd as createPatchChannel, dj as dec, cZ as decodePath, cY as encodePath, dw as fromMutationPatches, di as inc, df as insert, dr as isArrayOfObjectsInputProps, ds as isArrayOfPrimitivesInputProps, dq as isBooleanInputProps, dp as isNumberInputProps, dm as isObjectInputProps, dl as isObjectItemProps, dn as isStringInputProps, dk as prefixPath, dg as set, de as setIfMissing, dv as toMutationPatches, dh as unset, d1 as useFormBuilder, dt as useFormState, du as useFormValue, d4 as useReferenceInputOptions } from './_prepareConfig-56d87958.js';
import 'rxjs';
import 'rxjs/operators';
import React, { useContext } from 'react';
import { jsx, Fragment } from 'react/jsx-runtime';
import '@sanity/icons';
import 'lodash';
import '@sanity/ui';
import 'history';
import '@sanity/bifur-client';
import 'react-is';
import '@sanity/schema';
import '@sanity/schema/_internal';
import '@sanity/validation';
import 'react-rx';
import 'shallow-equals';
import '@sanity/types';
import '@sanity/image-url';
import '@sanity/util/paths';
import 'react-fast-compare';
import '@sanity/util/content';
import '@sanity/util/legacyDateFormat';
import 'date-fns';
import 'speakingurl';
import '@sanity/uuid';
import '@sanity/asset-utils';
import 'exif-component';
import '@reach/auto-id';
import 'react-dom';
import 'pluralize-esm';
import '@sanity/mutator';
import 'json-reduce';
import 'rxjs-exhaustmap-with-trailing';
import 'dataloader';
import 'raf';
import 'groq-js';
import 'rxjs-etc/operators';
import '@sanity/client';
import '@juggle/resize-observer';
import 'nano-pubsub';
import 'styled-components';
import 'observable-callback';
import 'debug';
import 'react-refractor';
import 'refractor/lang/bash';
import 'refractor/lang/javascript';
import 'refractor/lang/json';
import 'refractor/lang/jsx';
import 'refractor/lang/typescript';
import '@sanity/color';
import 'use-hot-module-reload';
import 'classnames';
import 'use-device-pixel-ratio';
import 'mendoza';
import '@sanity/diff';
import 'nanoid';
import 'color2k';
import 'react-sortable-hoc';
import '@sanity/portable-text-editor';
import 'scroll-into-view-if-needed';
import 'get-random-values-esm';
import '@sanity/block-tools';
import 'diff-match-patch';
import 'date-fns/isValid';
import 'react-focus-lock';
import 'date-fns/formatDistanceToNow';
import '@sanity/generate-help-url';
import 'is-hotkey';
import 'react-copy-to-clipboard';
import 'sanity-diff-patch';
import '@rexxars/react-json-inspector';
import 'hashlru';
import 'framer-motion';
import 'react-props-stream';
import '@sanity/logos';
import '@portabletext/react';

function useReviewChanges() {
  const reviewChanges = useContext(ReviewChangesContext);

  if (!reviewChanges) {
    throw new Error("Review changes: missing context value");
  }

  return reviewChanges;
}

function getHash() {
  return decodeURIComponent(document.location.hash.substring(1));
}

function getPathFromHash() {
  const hash = getHash();
  return hash ? decodePath(hash) : [];
}

class HashFocusManager extends React.Component {
  constructor() {
    super(...arguments);
    this.state = {
      focusPath: getPathFromHash()
    };

    this.handleHashChange = () => {
      this.setState({
        focusPath: getPathFromHash()
      });
    };

    this.handleFocus = focusPath => {
      document.location.hash = encodePath(focusPath);
    };

    this.handleBlur = () => {};
  }

  componentDidMount() {
    window.addEventListener("hashchange", this.handleHashChange, false);
  }

  componentWillUnmount() {
    window.removeEventListener("hashchange", this.handleHashChange, false);
  }

  render() {
    return this.props.children({
      onBlur: this.handleBlur,
      onFocus: this.handleFocus,
      focusPath: this.state.focusPath
    });
  }

}

class SimpleFocusManager extends React.Component {
  constructor() {
    super(...arguments);
    this.state = {
      focusPath: []
    };

    this.handleFocus = path => {
      this.setState({
        focusPath: path
      });
    };

    this.handleBlur = () => {};
  }

  render() {
    return this.props.children({
      onBlur: this.handleBlur,
      onFocus: this.handleFocus,
      focusPath: this.state.focusPath
    });
  }

}

function ArrayOfObjectsMembers(props) {
  const {
    members,
    renderInput,
    renderField,
    renderItem,
    renderPreview
  } = props;
  return /* @__PURE__ */jsx(Fragment, {
    children: members.map(member => {
      if (member.kind === "item") {
        return /* @__PURE__ */jsx(ArrayOfObjectsItem, {
          member,
          renderInput,
          renderField,
          renderItem,
          renderPreview
        }, member.key);
      }

      if (member.kind === "error") {
        return /* @__PURE__ */jsx(MemberItemError, {
          member
        }, member.key);
      }

      console.warn(new Error("Unhandled member kind ".concat(member.kind)));
      return null;
    })
  });
}

export { ArrayOfObjectsMembers, HashFocusManager, SimpleFocusManager, useReviewChanges };
//# sourceMappingURL=form.js.map
