{"version":3,"file":"_index-ba042112.js","sources":["../src/desk/DeskToolProvider.tsx","../src/desk/structureResolvers/resolveIntent.ts","../src/desk/components/deskTool/intentResolver/Redirect.tsx","../src/desk/components/deskTool/intentResolver/utils.ts","../src/desk/components/deskTool/intentResolver/IntentResolver.tsx","../src/desk/components/deskTool/DeskToolBoundary.tsx"],"sourcesContent":["import React, {useMemo, useState} from 'react'\nimport {useConfigContextFromSource} from '../config/useConfigContextFromSource'\nimport {useSource} from '../studio'\nimport {DeskToolContext} from './DeskToolContext'\nimport {createStructureBuilder, DefaultDocumentNodeResolver} from './structureBuilder'\nimport {StructureResolver, UnresolvedPaneNode} from './types'\n\ninterface DeskToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: React.ReactNode\n}\n\nexport function DeskToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: DeskToolProviderProps): React.ReactElement {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure) return resolveStructure(S, configContext) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext])\n\n  return (\n    <DeskToolContext.Provider\n      value={useMemo(() => {\n        return {\n          features: {\n            backButton: layoutCollapsed,\n            reviewChanges: !layoutCollapsed,\n            splitPanes: !layoutCollapsed,\n            splitViews: !layoutCollapsed,\n          },\n          layoutCollapsed,\n          setLayoutCollapsed,\n          rootPaneNode,\n          structureContext: S.context,\n        }\n      }, [layoutCollapsed, rootPaneNode, S.context])}\n    >\n      {children}\n    </DeskToolContext.Provider>\n  )\n}\n","import {omit} from 'lodash'\nimport {Observable} from 'rxjs'\nimport {first} from 'rxjs/operators'\nimport {PaneNode, RouterPanes, RouterPaneSiblingContext, UnresolvedPaneNode} from '../types'\nimport {StructureContext} from '../structureBuilder'\nimport {assignId} from './assignId'\nimport {memoBind} from './memoBind'\nimport {createPaneResolver, PaneResolverMiddleware} from './createPaneResolver'\n\ninterface TraverseOptions {\n  unresolvedPane: UnresolvedPaneNode | undefined\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  parent: PaneNode | null\n  path: string[]\n  currentId: string\n  flatIndex: number\n  levelIndex: number\n  structureContext: StructureContext\n}\n\nexport interface ResolveIntentOptions {\n  rootPaneNode?: UnresolvedPaneNode\n  intent: string\n  params: {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n  structureContext: StructureContext\n}\n\n/**\n * Resolves an intent request using breadth first search. If a match is not\n * found, the intent will resolve to the fallback editor.\n *\n * A match is found if:\n * 1. the `PaneNode` is of type `document` and the its ID matches the intent ID\n * 2. the `PaneNode` is of type `documentList` and the `schemaTypeName` matches\n * 3. the `PaneNode`'s `canHandleIntent` method returns true\n *\n * If a `PaneNode` of type `list` is found, it will be searched for a match.\n *\n * @see PaneNode\n */\nexport async function resolveIntent(options: ResolveIntentOptions): Promise<RouterPanes> {\n  const resolvedPaneCache = new Map<string, Observable<PaneNode>>()\n\n  // this is a simple version of the memoizer in `createResolvedPaneNodeStream`\n  const memoize: PaneResolverMiddleware = (nextFn) => (unresolvedPane, context, flatIndex) => {\n    const key = unresolvedPane && `${assignId(unresolvedPane)}-${context.path.join('__')}`\n    const cachedResolvedPane = key && resolvedPaneCache.get(key)\n    if (cachedResolvedPane) return cachedResolvedPane\n\n    const result = nextFn(unresolvedPane, context, flatIndex)\n    if (key) resolvedPaneCache.set(key, result)\n    return result\n  }\n\n  const resolvePane = createPaneResolver(memoize)\n\n  const fallbackEditorPanes: RouterPanes = [\n    [\n      {\n        id: `__edit__${options.params.id}`,\n        params: {...omit(options.params, ['id']), type: options.params.type},\n        payload: options.payload,\n      },\n    ],\n  ]\n\n  async function traverse({\n    currentId,\n    flatIndex,\n    intent,\n    params,\n    parent,\n    path,\n    payload,\n    unresolvedPane,\n    levelIndex,\n    structureContext,\n  }: TraverseOptions): Promise<\n    Array<{panes: RouterPanes; depthIndex: number; levelIndex: number}>\n  > {\n    if (!unresolvedPane) return []\n\n    const {id: targetId, type: schemaTypeName, ...otherParams} = params\n    const context: RouterPaneSiblingContext = {\n      id: currentId,\n      splitIndex: 0,\n      parent,\n      path,\n      index: flatIndex,\n      params: {},\n      payload: undefined,\n      structureContext,\n    }\n    const resolvedPane = await resolvePane(unresolvedPane, context, flatIndex)\n      .pipe(first())\n      .toPromise()\n\n    // if the resolved pane is a document pane and the pane's ID matches then\n    // resolve the intent to the current path\n    if (resolvedPane.type === 'document' && resolvedPane.id === targetId) {\n      return [\n        {\n          panes: [\n            ...path.slice(0, path.length - 1).map((i) => [{id: i}]),\n            [{id: targetId, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `getIntentState.ts`\n    if (\n      // if the resolve pane's `canHandleIntent` returns true, then resolve\n      resolvedPane.canHandleIntent?.(intent, params, {\n        pane: resolvedPane,\n        index: flatIndex,\n      }) ||\n      // if the pane's `canHandleIntent` did not return true, then match against\n      // this default case. we will resolve the intent if:\n      (resolvedPane.type === 'documentList' &&\n        // 1. the schema type matches (this required for the document to render)\n        resolvedPane.schemaTypeName === schemaTypeName &&\n        // 2. the filter is the default filter.\n        //\n        // NOTE: this case is to prevent false positive matches where the user\n        // has configured a more specific filter for a particular type. In that\n        // case, the user can implement their own `canHandleIntent` function\n        resolvedPane.options.filter === '_type == $type')\n    ) {\n      return [\n        {\n          panes: [\n            // map the current path to router panes\n            ...path.map((id) => [{id}]),\n            // then augment with the intents IDs and params\n            [{id: params.id, params: otherParams, payload}],\n          ],\n          depthIndex: path.length,\n          levelIndex,\n        },\n      ]\n    }\n\n    if (resolvedPane.type === 'list' && resolvedPane.child && resolvedPane.items) {\n      return (\n        await Promise.all(\n          resolvedPane.items.map((item, nextLevelIndex) => {\n            if (item.type === 'divider') return Promise.resolve([])\n\n            return traverse({\n              currentId: item._id || item.id,\n              flatIndex: flatIndex + 1,\n              intent,\n              params,\n              parent: resolvedPane,\n              path: [...path, item.id],\n              payload,\n              unresolvedPane:\n                typeof resolvedPane.child === 'function'\n                  ? memoBind(resolvedPane, 'child')\n                  : resolvedPane.child,\n              levelIndex: nextLevelIndex,\n              structureContext,\n            })\n          })\n        )\n      ).flat()\n    }\n\n    return []\n  }\n\n  const matchingPanes = await traverse({\n    currentId: 'root',\n    flatIndex: 0,\n    levelIndex: 0,\n    intent: options.intent,\n    params: options.params,\n    parent: null,\n    path: [],\n    payload: options.payload,\n    unresolvedPane: options.rootPaneNode,\n    structureContext: options.structureContext,\n  })\n\n  const closestPaneToRoot = matchingPanes.sort((a, b) => {\n    // break ties with the level index\n    if (a.depthIndex === b.depthIndex) return a.levelIndex - b.levelIndex\n    return a.depthIndex - b.depthIndex\n  })[0]\n\n  if (closestPaneToRoot) {\n    return closestPaneToRoot.panes\n  }\n\n  return fallbackEditorPanes\n}\n","import {Box, Card, Flex, Spinner, Text} from '@sanity/ui'\nimport React, {useEffect} from 'react'\nimport {useRouter} from '../../../../router'\nimport {RouterPanes} from '../../../types'\nimport {Delay} from '../../Delay'\n\ninterface RedirectProps {\n  panes: RouterPanes\n}\n\nexport function Redirect({panes}: RedirectProps) {\n  const {navigate} = useRouter()\n\n  useEffect(() => {\n    // Navigates to passed router panes state on mount\n    navigate({panes}, {replace: true})\n  }, [navigate, panes])\n\n  return (\n    <Card height=\"fill\">\n      <Delay ms={300}>\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Spinner muted />\n          <Box marginTop={3}>\n            <Text muted size={1}>\n              Redirectingâ€¦\n            </Text>\n          </Box>\n        </Flex>\n      </Delay>\n    </Card>\n  )\n}\n","import {uuid} from '@sanity/uuid'\nimport {first} from 'rxjs/operators'\nimport {Observable} from 'rxjs'\nimport {PaneResolutionError} from '../../../structureResolvers'\nimport {getPublishedId} from '../../../../util'\nimport {DocumentStore} from '../../../../datastores'\n\nexport function removeDraftPrefix(documentId: string): string {\n  const publishedId = getPublishedId(documentId)\n\n  if (publishedId !== documentId) {\n    console.warn(\n      'Removed unexpected draft id in document link: All links to documents should have the ' +\n        '`drafts.`-prefix removed and something appears to have made an intent link to `%s`',\n      documentId\n    )\n  }\n\n  return publishedId\n}\n\nexport async function ensureDocumentIdAndType(\n  documentStore: DocumentStore,\n  id: string | undefined,\n  type: string | undefined\n): Promise<{id: string; type: string}> {\n  if (id && type) return {id, type}\n  if (!id && type) return {id: uuid(), type}\n  if (id && !type) {\n    const resolvedType = await (documentStore.resolveTypeForDocument(id) as Observable<string>)\n      .pipe(first())\n      .toPromise()\n\n    return {id, type: resolvedType}\n  }\n\n  throw new PaneResolutionError({\n    message: 'Neither document `id` or `type` was provided when trying to resolve intent.',\n  })\n}\n","import {Box, Card, Flex, Spinner, Text} from '@sanity/ui'\nimport React, {useEffect, useState} from 'react'\nimport {useDocumentStore} from '../../../../datastores'\nimport {useUnique} from '../../../../util'\nimport {resolveIntent} from '../../../structureResolvers'\nimport {RouterPanes} from '../../../types'\nimport {useDeskTool} from '../../../useDeskTool'\nimport {Delay} from '../../Delay'\nimport {Redirect} from './Redirect'\nimport {ensureDocumentIdAndType} from './utils'\n\nexport interface IntentResolverProps {\n  intent: string\n  params: Record<string, unknown> // {type: string; id: string; [key: string]: string | undefined}\n  payload: unknown\n}\n\n/**\n * A component that receives an intent from props and redirects to the resolved\n * intent location (while showing a loading spinner during the process)\n */\nexport function IntentResolver({\n  intent,\n  params: paramsProp = {},\n  payload: payloadProp,\n}: IntentResolverProps) {\n  const {rootPaneNode, structureContext} = useDeskTool()\n  const documentStore = useDocumentStore()\n  const params = useUnique(paramsProp)\n  const payload = useUnique(payloadProp)\n  const [nextRouterPanes, setNextRouterPanes] = useState<RouterPanes | null>(null)\n  const [error, setError] = useState<unknown>(null)\n  const idParam = typeof params.id === 'string' ? params.id : undefined\n  const typeParam = typeof params.type === 'string' ? params.type : undefined\n\n  useEffect(() => {\n    const cancelledRef = {current: false}\n\n    async function getNextRouterPanes() {\n      const {id, type} = await ensureDocumentIdAndType(documentStore, idParam, typeParam)\n\n      return resolveIntent({\n        intent,\n        params: {...params, id, type},\n        payload,\n        rootPaneNode,\n        structureContext,\n      })\n    }\n\n    getNextRouterPanes()\n      .then((result) => {\n        if (!cancelledRef.current) {\n          setNextRouterPanes(result)\n        }\n      })\n      .catch(setError)\n\n    return () => {\n      cancelledRef.current = true\n    }\n  }, [documentStore, idParam, intent, params, payload, rootPaneNode, structureContext, typeParam])\n\n  // throwing here bubbles the error up to the error boundary inside of the\n  // `DeskToolRoot` component\n  if (error) throw error\n  if (nextRouterPanes) return <Redirect panes={nextRouterPanes} />\n\n  return (\n    <Card height=\"fill\">\n      <Delay ms={300}>\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Spinner muted />\n          <Box marginTop={3}>\n            <Text align=\"center\" muted size={1}>\n              Loadingâ€¦\n            </Text>\n          </Box>\n        </Flex>\n      </Delay>\n    </Card>\n  )\n}\n","import React, {useEffect, useMemo, useState} from 'react'\nimport {ErrorBoundary} from '@sanity/ui'\nimport {SourceProvider, useWorkspace} from '../../../studio'\nimport {Tool} from '../../../config'\nimport {isRecord} from '../../../util'\nimport {DeskToolOptions} from '../../types'\nimport {useRouter} from '../../../router'\nimport {DeskToolProvider} from '../../DeskToolProvider'\nimport {setActivePanes} from '../../getIntentState'\nimport {IntentResolver} from './intentResolver'\nimport {StructureError} from './StructureError'\nimport {DeskTool} from './DeskTool'\n\nconst EMPTY_RECORD = {}\n\ninterface DeskToolBoundaryProps {\n  tool: Tool<DeskToolOptions>\n}\n\nexport function DeskToolBoundary({tool: {options}}: DeskToolBoundaryProps) {\n  const {unstable_sources: sources} = useWorkspace()\n  const [firstSource] = sources\n  const {source, defaultDocumentNode, structure} = options || {}\n\n  const {state: routerState} = useRouter()\n  const intent = useMemo(() => {\n    const intentName = typeof routerState.intent === 'string' ? routerState.intent : undefined\n    const params = isRecord(routerState.params) ? routerState.params : EMPTY_RECORD\n    const payload = routerState.payload\n\n    return intentName ? {intent: intentName, params, payload} : undefined\n  }, [routerState])\n\n  // Set active panes to blank on mount and unmount\n  useEffect(() => {\n    setActivePanes([])\n    return () => setActivePanes([])\n  }, [])\n\n  const [{error}, setError] = useState<{error: unknown}>({error: null})\n  // this re-throws if the error it catches is not a PaneResolutionError\n  if (error) return <StructureError error={error} />\n\n  return (\n    <ErrorBoundary onCatch={setError}>\n      <SourceProvider name={source || firstSource.name}>\n        <DeskToolProvider defaultDocumentNode={defaultDocumentNode} structure={structure}>\n          {/* when an intent is found, we render the intent resolver component */}\n          {/* which asynchronously resolves the intent then navigates to it */}\n          {intent ? <IntentResolver {...intent} /> : <DeskTool onPaneChange={setActivePanes} />}\n        </DeskToolProvider>\n      </SourceProvider>\n    </ErrorBoundary>\n  )\n}\n"],"names":["DeskToolProvider","defaultDocumentNode","structure","resolveStructure","children","layoutCollapsed","setLayoutCollapsed","useState","source","useSource","configContext","useConfigContextFromSource","S","useMemo","createStructureBuilder","rootPaneNode","defaults","jsx","DeskToolContext","Provider","value","features","backButton","reviewChanges","splitPanes","splitViews","structureContext","context","resolveIntent","options","resolvedPaneCache","Map","memoize","nextFn","unresolvedPane","flatIndex","key","assignId","path","join","cachedResolvedPane","get","result","set","resolvePane","createPaneResolver","fallbackEditorPanes","id","params","omit","type","payload","traverse","currentId","intent","parent","levelIndex","_a","targetId","schemaTypeName","otherParams","splitIndex","index","resolvedPane","pipe","first","toPromise","panes","slice","length","map","i","depthIndex","canHandleIntent","call","pane","filter","child","items","Promise","all","item","nextLevelIndex","resolve","_id","memoBind","flat","matchingPanes","closestPaneToRoot","sort","a","b","Redirect","navigate","useRouter","useEffect","replace","Card","height","Delay","ms","jsxs","Flex","align","direction","justify","Spinner","muted","Box","marginTop","Text","size","ensureDocumentIdAndType","documentStore","uuid","resolvedType","resolveTypeForDocument","PaneResolutionError","message","IntentResolver","paramsProp","payloadProp","useDeskTool","useDocumentStore","useUnique","nextRouterPanes","setNextRouterPanes","error","setError","idParam","typeParam","cancelledRef","current","getNextRouterPanes","then","catch","EMPTY_RECORD","DeskToolBoundary","tool","unstable_sources","sources","useWorkspace","firstSource","state","routerState","intentName","isRecord","setActivePanes","StructureError","ErrorBoundary","onCatch","SourceProvider","name","DeskTool","onPaneChange"],"mappings":"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"}