{"version":3,"file":"_DocumentTypeList-03e0e0a7.cjs","sources":["../src/desk/structureBuilder/Component.ts","../src/desk/structureBuilder/List.ts","../src/desk/structureBuilder/ListItem.ts","../src/desk/structureBuilder/DocumentListItem.ts","../src/desk/structureBuilder/DocumentTypeList.ts"],"sourcesContent":["import {camelCase} from 'lodash'\nimport {SerializeOptions, StructureNode, Serializable, Child} from './StructureNodes'\nimport {SerializeError, HELP_URL} from './SerializeError'\nimport {MenuItem, MenuItemBuilder, maybeSerializeMenuItem} from './MenuItem'\nimport {MenuItemGroup, MenuItemGroupBuilder, maybeSerializeMenuItemGroup} from './MenuItemGroup'\nimport {validateId} from './util/validateId'\nimport {UserComponent} from './types'\n\nexport interface Component extends StructureNode {\n  component: UserComponent\n  child?: Child\n  menuItems: MenuItem[]\n  menuItemGroups: MenuItemGroup[]\n  options: {[key: string]: unknown}\n}\n\nexport interface ComponentInput extends StructureNode {\n  component: UserComponent\n  child?: Child\n  options?: {[key: string]: unknown}\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\nexport interface BuildableComponent extends Partial<StructureNode> {\n  component?: UserComponent\n  child?: Child\n  options?: {[key: string]: unknown}\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\nexport class ComponentBuilder implements Serializable<Component> {\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: this.spec.id || camelCase(title)})\n  }\n\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path)\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path)\n      ),\n    }\n  }\n\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {find} from 'lodash'\nimport {isRecord} from '../../util'\nimport {SerializePath, SerializeOptions, Divider} from './StructureNodes'\nimport {ChildResolverOptions, ChildResolver} from './ChildResolver'\nimport {SerializeError, HELP_URL} from './SerializeError'\nimport {ListItem, ListItemBuilder} from './ListItem'\nimport {IntentChecker} from './Intent'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  GenericListBuilder,\n  BuildableGenericList,\n  GenericList,\n  GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\nexport interface List extends GenericList {\n  type: 'list'\n  items: (ListItem | Divider)[]\n}\n\nexport interface ListInput extends GenericListInput {\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\nexport interface BuildableList extends BuildableGenericList {\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  protected spec: BuildableList\n\n  constructor(protected _context: StructureContext, spec?: ListInput) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {camelCase} from 'lodash'\nimport {SchemaType} from '@sanity/types'\nimport {SerializeOptions, Serializable, Collection, CollectionBuilder} from './StructureNodes'\nimport {ChildResolver} from './ChildResolver'\nimport {DocumentListBuilder} from './DocumentList'\nimport {SerializeError, HELP_URL} from './SerializeError'\nimport {ListBuilder} from './List'\nimport {DocumentBuilder} from './Document'\nimport {ComponentBuilder} from './Component'\nimport {validateId} from './util/validateId'\nimport {StructureContext} from './types'\n\nexport type UnserializedListItemChild = Collection | CollectionBuilder | ChildResolver\n\nexport type ListItemChild = Collection | ChildResolver | undefined\n\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  titleIsOptional?: boolean\n}\n\nexport interface ListItemDisplayOptions {\n  showIcon?: boolean\n}\n\nexport interface ListItemInput {\n  id: string\n  title?: string\n  icon?: React.ComponentType | React.ReactNode\n  child?: ListItemChild\n  displayOptions?: ListItemDisplayOptions\n  schemaType?: SchemaType | string\n}\n\nexport interface ListItem {\n  id: string\n  type: string\n  title?: string\n  icon?: React.ComponentType | React.ReactNode\n  child?: ListItemChild\n  displayOptions?: ListItemDisplayOptions\n  schemaType?: SchemaType\n}\n\nexport interface UnserializedListItem {\n  id: string\n  title: string\n  icon?: React.ComponentType | React.ReactNode\n  child?: UnserializedListItemChild\n  displayOptions?: ListItemDisplayOptions\n  schemaType?: SchemaType | string\n}\n\nexport type PartialListItem = Partial<UnserializedListItem>\n\nexport class ListItemBuilder implements Serializable<ListItem> {\n  protected spec: PartialListItem\n\n  constructor(protected _context: StructureContext, spec?: ListItemInput) {\n    this.spec = spec ? spec : {}\n  }\n\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: this.spec.id || camelCase(title)})\n  }\n\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {SchemaType} from '@sanity/types'\nimport {isRecord} from '../../util'\nimport {SerializeOptions} from './StructureNodes'\nimport {ListItemBuilder, ListItem, UnserializedListItem, ListItemInput} from './ListItem'\nimport {SerializeError, HELP_URL} from './SerializeError'\nimport {DocumentBuilder} from './Document'\nimport {StructureContext} from './types'\n\nexport interface DocumentListItemInput extends ListItemInput {\n  schemaType: SchemaType | string\n}\n\nexport interface DocumentListItem extends ListItem {\n  schemaType: SchemaType\n  _id: string\n}\n\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  protected spec: PartialDocumentListItem\n\n  constructor(protected _context: StructureContext, spec?: DocumentListItemInput) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {SchemaType} from '@sanity/types'\nimport {DocumentListBuilder, DocumentListInput, PartialDocumentList} from './DocumentList'\nimport {Child} from './StructureNodes'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {GenericListInput} from './GenericList'\nimport {StructureContext} from './types'\n\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  schemaType: SchemaType | string\n}\n\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  protected spec: PartialDocumentList\n\n  constructor(protected _context: StructureContext, spec?: DocumentListInput) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n"],"names":["ComponentBuilder","constructor","spec","options","id","clone","getId","title","camelCase","getTitle","child","getChild","component","getComponent","getOptions","menuItems","getMenuItems","menuItemGroups","getMenuItemGroups","serialize","path","componentOptions","SerializeError","index","withHelpUrl","HELP_URL","ID_REQUIRED","validateId","type","map","item","i","maybeSerializeMenuItem","maybeSerializeMenuItemGroup","withSpec","builder","getArgType","thing","ListBuilder","isPromise","Array","isArray","isListItem","defaultCanHandleIntent","intentName","params","context","pane","items","filter","isDocumentListItem","some","schemaType","name","_id","shallowIntentChecker","resolveChildForItem","itemId","parentItem","parent","target","find","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","INVALID_LIST_ITEM","isRecord","then","GenericListBuilder","_context","initialValueTemplatesSpecified","Boolean","initialValueTemplates","getItems","LIST_ITEMS_MUST_BE_ARRAY","concat","serializedItems","dupes","val","length","dupeIds","slice","dupeDesc","join","LIST_ITEM_IDS_MUST_BE_UNIQUE","canHandleIntent","icon","showIcon","enabled","displayOptions","getShowIcon","getIcon","getSchemaType","schema","get","titleIsOptional","TITLE_REQUIRED","SCHEMA_TYPE_NOT_FOUND","serializeOptions","hint","listChild","DocumentListBuilder","DocumentBuilder","originalChild","childOptions","createDefaultChildResolver","documentId","resolveDocumentNode","DocumentListItemBuilder","SCHEMA_TYPE_REQUIRED","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","getSpec","shouldOverride","identity","DEFAULT_INTENT_HANDLER","override"],"mappings":"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"}