{"version":3,"file":"_resolveConfig-435db3ec.cjs","sources":["../src/config/resolveConfig.ts"],"sourcesContent":["import {combineLatest, Observable} from 'rxjs'\nimport {first, map} from 'rxjs/operators'\nimport {CurrentUser} from '@sanity/types'\nimport {SanityClient} from '@sanity/client'\nimport {createMockAuthStore} from '../datastores/authStore/createMockAuthStore'\nimport {Config, SingleWorkspace, Source, Workspace, SchemaPluginOptions} from './types'\nimport {prepareConfig} from './prepareConfig'\n\n/**\n * Fully resolves a configuration including subscribing to all sources and\n * workspaces from a config. Returns an `Observable` that waits till all sources\n * emit once before emitting an array of fully resolved sources and workspaces.\n *\n * @alpha\n */\nexport function resolveConfig(config: Config): Observable<Workspace[]> {\n  const {workspaces} = prepareConfig(config)\n\n  return combineLatest(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    workspaces.flatMap((workspaceSummary) =>\n      combineLatest(workspaceSummary.__internal.sources.map(({source}) => source)).pipe(\n        map(\n          (sources): Workspace => ({\n            ...workspaceSummary,\n            ...sources[0],\n            unstable_sources: sources,\n            type: 'workspace',\n          })\n        )\n      )\n    )\n  )\n}\n\ntype CreateWorkspaceFromConfigOptions =\n  | SingleWorkspace\n  | (SingleWorkspace & {\n      currentUser: CurrentUser\n      getClient: (options: {apiVersion: string}) => SanityClient\n      schema?: SchemaPluginOptions\n    })\n\n/**\n * PRIMARILY FOR TESTING PURPOSES.\n *\n * This will create a fully resolved workspace from a config and optionally\n * allows a `client` and `currentUser` override. This exists primarily for\n * testing purposes. If you need to use a workspace, we recommend using the\n * `useWorkspace` hook to grab the fully resolved workspace from the\n * `StudioProvider`\n *\n * @alpha\n */\nexport async function createWorkspaceFromConfig(\n  options: CreateWorkspaceFromConfigOptions\n): Promise<Workspace> {\n  const client = 'getClient' in options ? options.getClient({apiVersion: '2022-09-09'}) : undefined\n  const [workspace] = await resolveConfig({\n    ...options,\n    ...(client &&\n      'currentUser' in options && {\n        auth: createMockAuthStore({...options, client}),\n      }),\n  })\n    .pipe(first())\n    .toPromise()\n\n  return workspace\n}\n\n/**\n * PRIMARILY FOR TESTING PURPOSES.\n *\n * This will create a fully resolved source from a config and optionally\n * allows a `client` and `currentUser` override. This exists primarily for\n * testing purposes. If you need to use a source, we recommend using the\n * `useSource` hook to grab the fully resolved source from the `StudioProvider`\n *\n * @alpha\n */\nexport async function createSourceFromConfig(\n  options: CreateWorkspaceFromConfigOptions\n): Promise<Source> {\n  const workspace = await createWorkspaceFromConfig(options)\n  return workspace.unstable_sources[0]\n}\n"],"names":["resolveConfig","config","workspaces","prepareConfig","combineLatest","flatMap","workspaceSummary","__internal","sources","map","source","pipe","unstable_sources","type"],"mappings":";;;;;;;;;;;;;;AAeO,SAASA,aAAT,CAAuBC,MAAvB,EAAgE;EACrE,MAAM;IAACC;EAAD,IAAeC,aAAA,CAAAA,aAAAA,CAAcF,MAAdE,CAArB;EAEO,OAAAC,IAAA,CAAAA,aAAAA,CAELF,UAAW,CAAAG,OAAX,CAAoBC,gBAAD,IACjBF,IAAAA,CAAAA,aAAAA,CAAcE,gBAAA,CAAiBC,UAAjB,CAA4BC,OAA5B,CAAoCC,GAApC,CAAwC;IAAA,IAAC;MAACC;IAAD,CAAD;IAAA,OAAcA,MAAd;EAAA,CAAxC,CAAdN,EAA6EO,IAA7EP,CACEK,SAAA,CAAAA,GAAAA,CACGD,OAAD,kDACKF,gBADL,GAEKE,OAAQ,CAAA,CAAA,CAFb;IAGEI,gBAAkB,EAAAJ,OAHpB;IAIEK,IAAM,EAAA;EAJR,EADFJ,CADFL,CADF,CAFKA,CAAA;AAeT;;"}