'use strict';

var jsxRuntime = require('react/jsx-runtime');

function Favicons(_ref) {
  let {
    basePath
  } = _ref;
  const base = "".concat(basePath.replace(/\/+$/, ""), "/static");
  return /* @__PURE__ */jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [/* @__PURE__ */jsxRuntime.jsx("link", {
      rel: "icon",
      href: "".concat(base, "/favicon.ico"),
      sizes: "any"
    }), /* @__PURE__ */jsxRuntime.jsx("link", {
      rel: "icon",
      href: "".concat(base, "/favicon.svg"),
      type: "image/svg+xml"
    }), /* @__PURE__ */jsxRuntime.jsx("link", {
      rel: "apple-touch-icon",
      href: "".concat(base, "/apple-touch-icon.png")
    }), /* @__PURE__ */jsxRuntime.jsx("link", {
      rel: "manifest",
      href: "".concat(base, "/manifest.webmanifest")
    })]
  });
}

const errorHandlerScript = "\n;(function () {\n  var _caughtErrors = []\n\n  var errorChannel = (function () {\n    var subscribers = []\n\n    function publish(msg) {\n      for (var i = 0; i < subscribers.length; i += 1) {\n        subscribers[i](msg)\n      }\n    }\n\n    function subscribe(subscriber) {\n      subscribers.push(subscriber)\n\n      return function () {\n        var idx = subscribers.indexOf(subscriber)\n\n        if (idx > -1) {\n          subscribers.splice(idx, 1)\n        }\n      }\n    }\n\n    return {publish, subscribe, subscribers}\n  })()\n\n  // NOTE: Store the error channel instance in the global scope so that the Studio application can\n  // access it and subscribe to errors.\n  window.__sanityErrorChannel = {\n    subscribe: errorChannel.subscribe,\n  }\n\n  function _nextTick(callback) {\n    setTimeout(callback, 0)\n  }\n\n  function _handleError(error, params) {\n    _nextTick(function () {\n      // - If there are error channel subscribers, then we notify them (no console error).\n      // - If there are no subscribers, then we log the error to the console and render the error overlay.\n      if (errorChannel.subscribers.length) {\n        errorChannel.publish({error, params})\n      } else {\n        console.error(error)\n\n        _renderErrorOverlay(error, params)\n      }\n    })\n  }\n\n  var ERROR_BOX_STYLE = [\n    'background: #fff',\n    'border-radius: 6px',\n    'box-sizing: border-box',\n    'color: #121923',\n    'flex: 1',\n    \"font-family: -apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue','Liberation Sans',Helvetica,Arial,system-ui,sans-serif\",\n    'font-size: 16px',\n    'line-height: 21px',\n    'margin: 0 auto',\n    'max-width: 960px',\n    'overflow: auto',\n    'padding: 20px',\n    'width: 100%',\n  ].join(';')\n\n  var ERROR_CODE_STYLE = [\n    'color: #972E2A',\n    \"font-family: -apple-system-ui-monospace, 'SF Mono', Menlo, Monaco, Consolas, monospace\",\n    'font-size: 13px',\n    'line-height: 17px',\n    'margin: 0',\n  ].join(';')\n\n  function _renderErrorOverlay(error, params) {\n    var errorElement = document.querySelector('#__sanityError') || document.createElement('div')\n    var colno = params.event.colno\n    var lineno = params.event.lineno\n    var filename = params.event.filename\n\n    errorElement.id = '__sanityError'\n    errorElement.innerHTML = [\n      '<div style=\"' + ERROR_BOX_STYLE + '\">',\n      '<div style=\"font-weight: 700;\">Uncaught error: ' + error.message + '</div>',\n      '<div style=\"color: #515E72; font-size: 13px; line-height: 17px; margin: 10px 0;\">' +\n        filename +\n        ':' +\n        lineno +\n        ':' +\n        colno +\n        '</div>',\n      '<pre style=\"' + ERROR_CODE_STYLE + '\">' + error.stack + '</pre>',\n      '</div>',\n    ].join('')\n\n    errorElement.style.position = 'fixed'\n    errorElement.style.zIndex = 1000000\n    errorElement.style.top = 0\n    errorElement.style.left = 0\n    errorElement.style.right = 0\n    errorElement.style.bottom = 0\n    errorElement.style.padding = '20px'\n    errorElement.style.background = 'rgba(16,17,18,0.66)'\n    errorElement.style.display = 'flex'\n    errorElement.style.alignItems = 'center'\n    errorElement.style.justifyContent = 'center'\n\n    document.body.appendChild(errorElement)\n  }\n\n  // NOTE:\n  // Yes \u2013 we're attaching 2 error listeners below \uD83D\uDC40\n  // This is because React makes the same error throw twice (in development mode).\n  // See: https://github.com/facebook/react/issues/10384\n\n  // Error listener #1\n  window.onerror = function (event, source, lineno, colno, error) {\n    _nextTick(function () {\n      if (_caughtErrors.indexOf(error) !== -1) return\n\n      _caughtErrors.push(error)\n\n      _handleError(error, {\n        event,\n        lineno,\n        colno,\n        source,\n      })\n\n      _nextTick(function () {\n        var idx = _caughtErrors.indexOf(error)\n\n        if (idx > -1) _caughtErrors.splice(idx, 1)\n      })\n    })\n\n    // IMPORTANT: this callback must return `true` to prevent the error from being rendered in\n    // the browser\u2019s console.\n    return true\n  }\n\n  // Error listener #2\n  window.addEventListener('error', function (event) {\n    if (_caughtErrors.indexOf(event.error) !== -1) return true\n\n    _caughtErrors.push(event.error)\n\n    _handleError(event.error, {\n      event,\n      lineno: event.lineno,\n      colno: event.colno,\n    })\n\n    _nextTick(function () {\n      _nextTick(function () {\n        var idx = _caughtErrors.indexOf(event.error)\n\n        if (idx > -1) _caughtErrors.splice(idx, 1)\n      })\n    })\n\n    return true\n  })\n})()\n";

function GlobalErrorHandler() {
  return /* @__PURE__ */jsxRuntime.jsx("script", {
    dangerouslySetInnerHTML: {
      __html: errorHandlerScript
    }
  });
}

const NoJsStyles = "\n.sanity-app-no-js__root {\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  background: #fff;\n}\n\n.sanity-app-no-js__content {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  font-family: helvetica, arial, sans-serif;\n}\n";

function NoJavascript() {
  return /* @__PURE__ */jsxRuntime.jsx("noscript", {
    children: /* @__PURE__ */jsxRuntime.jsx("div", {
      className: "sanity-app-no-js__root",
      children: /* @__PURE__ */jsxRuntime.jsxs("div", {
        className: "sanity-app-no-js__content",
        children: [/* @__PURE__ */jsxRuntime.jsx("style", {
          type: "text/css",
          children: NoJsStyles
        }), /* @__PURE__ */jsxRuntime.jsx("h1", {
          children: "JavaScript disabled"
        }), /* @__PURE__ */jsxRuntime.jsxs("p", {
          children: ["Please ", /* @__PURE__ */jsxRuntime.jsx("a", {
            href: "https://www.enable-javascript.com/",
            children: "enable JavaScript"
          }), " in your browser and reload the page to proceed."]
        })]
      })
    })
  });
}

const globalStyles = "\n  html {\n    background-color: #f1f3f6;\n  }\n  html,\n  body,\n  #sanity {\n    height: 100%;\n  }\n  body {\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n  }\n";
const EMPTY_ARRAY = [];

function DefaultDocument(props) {
  const {
    entryPath,
    css = EMPTY_ARRAY,
    basePath = "/"
  } = props;
  return /* @__PURE__ */jsxRuntime.jsxs("html", {
    lang: "en",
    children: [/* @__PURE__ */jsxRuntime.jsxs("head", {
      children: [/* @__PURE__ */jsxRuntime.jsx("meta", {
        charSet: "utf-8"
      }), /* @__PURE__ */jsxRuntime.jsx("meta", {
        name: "viewport",
        content: "width=device-width, initial-scale=1, viewport-fit=cover"
      }), /* @__PURE__ */jsxRuntime.jsx("meta", {
        name: "robots",
        content: "noindex"
      }), /* @__PURE__ */jsxRuntime.jsx("meta", {
        name: "referrer",
        content: "same-origin"
      }), /* @__PURE__ */jsxRuntime.jsx(Favicons, {
        basePath
      }), /* @__PURE__ */jsxRuntime.jsx("title", {
        children: "Sanity Studio"
      }), /* @__PURE__ */jsxRuntime.jsx(GlobalErrorHandler, {}), css.map(href => /* @__PURE__ */jsxRuntime.jsx("link", {
        rel: "stylesheet",
        href
      }, href)), /* @__PURE__ */jsxRuntime.jsx("style", {
        children: globalStyles
      })]
    }), /* @__PURE__ */jsxRuntime.jsxs("body", {
      children: [/* @__PURE__ */jsxRuntime.jsx("div", {
        id: "sanity"
      }), /* @__PURE__ */jsxRuntime.jsx("script", {
        type: "module",
        src: entryPath
      }), /* @__PURE__ */jsxRuntime.jsx(NoJavascript, {})]
    })]
  });
}

exports.DefaultDocument = DefaultDocument;
exports.GlobalErrorHandler = GlobalErrorHandler;
//# sourceMappingURL=_DefaultDocument-cb5fd38b.cjs.map
