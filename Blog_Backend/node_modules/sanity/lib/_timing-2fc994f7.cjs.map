{"version":3,"file":"_timing-2fc994f7.cjs","sources":["../src/cli/util/checkStudioDependencyVersions.ts","../src/cli/util/checkRequiredDependencies.ts","../src/cli/util/timing.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport semver, {SemVer} from 'semver'\nimport resolveFrom from 'resolve-from'\nimport {generateHelpUrl} from '@sanity/generate-help-url'\nimport type {PackageJson} from '@sanity/cli'\n\ninterface PackageInfo {\n  name: string\n  supported: string[]\n  deprecatedBelow: null | string\n  installed: SemVer\n  isUnsupported: boolean\n  isDeprecated: boolean\n  isUntested: boolean\n}\n\n// NOTE: when doing changes here, also remember to update versions in help docs at\n// https://admin.sanity.io/desk/docs;helpArticle;upgrade-packages\nconst PACKAGES = [\n  {name: 'react', supported: ['^17'], deprecatedBelow: null},\n  {name: 'react-dom', supported: ['^17'], deprecatedBelow: null},\n]\n\nexport function checkStudioDependencyVersions(workDir: string): void {\n  const manifest = readPackageJson(path.join(workDir, 'package.json'))\n  const dependencies = {...manifest.dependencies, ...manifest.devDependencies}\n\n  const packageInfo = PACKAGES.map((pkg): PackageInfo | false => {\n    const dependency = dependencies[pkg.name]\n    if (!dependency) {\n      return false\n    }\n\n    const manifestPath = resolveFrom.silent(workDir, path.join(pkg.name, 'package.json'))\n    const installed = semver.coerce(\n      manifestPath ? readPackageJson(manifestPath).version : dependency.replace(/[\\D.]/g, '')\n    )\n\n    if (!installed) {\n      return false\n    }\n\n    const supported = pkg.supported.join(' || ')\n\n    // \"Untested\" is usually the case where we have not upgraded the React version requirements\n    // before a release, but given that is usually works in a backwards-compatible way, we want\n    // to indicate that it's _untested_, not necessarily _unsupported_\n    // Ex: Installed is react@17.0.0, but we've only _tested_ with react@^16\n    const isUntested = !semver.satisfies(installed, supported) && semver.gtr(installed, supported)\n\n    // \"Unsupported\" in that the installed version is _lower than_ the minimum version\n    // Ex: Installed is react@15.0.0, but we require react@^16\n    const isUnsupported = !semver.satisfies(installed, supported) && !isUntested\n\n    // \"Deprecated\" in that we will stop supporting it at some point in the near future,\n    // so users should be prompted to upgrade\n    const isDeprecated = pkg.deprecatedBelow ? semver.ltr(installed, pkg.deprecatedBelow) : false\n\n    return {\n      ...pkg,\n      installed,\n      isUnsupported,\n      isDeprecated,\n      isUntested,\n    }\n  })\n\n  const installedPackages = packageInfo.filter((inp): inp is PackageInfo => inp !== false)\n  const unsupported = installedPackages.filter((pkg) => pkg.isUnsupported)\n  const deprecated = installedPackages.filter((pkg) => !pkg.isUnsupported && pkg.isDeprecated)\n  const untested = installedPackages.filter((pkg) => pkg.isUntested)\n\n  if (deprecated.length > 0) {\n    // eslint-disable-next-line no-console\n    console.warn(`\n[WARN] The following package versions have been deprecated and should be upgraded:\n\n  ${listPackages(deprecated)}\n\nSupport for these will be removed in a future release!\n\n  ${getUpgradeInstructions(deprecated)}\n`)\n  }\n\n  if (untested.length > 0) {\n    // eslint-disable-next-line no-console\n    console.warn(`\n[WARN] The following package versions have not yet been marked as supported:\n\n  ${listPackages(untested)}\n\nYou _may_ encounter bugs while using these versions.\n\n  ${getDowngradeInstructions(untested)}\n`)\n  }\n\n  if (unsupported.length > 0) {\n    // eslint-disable-next-line no-console\n    console.error(`\n[ERROR] The following package versions are no longer supported and needs to be upgraded:\n\n  ${listPackages(unsupported)}\n\n  ${getUpgradeInstructions(unsupported)}\n`)\n    process.exit(1)\n  }\n}\n\nfunction listPackages(pkgs: PackageInfo[]) {\n  return pkgs\n    .map(\n      (pkg) =>\n        `${pkg.name} (installed: ${pkg.installed}, want: ${\n          pkg.deprecatedBelow || pkg.supported.join(' || ')\n        })`\n    )\n    .join('\\n  ')\n}\n\nfunction getUpgradeInstructions(pkgs: PackageInfo[]) {\n  const inst = pkgs\n    .map((pkg) => {\n      const [highestSupported] = pkg.supported\n        .map((version) => (semver.coerce(version) || {version: ''}).version)\n        .sort(semver.rcompare)\n\n      return `\"${pkg.name}@${highestSupported}\"`\n    })\n    .join(' ')\n\n  return `To upgrade, run either:\n\n  yarn add ${inst}\n\n  or\n\n  npm install ${inst}\n\nRead more at ${generateHelpUrl('upgrade-packages')}`\n}\n\nfunction getDowngradeInstructions(pkgs: PackageInfo[]) {\n  const inst = pkgs\n    .map((pkg) => {\n      const [highestSupported] = pkg.supported\n        .map((version) => (semver.coerce(version) || {version: ''}).version)\n        .sort(semver.rcompare)\n\n      return `\"${pkg.name}@${highestSupported}\"`\n    })\n    .join(' ')\n\n  return `To downgrade, run either:\n\n  yarn add ${inst}\n\n  or\n\n  npm install ${inst}`\n}\n\nfunction readPackageJson(filePath: string): PackageJson {\n  try {\n    // eslint-disable-next-line no-sync\n    return JSON.parse(fs.readFileSync(filePath, 'utf8'))\n  } catch (err) {\n    throw new Error(`Failed to read \"${filePath}\": ${err.message}`)\n  }\n}\n","import path from 'path'\nimport {readFile} from 'fs/promises'\nimport execa from 'execa'\nimport semver, {SemVer} from 'semver'\nimport resolveFrom from 'resolve-from'\nimport oneline from 'oneline'\nimport type {CliCommandContext, PackageJson} from '@sanity/cli'\n\n/**\n * NOTE: This is statically inlined into the compiled file by\n * `babel-plugin-inline-json-import`\n */\nimport {peerDependencies} from '../../../package.json'\n\nconst defaultStudioManifestProps: PartialPackageManifest = {\n  name: 'studio',\n  version: '1.0.0',\n}\n\ninterface CheckResult {\n  didInstall: boolean\n}\n\n/**\n * Checks that the studio has declared and installed the required dependencies\n * needed by the Sanity modules. While we generally use regular, explicit\n * dependencies in modules, there are certain dependencies that are better\n * served being peer dependencies, such as react and styled-components.\n *\n * If these dependencies are not installed/declared, we want to prompt the user\n * whether or not to add them to `package.json` and install them\n */\nexport async function checkRequiredDependencies(context: CliCommandContext): Promise<CheckResult> {\n  const {workDir: studioPath, output} = context\n  const [studioPackageManifest, installedStyledComponentsVersion] = await Promise.all([\n    await readPackageManifest(path.join(studioPath, 'package.json'), defaultStudioManifestProps),\n    await readModuleVersion(studioPath, 'styled-components'),\n  ])\n\n  const wantedStyledComponentsVersionRange = peerDependencies['styled-components']\n\n  // The studio _must_ now declare `styled-components` as a dependency. If it's not there,\n  // we'll want to automatically _add it_ to the manifest and tell the user to reinstall\n  // dependencies before running whatever command was being run\n  const declaredStyledComponentsVersion = studioPackageManifest.dependencies['styled-components']\n  if (!declaredStyledComponentsVersion) {\n    const [file, ...args] = process.argv\n    const deps = {'styled-components': wantedStyledComponentsVersionRange}\n    await installDependencies(deps, context)\n\n    // Re-run the same command (sanity start/sanity build etc) after installation,\n    // as it can have shifted the entire `node_modules` folder around, result in\n    // broken assumptions about installation paths. This is a hack, and should be\n    // solved properly.\n    await execa(file, args, {cwd: studioPath, stdio: 'inherit'})\n    return {didInstall: true}\n  }\n\n  // Theoretically the version specified in package.json could be incorrect, eg `foo`\n  let minDeclaredStyledComponentsVersion: SemVer | null = null\n  try {\n    minDeclaredStyledComponentsVersion = semver.minVersion(declaredStyledComponentsVersion)\n  } catch (err) {\n    // Intentional fall-through (variable will be left as null, throwing below)\n  }\n\n  if (!minDeclaredStyledComponentsVersion) {\n    throw new Error(oneline`\n      Declared dependency \\`styled-components\\` has an invalid version range:\n      \\`${declaredStyledComponentsVersion}\\`.\n    `)\n  }\n\n  // The declared version should be semver-compatible with the version specified as a\n  // peer dependency in `sanity`. If not, we should tell the user to change it.\n  //\n  // Exception: Ranges are hard to compare. `>=5.0.0 && <=5.3.2 || ^6`... Comparing this\n  // to anything is going to be challenging, so only compare \"simple\" ranges/versions\n  // (^x.x.x / ~x.x.x / x.x.x)\n  if (\n    isComparableRange(declaredStyledComponentsVersion) &&\n    !semver.satisfies(minDeclaredStyledComponentsVersion, wantedStyledComponentsVersionRange)\n  ) {\n    output.warn(oneline`\n      Declared version of styled-components (${declaredStyledComponentsVersion})\n      is not compatible with the version required by sanity (${wantedStyledComponentsVersionRange}).\n      This might cause problems!\n    `)\n  }\n\n  // Ensure the studio has _installed_ a version of `styled-components`\n  if (!installedStyledComponentsVersion) {\n    throw new Error(oneline`\n      Declared dependency \\`styled-components\\` is not installed - run\n      \\`npm install\\` or \\`yarn\\` to install it before re-running this command.\n    `)\n  }\n\n  // The studio should have an _installed_ version of `styled-components`, and it should\n  // be semver compatible with the version specified in `sanity` peer dependencies.\n  if (!semver.satisfies(installedStyledComponentsVersion, wantedStyledComponentsVersionRange)) {\n    output.warn(oneline`\n      Installed version of styled-components (${installedStyledComponentsVersion})\n      is not compatible with the version required by sanity (${wantedStyledComponentsVersionRange}).\n      This might cause problems!\n    `)\n  }\n\n  return {didInstall: false}\n}\n\n/**\n * Reads the version number of the _installed_ module, or returns `null` if not found\n *\n * @param studioPath - Path of the studio\n * @param moduleName - Name of module to get installed version for\n * @returns Version number, of null\n */\nasync function readModuleVersion(studioPath: string, moduleName: string): Promise<string | null> {\n  const manifestPath = resolveFrom.silent(studioPath, path.join(moduleName, 'package.json'))\n  return manifestPath ? (await readPackageManifest(manifestPath)).version : null\n}\n\n/**\n * Read the `package.json` file at the given path and return an object that guarantees\n * the presence of name, version, dependencies, dev dependencies and peer dependencies\n *\n * @param packageJsonPath - Path to package.json to read\n * @returns Reduced package.json with guarantees for name, version and dependency fields\n */\nasync function readPackageManifest(\n  packageJsonPath: string,\n  defaults: Partial<PartialPackageManifest> = {}\n): Promise<PackageManifest> {\n  let manifest: unknown\n  try {\n    manifest = {...defaults, ...(await readPackageJson(packageJsonPath))}\n  } catch (err) {\n    throw new Error(`Failed to read \"${packageJsonPath}\": ${err.message}`)\n  }\n\n  if (!isPackageManifest(manifest)) {\n    throw new Error(`Failed to read \"${packageJsonPath}\": Invalid package manifest`)\n  }\n\n  const {name, version, dependencies = {}, devDependencies = {}} = manifest\n  return {name, version, dependencies, devDependencies}\n}\n\n/**\n * Install the passed dependencies at the given version/version range,\n * prompting the user whether to use yarn or npm. If a `yarn.lock` file\n * is found in the working directory, we will default the choice to yarn\n *\n * @param dependencies - Object of dependencies `({[package name]: version})`\n * @param context - CLI context\n */\nasync function installDependencies(\n  dependencies: Record<string, string>,\n  context: CliCommandContext\n): Promise<void> {\n  const {output, prompt, workDir, cliPackageManager} = context\n  const packages: string[] = []\n\n  output.print('The Sanity studio needs to install missing dependencies:')\n  for (const [pkgName, version] of Object.entries(dependencies)) {\n    const declaration = `${pkgName}@${version}`\n    output.print(`- ${declaration}`)\n    packages.push(declaration)\n  }\n\n  if (!cliPackageManager) {\n    output.error(\n      'ERROR: Could not determine package manager choice - run `npm install` or equivalent'\n    )\n    return\n  }\n\n  const {getPackageManagerChoice, installNewPackages} = cliPackageManager\n  const {mostOptimal, chosen: pkgManager} = await getPackageManagerChoice(workDir, {prompt})\n  if (mostOptimal && pkgManager !== mostOptimal) {\n    output.warn(\n      `WARN: This project appears to be installed with or using ${mostOptimal} - using a different package manager _may_ result in errors.`\n    )\n  }\n\n  await installNewPackages({packages, packageManager: pkgManager}, context)\n}\n\nfunction isPackageManifest(item: unknown): item is PartialPackageManifest {\n  return typeof item === 'object' && item !== null && 'name' in item && 'version' in item\n}\n\nfunction isComparableRange(range: string): boolean {\n  return /^[\\^~]?\\d+(\\.\\d+)?(\\.\\d+)?$/.test(range)\n}\n\nfunction readPackageJson(filePath: string): Promise<PackageJson> {\n  return readFile(filePath, 'utf8').then((res) => JSON.parse(res))\n}\n\ninterface PackageManifest extends DependencyDeclarations {\n  name: string\n  version: string\n}\n\ninterface PartialPackageManifest extends Partial<DependencyDeclarations> {\n  name: string\n  version: string\n}\n\ninterface DependencyDeclarations {\n  dependencies: Record<string, string | undefined>\n  devDependencies: Record<string, string | undefined>\n}\n","import {performance} from 'perf_hooks'\n\nexport interface TimeMeasurer {\n  start: (name: string) => void\n  end: (name: string) => number\n  getTimings: () => Record<string, number>\n}\n\nexport function getTimer(): TimeMeasurer {\n  const timings: Record<string, number> = {}\n  const startTimes: Record<string, number> = {}\n\n  function start(name: string): void {\n    if (typeof startTimes[name] !== 'undefined') {\n      throw new Error(`Timer \"${name}\" already started, cannot overwrite`)\n    }\n\n    startTimes[name] = performance.now()\n  }\n\n  function end(name: string): number {\n    if (typeof startTimes[name] === 'undefined') {\n      throw new Error(`Timer \"${name}\" never started, cannot end`)\n    }\n\n    timings[name] = performance.now() - startTimes[name]\n    return timings[name]\n  }\n\n  return {start, end, getTimings: () => timings}\n}\n"],"names":["PACKAGES","name","supported","deprecatedBelow","checkStudioDependencyVersions","workDir","manifest","readPackageJson","path","join","dependencies","devDependencies","packageInfo","map","pkg","dependency","manifestPath","resolveFrom","silent","installed","semver","coerce","version","replace","isUntested","satisfies","gtr","isUnsupported","isDeprecated","ltr","installedPackages","filter","inp","unsupported","deprecated","untested","length","console","warn","listPackages","getUpgradeInstructions","getDowngradeInstructions","error","process","exit","pkgs","inst","highestSupported","sort","rcompare","generateHelpUrl","filePath","JSON","parse","fs","readFileSync","err","Error","message","defaultStudioManifestProps","checkRequiredDependencies","context","studioPath","output","studioPackageManifest","installedStyledComponentsVersion","Promise","all","readPackageManifest","readModuleVersion","wantedStyledComponentsVersionRange","peerDependencies","declaredStyledComponentsVersion","file","args","argv","deps","installDependencies","execa","cwd","stdio","didInstall","minDeclaredStyledComponentsVersion","minVersion","oneline","isComparableRange","moduleName","packageJsonPath","defaults","isPackageManifest","prompt","cliPackageManager","packages","print","pkgName","Object","entries","declaration","push","getPackageManagerChoice","installNewPackages","mostOptimal","chosen","pkgManager","packageManager","item","range","test","readFile","then","res","getTimer","timings","startTimes","start","performance","now","end","getTimings"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,MAAMA,QAAW,GAAA,CACf;EAACC,MAAM,OAAP;EAAgBC,SAAA,EAAW,CAAC,KAAD,CAA3B;EAAoCC,iBAAiB;AAArD,CADe,EAEf;EAACF,MAAM,WAAP;EAAoBC,SAAA,EAAW,CAAC,KAAD,CAA/B;EAAwCC,iBAAiB;AAAzD,CAFe,CAAjB;;AAKO,SAASC,6BAAT,CAAuCC,OAAvC,EAA8D;EACnE,MAAMC,WAAWC,iBAAgB,CAAAC,aAAA,CAAA,SAAA,CAAAA,CAAKC,IAALD,CAAUH,OAAVG,EAAmB,cAAnBA,CAAA,CAAjC;;EACA,MAAME,+CAAmBJ,SAASI,eAAiBJ,SAASK,gBAA5D;;EAEA,MAAMC,WAAc,GAAAZ,QAAA,CAASa,GAAT,CAAcC,GAAD,IAA8B;IACvD,MAAAC,UAAA,GAAaL,aAAaI,GAAI,CAAAb,KAA9B;;IACN,IAAI,CAACc,UAAL,EAAiB;MACR,OAAA,KAAA;IACT;;IAEM,MAAAC,YAAA,GAAeC,oBAAAA,CAAAA,SAAAA,CAAAA,CAAYC,MAAZD,CAAmBZ,OAAnBY,EAA4BT,aAAAA,CAAAA,SAAAA,CAAAA,CAAKC,IAALD,CAAUM,GAAA,CAAIb,IAAdO,EAAoB,cAApBA,CAA5BS,CAAf;IACN,MAAME,YAAYC,eAAAA,CAAAA,SAAAA,CAAAA,CAAOC,MAAPD,CAChBJ,YAAA,GAAeT,kBAAgBS,aAAhBT,CAA8Be,OAA7C,GAAuDP,UAAW,CAAAQ,OAAX,CAAmB,QAAnB,EAA6B,EAA7B,CADvCH,CAAlB;;IAIA,IAAI,CAACD,SAAL,EAAgB;MACP,OAAA,KAAA;IACT;;IAEA,MAAMjB,SAAY,GAAAY,GAAA,CAAIZ,SAAJ,CAAcO,IAAd,CAAmB,MAAnB,CAAlB;IAMM,MAAAe,UAAA,GAAa,CAACJ,0BAAAA,CAAOK,SAAPL,CAAiBD,SAAjBC,EAA4BlB,SAA5BkB,CAAD,IAA2CA,0BAAAA,CAAOM,GAAPN,CAAWD,SAAXC,EAAsBlB,SAAtBkB,CAAxD;IAIN,MAAMO,gBAAgB,CAACP,0BAAAA,CAAOK,SAAPL,CAAiBD,SAAjBC,EAA4BlB,SAA5BkB,CAAD,IAA2C,CAACI,UAAlE;IAIM,MAAAI,YAAA,GAAed,IAAIX,eAAJ,GAAsBiB,eAAA,CAAA,SAAA,CAAAA,CAAOS,GAAPT,CAAWD,SAAXC,EAAsBN,GAAA,CAAIX,eAA1BiB,CAAtB,GAAmE,KAAlF;IAEC,uCACFN,GADE;MAELK,SAFK;MAGLQ,aAHK;MAILC,YAJK;MAKLJ;IALK;EAOR,CAtCmB,CAApB;EAwCA,MAAMM,oBAAoBlB,WAAY,CAAAmB,MAAZ,CAAoBC,GAAD,IAA6BA,QAAQ,KAAxD,CAA1B;EACA,MAAMC,cAAcH,iBAAkB,CAAAC,MAAlB,CAA0BjB,GAAD,IAASA,IAAIa,aAAtC,CAApB;EACM,MAAAO,UAAA,GAAaJ,kBAAkBC,MAAlB,CAA0BjB,GAAD,IAAS,CAACA,GAAA,CAAIa,aAAL,IAAsBb,GAAA,CAAIc,YAA5D,CAAb;EACN,MAAMO,WAAWL,iBAAkB,CAAAC,MAAlB,CAA0BjB,GAAD,IAASA,IAAIU,UAAtC,CAAjB;;EAEI,IAAAU,UAAA,CAAWE,MAAX,GAAoB,CAApB,EAAuB;IAEzBC,OAAA,CAAQC,IAAR,qGAGAC,aAAaL,WAHb,6EAOAM,uBAAuBN,WAPvB;EASF;;EAEI,IAAAC,QAAA,CAASC,MAAT,GAAkB,CAAlB,EAAqB;IAEvBC,OAAA,CAAQC,IAAR,+FAGAC,aAAaJ,SAHb,2EAOAM,yBAAyBN,SAPzB;EASF;;EAEI,IAAAF,WAAA,CAAYG,MAAZ,GAAqB,CAArB,EAAwB;IAE1BC,OAAA,CAAQK,KAAR,2GAGAH,aAAaN,YAHb,mBAKAO,uBAAuBP,YALvB;IAOAU,OAAA,CAAQC,IAAR,CAAa,CAAb;EACF;AACF;;AAEA,SAASL,YAAT,CAAsBM,IAAtB,EAA2C;EACzC,OAAOA,IACJ,CAAAhC,GADI,CAEFC,GAAD,cACKA,GAAA,CAAIb,IADT,0BAC6Ba,GAAA,CAAIK,SADjC,qBAEIL,GAAA,CAAIX,eAAJ,IAAuBW,GAAA,CAAIZ,SAAJ,CAAcO,IAAd,CAAmB,MAAnB,CAF3B,MAFG,EAOJA,IAPI,CAOC,MAPD,CAAP;AAQF;;AAEA,SAAS+B,sBAAT,CAAgCK,IAAhC,EAAqD;EACnD,MAAMC,IAAO,GAAAD,IAAA,CACVhC,GADU,CACLC,GAAD,IAAS;IACN,MAAA,CAACiC,gBAAD,IAAqBjC,GAAA,CAAIZ,SAAJ,CACxBW,GADwB,CACnBS,OAAD,KAAcF,0BAAAA,CAAOC,MAAPD,CAAcE,OAAdF,KAA0B;MAACE,SAAS;IAAV,GAAeA,OADnC,EAExB0B,IAFwB,CAEnB5B,0BAAAA,CAAO6B,QAFY,CAArB;IAIC,mBAAInC,IAAIb,IAAR,cAAgB8C,gBAAhB;EACR,CAPU,EAQVtC,IARU,CAQL,GARK,CAAb;EAUO,uDAEIqC,IAFJ,uCAMOA,IANP,8BAQMI,+BAAAA,CAAgB,kBAAhBA,CARN;AAST;;AAEA,SAAST,wBAAT,CAAkCI,IAAlC,EAAuD;EACrD,MAAMC,IAAO,GAAAD,IAAA,CACVhC,GADU,CACLC,GAAD,IAAS;IACN,MAAA,CAACiC,gBAAD,IAAqBjC,GAAA,CAAIZ,SAAJ,CACxBW,GADwB,CACnBS,OAAD,KAAcF,0BAAAA,CAAOC,MAAPD,CAAcE,OAAdF,KAA0B;MAACE,SAAS;IAAV,GAAeA,OADnC,EAExB0B,IAFwB,CAEnB5B,0BAAAA,CAAO6B,QAFY,CAArB;IAIC,mBAAInC,IAAIb,IAAR,cAAgB8C,gBAAhB;EACR,CAPU,EAQVtC,IARU,CAQL,GARK,CAAb;EAUO,yDAEIqC,IAFJ,uCAMOA,IANP;AAOT;;AAEA,SAASvC,iBAAT,CAAyB4C,QAAzB,EAAwD;EAClD,IAAA;IAEF,OAAOC,KAAKC,KAAL,CAAWC,WAAA,CAAA,SAAA,CAAAA,CAAGC,YAAHD,CAAgBH,QAAhBG,EAA0B,MAA1BA,CAAX,CAAP;GAFE,QAGKE,KAAP;IACA,MAAM,IAAIC,KAAJ,4BAA6BN,QAA7B,iBAA2CK,IAAIE,OAA/C,EAAN;EACF;AACF;;;;;;;AC9JA,MAAMC,0BAAqD,GAAA;EACzD1D,IAAM,EAAA,QADmD;EAEzDqB,OAAS,EAAA;AAFgD,CAA3D;;AAkBA,eAAsBsC,yBAAtB,CAAgDC,OAAhD,EAAkG;EAChG,MAAM;IAACxD,OAAA,EAASyD,UAAV;IAAsBC;EAAtB,IAAgCF,OAAtC;EACA,MAAM,CAACG,qBAAD,EAAwBC,gCAAxB,IAA4D,MAAMC,QAAQC,GAAR,CAAY,CAClF,MAAMC,mBAAoB,CAAA5D,aAAAA,CAAAA,SAAAA,CAAAA,CAAKC,IAALD,CAAUsD,UAAVtD,EAAsB,cAAtBA,CAAA,EAAuCmD,0BAAvC,CADwD,EAElF,MAAMU,iBAAkB,CAAAP,UAAA,EAAY,mBAAZ,CAF0D,CAAZ,CAAxE;EAKA,MAAMQ,qCAAqCC,gBAAiB,CAAA,mBAAA,CAA5D;EAKM,MAAAC,+BAAA,GAAkCR,sBAAsBtD,YAAtB,CAAmC,mBAAnC,CAAlC;;EACN,IAAI,CAAC8D,+BAAL,EAAsC;IACpC,MAAM,CAACC,IAAD,EAAC,GAASC,IAAV,IAAkB/B,OAAQ,CAAAgC,IAAhC;IACM,MAAAC,IAAA,GAAO;MAAC,qBAAqBN;IAAtB,CAAP;IACA,MAAAO,mBAAA,CAAoBD,IAApB,EAA0Bf,OAA1B,CAAA;IAMA,MAAAiB,cAAA,CAAA,SAAA,CAAAA,CAAML,IAANK,EAAYJ,IAAZI,EAAkB;MAACC,KAAKjB,UAAN;MAAkBkB,KAAA,EAAO;IAAzB,CAAlBF,CAAA;IACC,OAAA;MAACG,YAAY;IAAb,CAAA;EACT;;EAGA,IAAIC,kCAAoD,GAAA,IAAxD;;EACI,IAAA;IACmCA,kCAAA,GAAA9D,eAAA,CAAA,SAAA,CAAAA,CAAO+D,UAAP/D,CAAkBoD,+BAAlBpD,CAAA;GADnC,QAEKoC,KAAP,CAEF;;EAEA,IAAI,CAAC0B,kCAAL,EAAyC;IACvC,MAAM,IAAIzB,KAAJ,CAAU2B,2BAAV,wRAEAZ,+BAFA,EAAN;EAIF;;EASE,IAAAa,iBAAA,CAAkBb,+BAAlB,CAAA,IACA,CAACpD,0BAAAA,CAAOK,SAAPL,CAAiB8D,kCAAjB9D,EAAqDkD,kCAArDlD,CADD,EAEA;IACA2C,MAAA,CAAOzB,IAAP,CAAY8C,2BAAZ,yOAC2CZ,+BAD3C,EAE2DF,kCAF3D;EAKF;;EAGA,IAAI,CAACL,gCAAL,EAAuC;IACrC,MAAM,IAAIR,KAAJ,CAAU2B,2BAAV,4YAAN;EAIF;;EAIA,IAAI,CAAChE,eAAAA,CAAAA,SAAAA,CAAAA,CAAOK,SAAPL,CAAiB6C,gCAAjB7C,EAAmDkD,kCAAnDlD,CAAL,EAA6F;IAC3F2C,MAAA,CAAOzB,IAAP,CAAY8C,2BAAZ,0OAC4CnB,gCAD5C,EAE2DK,kCAF3D;EAKF;;EAEO,OAAA;IAACW,YAAY;EAAb,CAAA;AACT;;AASA,eAAeZ,iBAAf,CAAiCP,UAAjC,EAAqDwB,UAArD,EAAiG;EACzF,MAAAtE,YAAA,GAAeC,+BAAAA,CAAYC,MAAZD,CAAmB6C,UAAnB7C,EAA+BT,wBAAAA,CAAKC,IAALD,CAAU8E,UAAV9E,EAAsB,cAAtBA,CAA/BS,CAAf;EACN,OAAOD,YAAgB,GAAA,CAAA,MAAMoD,mBAAoB,CAAApD,YAAA,CAA1B,EAAyCM,OAAzC,GAAmD,IAA1E;AACF;;AASA,eAAe8C,mBAAf,CACEmB,eADF,EAG4B;EAAA,IAD1BC,QAC0B,uEADkB,EAClB;EACtB,IAAAlF,QAAA;;EACA,IAAA;IACFA,QAAA,mCAAekF,QAAf,GAA6B,MAAMjF,eAAA,CAAgBgF,eAAhB,CAAnC,CAAA;GADE,QAEK/B,KAAP;IACA,MAAM,IAAIC,KAAJ,4BAA6B8B,eAA7B,iBAAkD/B,IAAIE,OAAtD,EAAN;EACF;;EAEI,IAAA,CAAC+B,iBAAkB,CAAAnF,QAAA,CAAnB,EAA8B;IAC1B,MAAA,IAAImD,KAAJ,4BAA6B8B,eAA7B,kCAAA;EACR;;EAEM,MAAA;IAACtF,IAAD;IAAOqB,OAAP;IAAgBZ,YAAA,GAAe,EAA/B;IAAmCC,eAAA,GAAkB;EAArD,IAA2DL,QAA3D;EACN,OAAO;IAACL,IAAD;IAAOqB,OAAP;IAAgBZ,YAAhB;IAA8BC;EAA9B,CAAP;AACF;;AAUA,eAAekE,mBAAf,CACEnE,YADF,EAEEmD,OAFF,EAGiB;EACf,MAAM;IAACE,MAAD;IAAS2B,MAAT;IAAiBrF,OAAjB;IAA0BsF;EAA1B,IAA+C9B,OAArD;EACA,MAAM+B,WAAqB,EAA3B;EAEA7B,MAAA,CAAO8B,KAAP,CAAa,0DAAb;;EACA,KAAA,MAAW,CAACC,OAAD,EAAUxE,OAAV,CAAX,IAAiCyE,MAAO,CAAAC,OAAP,CAAetF,YAAf,CAAjC,EAA+D;IACvD,MAAAuF,WAAA,aAAiBH,OAAjB,cAA4BxE,OAA5B,CAAA;IACCyC,MAAA,CAAA8B,KAAA,aAAWI,WAAX;IACPL,QAAA,CAASM,IAAT,CAAcD,WAAd;EACF;;EAEA,IAAI,CAACN,iBAAL,EAAwB;IACf5B,MAAA,CAAArB,KAAA,CACL,qFADK;IAGP;EACF;;EAEM,MAAA;IAACyD,uBAAD;IAA0BC;EAA1B,IAAgDT,iBAAhD;EACA,MAAA;IAACU,WAAD;IAAcC,MAAA,EAAQC;EAAtB,IAAoC,MAAMJ,uBAAwB,CAAA9F,OAAA,EAAS;IAACqF;EAAD,CAAT,CAAlE;;EACF,IAAAW,WAAA,IAAeE,eAAeF,WAA9B,EAA2C;IACtCtC,MAAA,CAAAzB,IAAA,oEACuD+D,WADvD;EAGT;;EAEA,MAAMD,mBAAmB;IAACR,QAAD;IAAWY,cAAgB,EAAAD;EAA3B,GAAwC1C,QAAjE;AACF;;AAEA,SAAS4B,iBAAT,CAA2BgB,IAA3B,EAA0E;EACxE,OAAO,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,SAAS,IAArC,IAA6C,UAAUA,IAAvD,IAA+D,aAAaA,IAAnF;AACF;;AAEA,SAASpB,iBAAT,CAA2BqB,KAA3B,EAAmD;EAC1C,OAAA,8BAA8BC,IAA9B,CAAmCD,KAAnC,CAAA;AACT;;AAEA,SAASnG,eAAT,CAAyB4C,QAAzB,EAAiE;EACxD,OAAAyD,aAAAA,CAASzD,QAATyD,EAAmB,MAAnBA,EAA2BC,IAA3BD,CAAiCE,GAAD,IAAS1D,IAAA,CAAKC,KAAL,CAAWyD,GAAX,CAAzCF,CAAA;AACT;;AC/LO,SAASG,QAAT,GAAkC;EACvC,MAAMC,UAAkC,EAAxC;EACA,MAAMC,aAAqC,EAA3C;;EAEA,SAASC,KAAT,CAAejH,IAAf,EAAmC;IAC7B,IAAA,OAAOgH,UAAW,CAAAhH,IAAA,CAAlB,KAA4B,WAA5B,EAAyC;MACrC,MAAA,IAAIwD,KAAJ,mBAAoBxD,IAApB,0CAAA;IACR;;IAEWgH,UAAA,CAAAhH,IAAA,CAAA,GAAQkH,sBAAAA,CAAYC,GAAZD,EAAR;EACb;;EAEA,SAASE,GAAT,CAAapH,IAAb,EAAmC;IAC7B,IAAA,OAAOgH,UAAW,CAAAhH,IAAA,CAAlB,KAA4B,WAA5B,EAAyC;MACrC,MAAA,IAAIwD,KAAJ,mBAAoBxD,IAApB,kCAAA;IACR;;IAEA+G,OAAA,CAAQ/G,IAAR,CAAA,GAAgBkH,UAAA,CAAAA,WAAAA,CAAYC,GAAZD,KAAoBF,UAAW,CAAAhH,IAAA,CAA/C;IACA,OAAO+G,OAAQ,CAAA/G,IAAA,CAAf;EACF;;EAEA,OAAO;IAACiH,KAAD;IAAQG,GAAR;IAAaC,UAAA,EAAY,MAAMN;EAA/B,CAAP;AACF;;;;"}