'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var lodash = require('lodash');

var reactIs = require('react-is');

require('rxjs/operators');

require('@sanity/ui');

require('@sanity/bifur-client');

var React = require('react');

require('@sanity/schema');

require('@sanity/schema/_internal');

require('@sanity/validation');

var prepareConfig = require('./_prepareConfig-2f1df9bf.cjs');

require('rxjs');

require('react/jsx-runtime');

var icons = require('@sanity/icons');

require('history');

require('react-dom');

require('date-fns');

require('pluralize-esm');

require('react-rx');

require('@sanity/image-url');

require('@sanity/types');

require('shallow-equals');

require('@sanity/mutator');

require('json-reduce');

require('rxjs-exhaustmap-with-trailing');

require('@sanity/util/content');

require('@sanity/util/paths');

require('dataloader');

require('raf');

require('groq-js');

require('rxjs-etc/operators');

require('mendoza');

require('@sanity/diff');

require('@sanity/color');

require('react-fast-compare');

require('@sanity/portable-text-editor');

require('scroll-into-view-if-needed');

require('@reach/auto-id');

require('@sanity/util/legacyDateFormat');

require('speakingurl');

require('@sanity/uuid');

require('get-random-values-esm');

require('@sanity/asset-utils');

require('exif-component');

var DocumentTypeList = require('./_DocumentTypeList-03e0e0a7.cjs');

function useConfigContextFromSource(source) {
  const {
    projectId,
    dataset,
    schema,
    currentUser,
    getClient
  } = source;
  return React.useMemo(() => {
    const client = getClient({
      apiVersion: "2021-06-07"
    });
    const context = Object.defineProperty({
      projectId,
      dataset,
      schema,
      currentUser,
      getClient,
      client
    }, "client", {
      get() {
        console.warn('`configContext.client` is deprecated and will be removed in the next version! Use `configContext.getClient({apiVersion: "2021-06-07"})` instead.');
        return client;
      }

    });
    return context;
  }, [projectId, dataset, schema, currentUser, getClient]);
}

function getConfigContextFromSource(source) {
  const {
    projectId,
    dataset,
    schema,
    currentUser,
    getClient
  } = source;
  const client = getClient({
    apiVersion: "2021-06-07"
  });
  return {
    projectId,
    dataset,
    schema,
    currentUser,
    getClient,
    client
  };
}

function shouldShowIcon(schemaType) {
  const preview = schemaType.preview;
  return Boolean(preview && (preview.prepare || preview.select && preview.select.media));
}

const BUNDLED_DOC_TYPES = ["sanity.imageAsset", "sanity.fileAsset"];

function isBundledDocType(typeName) {
  return BUNDLED_DOC_TYPES.includes(typeName);
}

function isDocumentType(schemaType) {
  var _a;

  return ((_a = schemaType.type) == null ? void 0 : _a.name) === "document";
}

function isList(collection) {
  return collection.type === "list";
}

function getDocumentTypes(_ref) {
  let {
    schema
  } = _ref;
  return schema.getTypeNames().filter(n => {
    const schemaType = schema.get(n);
    return schemaType && isDocumentType(schemaType);
  }).filter(n => !isBundledDocType(n));
}

function getDocumentTypeListItems(context) {
  const types = getDocumentTypes(context);
  return types.map(typeName => getDocumentTypeListItem(context, typeName));
}

function getDocumentTypeListItem(context, typeName) {
  const {
    schema
  } = context;
  const type = schema.get(typeName);

  if (!type) {
    throw new Error("Schema type with name \"".concat(typeName, "\" not found"));
  }

  const title = type.title || lodash.startCase(typeName);
  return new DocumentTypeList.ListItemBuilder(context).id(typeName).title(title).schemaType(type).child((id, childContext) => {
    const parent = childContext.parent;
    const parentItem = isList(parent) ? parent.items.find(item => item.id === id) : null;
    let list = getDocumentTypeList(context, typeName);

    if (parentItem && parentItem.title) {
      list = list.title(parentItem.title);
    }

    return list;
  });
}

function getDocumentTypeList(context, typeNameOrSpec) {
  const {
    schema,
    resolveDocumentNode
  } = context;
  const schemaType = typeof typeNameOrSpec === "string" ? typeNameOrSpec : typeNameOrSpec.schemaType;
  const typeName = typeof schemaType === "string" ? schemaType : schemaType.name;
  const spec = typeof typeNameOrSpec === "string" ? {
    schemaType
  } : typeNameOrSpec;
  const type = schema.get(typeName);

  if (!type) {
    throw new Error("Schema type with name \"".concat(typeName, "\" not found"));
  }

  const title = type.title || lodash.startCase(typeName);
  const showIcons = shouldShowIcon(type);
  return new DocumentTypeList.DocumentTypeListBuilder(context).id(spec.id || typeName).title(spec.title || title).filter("_type == $type").params({
    type: typeName
  }).schemaType(type).showIcons(showIcons).defaultOrdering(prepareConfig.DEFAULT_SELECTED_ORDERING_OPTION.by).menuItemGroups(spec.menuItemGroups || [{
    id: "sorting",
    title: "Sort"
  }, {
    id: "layout",
    title: "Layout"
  }, {
    id: "actions",
    title: "Actions"
  }]).child(spec.child || (documentId => resolveDocumentNode({
    schemaType: typeName,
    documentId
  }))).canHandleIntent(spec.canHandleIntent || prepareConfig.defaultIntentChecker).menuItems(spec.menuItems || [...prepareConfig.getOrderingMenuItemsForSchemaType(context, type), new prepareConfig.MenuItemBuilder(context).group("layout").title("Compact view").icon(icons.StackCompactIcon).action("setLayout").params({
    layout: "default"
  }), new prepareConfig.MenuItemBuilder(context).group("layout").title("Detailed view").icon(icons.StackIcon).action("setLayout").params({
    layout: "detail"
  })]);
}

function hasIcon(schemaType) {
  if (!schemaType || typeof schemaType === "string") {
    return false;
  }

  return Boolean(schemaType.icon);
}

function getDefaultStructure(context) {
  const items = getDocumentTypeListItems(context);
  return new DocumentTypeList.ListBuilder(context).id("__root__").title("Content").items(items).showIcons(items.some(item => hasIcon(item.getSchemaType())));
}

function createStructureBuilder(_ref2) {
  let {
    defaultDocumentNode,
    source
  } = _ref2;
  const configContext = getConfigContextFromSource(source);

  const context = _objectSpread(_objectSpread({}, source), {}, {
    getStructureBuilder: () => structureBuilder,
    resolveDocumentNode: options => {
      let builder = (defaultDocumentNode == null ? void 0 : defaultDocumentNode(structureBuilder, _objectSpread(_objectSpread({}, options), configContext))) || new prepareConfig.DocumentBuilder(context);

      if (!builder.getId()) {
        builder = builder.id("documentEditor");
      }

      if (options.documentId) {
        builder = builder.documentId(prepareConfig.getPublishedId(options.documentId));
      }

      return builder.schemaType(options.schemaType);
    }
  });

  const structureBuilder = {
    defaults: () => getDefaultStructure(context),
    documentTypeList: function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return getDocumentTypeList(context, ...args);
    },
    documentTypeListItem: function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return getDocumentTypeListItem(context, ...args);
    },
    documentTypeListItems: function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return getDocumentTypeListItems(context, ...args);
    },
    document: function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return new prepareConfig.DocumentBuilder(context, ...args);
    },
    documentWithInitialValueTemplate: function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return prepareConfig.documentFromEditorWithInitialValue(context, ...args);
    },
    defaultDocument: context.resolveDocumentNode,
    list: function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      return new DocumentTypeList.ListBuilder(context, ...args);
    },
    listItem: function () {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      return new DocumentTypeList.ListItemBuilder(context, ...args);
    },
    menuItem: function () {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      return new prepareConfig.MenuItemBuilder(context, ...args);
    },
    menuItemGroup: function () {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      return new prepareConfig.MenuItemGroupBuilder(context, ...args);
    },
    menuItemsFromInitialValueTemplateItems: function () {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      return prepareConfig.menuItemsFromInitialValueTemplateItems(context, ...args);
    },
    documentList: function () {
      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        args[_key11] = arguments[_key11];
      }

      return new prepareConfig.DocumentListBuilder(context, ...args);
    },
    documentListItem: function () {
      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        args[_key12] = arguments[_key12];
      }

      return new DocumentTypeList.DocumentListItemBuilder(context, ...args);
    },
    orderingMenuItem: function () {
      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        args[_key13] = arguments[_key13];
      }

      return prepareConfig.getOrderingMenuItem(context, ...args);
    },
    orderingMenuItemsForType: function () {
      for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
        args[_key14] = arguments[_key14];
      }

      return prepareConfig.getOrderingMenuItemsForSchemaType(context, ...args);
    },
    editor: function () {
      for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
        args[_key15] = arguments[_key15];
      }

      return prepareConfig.documentFromEditor(context, ...args);
    },
    defaultInitialValueTemplateItems: function () {
      for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
        args[_key16] = arguments[_key16];
      }

      return prepareConfig.defaultInitialValueTemplateItems(context, ...args);
    },
    initialValueTemplateItem: (templateId, parameters) => new prepareConfig.InitialValueTemplateItemBuilder(context, {
      id: templateId,
      parameters,
      templateId
    }),
    component: spec => {
      return reactIs.isValidElementType(spec) ? new DocumentTypeList.ComponentBuilder().component(spec) : new DocumentTypeList.ComponentBuilder(spec);
    },
    divider: () => ({
      id: lodash.uniqueId("__divider__"),
      type: "divider"
    }),
    view: prepareConfig.views,
    context
  };
  return structureBuilder;
}

exports.createStructureBuilder = createStructureBuilder;
exports.useConfigContextFromSource = useConfigContextFromSource;
//# sourceMappingURL=_createStructureBuilder-ad600465.cjs.map
