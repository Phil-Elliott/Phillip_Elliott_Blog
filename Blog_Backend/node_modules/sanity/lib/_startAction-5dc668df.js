import path from 'path';
import { startDevServer } from '@sanity/server';
import { c as checkStudioDependencyVersions, a as checkRequiredDependencies, g as getTimer } from './_timing-9ab48a38.js';
import 'fs';
import 'semver';
import 'resolve-from';
import '@sanity/generate-help-url';
import 'fs/promises';
import 'execa';
import 'oneline';
import 'perf_hooks';

async function startSanityDevServer(args, context) {
  const timers = getTimer();
  const flags = args.extOptions;
  const {
    output,
    workDir,
    cliConfig
  } = context;
  timers.start("checkStudioDependencyVersions");
  checkStudioDependencyVersions(workDir);
  timers.end("checkStudioDependencyVersions");

  if ((await checkRequiredDependencies(context)).didInstall) {
    return;
  }

  const configSpinner = output.spinner("Checking configuration files...");
  const config = getDevServerConfig({
    flags,
    workDir,
    cliConfig
  });
  configSpinner.succeed();

  try {
    await startDevServer(config);
  } catch (err) {
    gracefulDeath(config.httpHost, config.httpPort, err);
  }
}

function getDevServerConfig(_ref) {
  let {
    flags,
    workDir,
    cliConfig
  } = _ref;

  var _a, _b, _c;

  const env = process.env;
  const httpHost = flags.host || env.SANITY_STUDIO_SERVER_HOSTNAME || ((_a = cliConfig == null ? void 0 : cliConfig.server) == null ? void 0 : _a.hostname) || "localhost";
  const httpPort = toInt(flags.port || env.SANITY_STUDIO_SERVER_PORT || ((_b = cliConfig == null ? void 0 : cliConfig.server) == null ? void 0 : _b.port), 3333);
  const basePath = env.SANITY_STUDIO_BASEPATH || ((_c = cliConfig == null ? void 0 : cliConfig.project) == null ? void 0 : _c.basePath) || "/";
  return {
    cwd: workDir,
    httpPort,
    httpHost,
    basePath,
    staticPath: path.join(workDir, "static"),
    vite: cliConfig == null ? void 0 : cliConfig.vite
  };
}

function gracefulDeath(httpHost, httpPort, err) {
  if (err.code === "EADDRINUSE") {
    throw new Error("Port number is already in use, configure `server.port` in `sanity.cli.js` or pass `--port <somePort>` to `sanity start`");
  }

  if (err.code === "EACCES") {
    const help = httpPort < 1024 ? "port numbers below 1024 requires root privileges" : "do you have access to listen to the given host (".concat(httpHost || "127.0.0.1", ")?");
    throw new Error("The studio server does not have access to listen to given port - ".concat(help));
  }

  throw err;
}

function toInt(value, defaultValue) {
  if (typeof value === "undefined") {
    return defaultValue;
  }

  const intVal = parseInt("".concat(value), 10);
  return Number.isFinite(intVal) ? intVal : defaultValue;
}

export { startSanityDevServer as default };
//# sourceMappingURL=_startAction-5dc668df.js.map
