{"version":3,"file":"_startAction-5dc668df.js","sources":["../src/cli/actions/start/startAction.ts"],"sourcesContent":["import path from 'path'\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore The `@sanity/server` may not be built yet.\nimport {DevServerOptions, startDevServer} from '@sanity/server'\nimport type {CliConfig, CliCommandArguments, CliCommandContext} from '@sanity/cli'\nimport {getTimer} from '../../util/timing'\nimport {checkStudioDependencyVersions} from '../../util/checkStudioDependencyVersions'\nimport {checkRequiredDependencies} from '../../util/checkRequiredDependencies'\n\nexport interface StartDevServerCommandFlags {\n  host?: string\n  port?: string\n}\n\nexport default async function startSanityDevServer(\n  args: CliCommandArguments<StartDevServerCommandFlags>,\n  context: CliCommandContext\n): Promise<void> {\n  const timers = getTimer()\n  const flags = args.extOptions\n  const {output, workDir, cliConfig} = context\n\n  timers.start('checkStudioDependencyVersions')\n  checkStudioDependencyVersions(workDir)\n  timers.end('checkStudioDependencyVersions')\n\n  // If the check resulted in a dependency install, the CLI command will be re-run,\n  // thus we want to exit early\n  if ((await checkRequiredDependencies(context)).didInstall) {\n    return\n  }\n\n  // Try to load CLI configuration from sanity.cli.(js|ts)\n  const configSpinner = output.spinner('Checking configuration files...')\n  const config = getDevServerConfig({flags, workDir, cliConfig})\n  configSpinner.succeed()\n\n  try {\n    await startDevServer(config)\n  } catch (err) {\n    gracefulDeath(config.httpHost, config.httpPort, err)\n  }\n}\n\n/**\n * Resolves the configuration for the dev server using:\n *\n * - CLI flags\n * - Environment variables\n * - User build config\n * - Default configuration\n */\nfunction getDevServerConfig({\n  flags,\n  workDir,\n  cliConfig,\n}: {\n  flags: StartDevServerCommandFlags\n  workDir: string\n  cliConfig?: CliConfig\n}): DevServerOptions {\n  // Order of preference: CLI flags, environment variables, user build config, default config\n  const env = process.env // eslint-disable-line no-process-env\n\n  const httpHost =\n    flags.host || env.SANITY_STUDIO_SERVER_HOSTNAME || cliConfig?.server?.hostname || 'localhost'\n\n  const httpPort = toInt(\n    flags.port || env.SANITY_STUDIO_SERVER_PORT || cliConfig?.server?.port,\n    3333\n  )\n\n  const basePath = env.SANITY_STUDIO_BASEPATH || cliConfig?.project?.basePath || '/'\n\n  return {\n    cwd: workDir,\n    httpPort,\n    httpHost,\n    basePath,\n    staticPath: path.join(workDir, 'static'),\n    vite: cliConfig?.vite,\n  }\n}\n\nfunction gracefulDeath(\n  httpHost: string | undefined,\n  httpPort: number,\n  err: Error & {code?: string}\n) {\n  if (err.code === 'EADDRINUSE') {\n    throw new Error(\n      'Port number is already in use, configure `server.port` in `sanity.cli.js` or pass `--port <somePort>` to `sanity start`'\n    )\n  }\n\n  if (err.code === 'EACCES') {\n    const help =\n      httpPort < 1024\n        ? 'port numbers below 1024 requires root privileges'\n        : `do you have access to listen to the given host (${httpHost || '127.0.0.1'})?`\n\n    throw new Error(`The studio server does not have access to listen to given port - ${help}`)\n  }\n\n  throw err\n}\n\nfunction toInt(value: string | number | undefined, defaultValue: number): number {\n  if (typeof value === 'undefined') {\n    return defaultValue\n  }\n\n  const intVal = parseInt(`${value}`, 10)\n  return Number.isFinite(intVal) ? intVal : defaultValue\n}\n"],"names":["startSanityDevServer","args","context","timers","getTimer","flags","extOptions","output","workDir","cliConfig","start","checkStudioDependencyVersions","end","checkRequiredDependencies","didInstall","configSpinner","spinner","config","getDevServerConfig","succeed","startDevServer","err","gracefulDeath","httpHost","httpPort","_a","_b","_c","env","process","host","SANITY_STUDIO_SERVER_HOSTNAME","server","hostname","toInt","port","SANITY_STUDIO_SERVER_PORT","basePath","SANITY_STUDIO_BASEPATH","project","cwd","staticPath","path","join","vite","code","Error","help","value","defaultValue","intVal","parseInt","Number","isFinite"],"mappings":"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"}