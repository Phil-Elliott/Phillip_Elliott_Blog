{"version":3,"file":"_deployApiAction-c1bb6197.cjs","sources":["../src/cli/util/getUrlHeaders.ts","../src/cli/actions/graphql/helpUrls.ts","../src/cli/actions/graphql/SchemaError.ts","../src/cli/actions/graphql/extractFromSanitySchema.ts","../src/cli/util/mockBrowserEnvironment.ts","../src/cli/util/getStudioConfig.ts","../src/cli/actions/graphql/getGraphQLAPIs.ts","../src/cli/actions/graphql/helpers.ts","../src/cli/actions/graphql/gen1/generateTypeFilters.ts","../src/cli/actions/graphql/gen1/generateTypeQueries.ts","../src/cli/actions/graphql/gen1/index.ts","../src/cli/actions/graphql/gen2/filters/booleanFilters.ts","../src/cli/actions/graphql/gen2/filters/dateFilters.ts","../src/cli/actions/graphql/gen2/filters/dateTimeFilters.ts","../src/cli/actions/graphql/gen2/filters/documentFilters.ts","../src/cli/actions/graphql/gen2/filters/floatFilters.ts","../src/cli/actions/graphql/gen2/filters/idFilters.ts","../src/cli/actions/graphql/gen2/filters/integerFilters.ts","../src/cli/actions/graphql/gen2/filters/stringFilters.ts","../src/cli/actions/graphql/gen2/generateTypeFilters.ts","../src/cli/actions/graphql/gen2/generateTypeSortings.ts","../src/cli/actions/graphql/gen2/generateTypeQueries.ts","../src/cli/actions/graphql/gen2/index.ts","../src/cli/actions/graphql/gen3/filters/documentFilters.ts","../src/cli/actions/graphql/gen3/generateTypeFilters.ts","../src/cli/actions/graphql/gen3/generateTypeSortings.ts","../src/cli/actions/graphql/gen3/generateTypeQueries.ts","../src/cli/actions/graphql/gen3/index.ts","../src/cli/actions/graphql/deployApiAction.ts"],"sourcesContent":["import getIt from 'get-it'\nimport {promise} from 'get-it/middleware'\n\nconst request = getIt([promise()])\n\nexport class HttpError extends Error {\n  statusCode?: number\n}\n\nexport async function getUrlHeaders(url: string, headers = {}): Promise<Record<string, string>> {\n  const response = await request({\n    url,\n    stream: true,\n    maxRedirects: 0,\n    method: 'HEAD',\n    headers,\n  })\n\n  if (response.statusCode >= 400) {\n    const error = new HttpError(`Request returned HTTP ${response.statusCode}`)\n    error.statusCode = response.statusCode\n    throw error\n  }\n\n  response.body.resume()\n  return response.headers\n}\n","export const SCHEMA_LIFT_ANONYMOUS_OBJECT_TYPE = 'schema-lift-anonymous-object-type'\n","import {upperFirst} from 'lodash'\nimport logSymbols from 'log-symbols'\nimport {generateHelpUrl} from '@sanity/generate-help-url'\nimport type {CliOutputter} from '@sanity/cli'\nimport type {SchemaValidationProblemGroup} from '@sanity/types'\n\n// eslint-disable-next-line no-console\nconst consoleOutputter = {error: (...args: unknown[]) => console.error(...args)}\n\nexport class SchemaError extends Error {\n  problemGroups: SchemaValidationProblemGroup[]\n\n  constructor(problemGroups: SchemaValidationProblemGroup[]) {\n    super('Schema errors encountered')\n    this.problemGroups = problemGroups\n  }\n\n  print(output: CliOutputter): void {\n    const logger = output || consoleOutputter\n    logger.error('Uh oh… found errors in schema:\\n')\n\n    this.problemGroups.forEach((group) => {\n      group.problems.forEach((problem) => {\n        const icon = logSymbols[problem.severity] || logSymbols.info\n        output.error(`  ${icon} ${upperFirst(problem.severity)}: ${getPath(group.path)}`)\n        output.error(`  ${problem.message}`)\n        if (problem.helpId) {\n          output.error(`  See ${generateHelpUrl(problem.helpId)}`)\n        }\n        output.error('')\n      })\n    })\n  }\n}\n\nfunction getPath(path: SchemaValidationProblemGroup['path']) {\n  return path\n    .map((segment) => {\n      if (segment.kind === 'type' && segment.name && segment.type) {\n        return `${segment.name} - (${segment.type})`\n      }\n      if (segment.kind === 'property' && segment.name) {\n        return segment.name\n      }\n      return null\n    })\n    .filter(Boolean)\n    .join(' / ')\n}\n","import {uniqBy, startCase} from 'lodash'\nimport type {\n  SchemaType,\n  Schema as CompiledSchema,\n  ReferenceSchemaType,\n  ObjectFieldType,\n  ObjectField,\n  ObjectSchemaType,\n  ArraySchemaType,\n} from '@sanity/types'\nimport {generateHelpUrl} from '@sanity/generate-help-url'\nimport Schema from '@sanity/schema'\nimport oneline from 'oneline'\nimport * as helpUrls from './helpUrls'\nimport {SchemaError} from './SchemaError'\nimport type {\n  ApiSpecification,\n  ConvertedFieldDefinition,\n  ConvertedInterface,\n  ConvertedType,\n  ConvertedUnion,\n} from './types'\n\nconst skipTypes = ['document', 'reference', 'crossDatasetReference']\nconst allowedJsonTypes = ['object', 'array']\nconst disallowedCustomizedMembers = ['object', 'array', 'image', 'file', 'block']\nconst disabledBlockFields = ['markDefs']\nconst scalars = ['string', 'number', 'boolean']\n\nfunction getBaseType(baseSchema: CompiledSchema, typeName: CompiledSchema.Type): SchemaType {\n  return Schema.compile({\n    types: (baseSchema._original?.types || []).concat([\n      {name: `__placeholder__`, type: typeName, options: {hotspot: true}},\n    ]),\n  }).get('__placeholder__')\n}\n\nfunction getTypeName(str: string): string {\n  const name = startCase(str).replace(/\\s+/g, '')\n  return name === 'Number' ? 'Float' : name\n}\n\nfunction isBaseType(type: SchemaType): boolean {\n  return (\n    type.name !== type.jsonType &&\n    allowedJsonTypes.includes(type.jsonType) &&\n    !skipTypes.includes(type.name) &&\n    !isReference(type) &&\n    !isCrossDatasetReference(type)\n  )\n}\n\nfunction isBlockType(typeDef: SchemaType | ObjectField): boolean {\n  if (typeDef.name === 'block') {\n    return true\n  }\n\n  if (typeDef.type) {\n    return isBlockType(typeDef.type)\n  }\n\n  return false\n}\n\nfunction hasBlockParent(typeDef: SchemaType): boolean {\n  if (typeDef.type && typeDef.type.name === 'block' && !typeDef.type.type) {\n    return true\n  }\n\n  return Boolean(typeDef.type && hasBlockParent(typeDef.type))\n}\n\nfunction isArrayOfBlocks(typeDef: SchemaType | ObjectField): boolean {\n  const type = typeDef.type || typeDef\n  if (!('jsonType' in type) || type.jsonType !== 'array') {\n    return false\n  }\n\n  return (type.of || []).some(hasBlockParent)\n}\n\nfunction isType(typeDef: SchemaType | ObjectField | ObjectFieldType, typeName: string): boolean {\n  let type: SchemaType | ObjectField | ObjectFieldType | undefined = typeDef\n  while (type) {\n    if (type.name === typeName || (type.type && type.type.name === typeName)) {\n      return true\n    }\n\n    type = type.type\n  }\n  return false\n}\n\nfunction isReference(\n  typeDef: SchemaType | ObjectField | ObjectFieldType\n): typeDef is ReferenceSchemaType {\n  return isType(typeDef, 'reference')\n}\n\nfunction isCrossDatasetReference(typeDef: SchemaType) {\n  return isType(typeDef, 'crossDatasetReference')\n}\n\nexport function extractFromSanitySchema(\n  sanitySchema: CompiledSchema,\n  extractOptions: {nonNullDocumentFields?: boolean} = {}\n): ApiSpecification {\n  const {nonNullDocumentFields} = extractOptions\n  const unionRecursionGuards: string[] = []\n  const hasErrors =\n    sanitySchema._validation &&\n    sanitySchema._validation.some((group) =>\n      group.problems.some((problem) => problem.severity === 'error')\n    )\n\n  if (hasErrors && Array.isArray(sanitySchema._validation)) {\n    throw new SchemaError(sanitySchema._validation)\n  }\n\n  const sanityTypes = sanitySchema._original?.types || []\n  const typeNames = sanitySchema.getTypeNames()\n  const unionTypes: ConvertedUnion[] = []\n  const types: ConvertedType[] = typeNames\n    .map((name) => sanitySchema.get(name))\n    .filter((schemaType): schemaType is SchemaType => Boolean(schemaType))\n    .filter(isBaseType)\n    .map((type) => convertType(type))\n\n  const withUnions = [...types, ...unionTypes]\n  return {types: withUnions, interfaces: [getDocumentInterfaceDefinition()]}\n\n  function isTopLevelType(typeName: string): boolean {\n    return typeNames.includes(typeName)\n  }\n\n  function mapFieldType(field: SchemaType | ObjectField | ObjectFieldType): string {\n    if (!field.type) {\n      throw new Error('Field has no type!')\n    }\n\n    const jsonType = 'jsonType' in field ? field.jsonType : ''\n    const isScalar = scalars.includes(jsonType)\n    if (isScalar && jsonType === 'number') {\n      return hasValidationFlag(field, 'integer') ? 'Int' : 'Float'\n    } else if (isScalar) {\n      return getTypeName(jsonType)\n    }\n\n    const type = field.type.type || field.type\n\n    // In the case of nested scalars, recurse (markdown -> longText -> text -> string)\n    if (type.type) {\n      return mapFieldType(type)\n    }\n\n    switch (type.name) {\n      case 'number':\n        return hasValidationFlag(field, 'integer') ? 'Int' : 'Float'\n      default:\n        return getTypeName(type.name)\n    }\n  }\n\n  function isArrayType(type: SchemaType | ObjectField): type is ArraySchemaType {\n    return Boolean(\n      ('jsonType' in type && type.jsonType === 'array') ||\n        (type.type && type.type.jsonType === 'array')\n    )\n  }\n\n  function _convertType(\n    type: SchemaType | ObjectField,\n    parent: string,\n    options: {isField?: boolean}\n  ): ConvertedType {\n    let name: string | undefined\n    if (type.type) {\n      name = type.type.name\n    } else if ('jsonType' in type) {\n      name = type.jsonType\n    }\n\n    if (isReference(type)) {\n      return getReferenceDefinition(type as ReferenceSchemaType, parent)\n    }\n\n    if (isArrayType(type)) {\n      return getArrayDefinition(type, parent, options)\n    }\n\n    if (name === 'document') {\n      return getDocumentDefinition(type as ObjectSchemaType)\n    }\n\n    if (name === 'block' || name === 'object') {\n      return getObjectDefinition(type, parent)\n    }\n\n    if (hasFields(type)) {\n      return getObjectDefinition(type, parent)\n    }\n\n    return {\n      type: mapFieldType(type),\n      description: getDescription(type),\n    } as any\n  }\n\n  function convertType(\n    type: SchemaType | ObjectField,\n    parent?: string,\n    props: {fieldName?: string} = {}\n  ): ConvertedType {\n    const mapped = _convertType(type, parent || '', {isField: Boolean(props.fieldName)})\n    const gqlName = props.fieldName || mapped.name\n    const originalName = type.name\n    const original = gqlName === originalName ? {} : {originalName: originalName}\n    return {...props, ...mapped, ...original}\n  }\n\n  function isField(def: SchemaType | ObjectField): def is ObjectField {\n    return !('jsonType' in def) || !def.jsonType\n  }\n\n  // eslint-disable-next-line complexity\n  function getObjectDefinition(def: SchemaType | ObjectField, parent?: string): ConvertedType {\n    const isInline = isField(def)\n    const isDocument = def.type ? def.type.name === 'document' : false\n    const actualType = isInline ? def.type : def\n\n    if (typeNeedsHoisting(actualType)) {\n      throw createLiftTypeError(def.name, parent || '', actualType.name)\n    }\n\n    if (isInline && parent && def.type.name === 'object') {\n      throw createLiftTypeError(def.name, parent)\n    }\n\n    if (parent && def.type && isTopLevelType(def.type.name)) {\n      return {type: getTypeName(def.type.name)} as any\n    }\n\n    const name = `${parent || ''}${getTypeName(def.name)}`\n    const fields = collectFields(def)\n    const firstUnprefixed = Math.max(\n      0,\n      fields.findIndex((field) => field.name[0] !== '_')\n    )\n\n    const keyField = createStringField('_key')\n\n    fields.splice(firstUnprefixed, 0, keyField)\n\n    if (!isDocument) {\n      fields.splice(firstUnprefixed + 1, 0, createStringField('_type'))\n    }\n\n    const objectIsBlock = isBlockType(def)\n    const objectFields = objectIsBlock\n      ? fields.filter((field) => !disabledBlockFields.includes(field.name))\n      : fields\n\n    return {\n      kind: 'Type',\n      name,\n      type: 'Object',\n      description: getDescription(def),\n      fields: objectFields.map((field) =>\n        isArrayOfBlocks(field)\n          ? buildRawField(field, name)\n          : (convertType(field, name, {fieldName: field.name}) as any)\n      ),\n    }\n  }\n\n  function buildRawField(field: ObjectField, parentName: string) {\n    return {\n      ...convertType(field, parentName, {fieldName: `${field.name}Raw`}),\n      type: 'JSON',\n      isRawAlias: true,\n    }\n  }\n\n  function createStringField(name: string): ObjectField {\n    return {\n      name,\n      type: {\n        jsonType: 'string',\n        name: 'string',\n        type: {name: 'string', type: undefined, jsonType: 'string'},\n      },\n    }\n  }\n\n  function collectFields(def: SchemaType | ObjectField) {\n    const fields = gatherAllFields(def)\n    if (fields.length > 0) {\n      return fields\n    }\n\n    const extended = getBaseType(sanitySchema, def.name as CompiledSchema.Type)\n    return gatherAllFields(extended)\n  }\n\n  function getReferenceDefinition(def: SchemaType, parent: string): any {\n    const base = {description: getDescription(def), isReference: true}\n    const candidates = arrayify(gatherAllReferenceCandidates(def))\n    if (candidates.length === 0) {\n      throw new Error('No candidates for reference')\n    }\n\n    return candidates.length === 1\n      ? {type: getTypeName(candidates[0].type.name), ...base}\n      : {...getUnionDefinition(candidates, def, {grandParent: parent}), ...base}\n  }\n\n  function getArrayDefinition(\n    def: ArraySchemaType,\n    parent: string,\n    options: {isField?: boolean} = {}\n  ): any {\n    const base = {description: getDescription(def), kind: 'List'}\n    const name = !options.isField && def.name ? {name: getTypeName(def.name)} : {}\n    const candidates = def.type?.type && 'of' in def.type ? arrayify(def.type.of) : def.of\n\n    return candidates.length === 1\n      ? {\n          children: getArrayChildDefinition(candidates[0], def),\n          ...base,\n          ...name,\n        }\n      : {\n          children: getUnionDefinition(candidates, def, {grandParent: parent}),\n          ...base,\n          ...name,\n        }\n  }\n\n  function getArrayChildDefinition(child: SchemaType, arrayDef: SchemaType) {\n    if (typeNeedsHoisting(child)) {\n      // Seems to be inline? Should be hoisted?\n      throw createLiftTypeError(child.name, arrayDef.name)\n    }\n\n    if (isReference(child)) {\n      return getReferenceDefinition(child, arrayDef.name)\n    }\n\n    // In the case of nested scalars, recurse (markdown -> longText -> text -> string)\n    if (scalars.includes(child.jsonType) && !scalars.includes(child.name)) {\n      return {type: mapFieldType(child)}\n    }\n\n    return {type: getTypeName(child.name)}\n  }\n\n  function typeNeedsHoisting(type: SchemaType & {isCustomized?: boolean}): boolean {\n    if (type.name === 'object') {\n      return true\n    }\n\n    if (type.jsonType === 'object' && !isTopLevelType(type.name)) {\n      return true\n    }\n\n    if (type.isCustomized && !isTopLevelType(type.name)) {\n      return true\n    }\n\n    if (type.isCustomized && disallowedCustomizedMembers.includes(type.name)) {\n      return true\n    }\n\n    return false\n  }\n\n  function getUnionDefinition(\n    candidates: ObjectSchemaType[],\n    parent: SchemaType,\n    options: {grandParent?: string} = {}\n  ) {\n    if (candidates.length < 2) {\n      throw new Error('Not enough candidates for a union type')\n    }\n\n    // #1482: When creating union definition do not get caught in recursion loop\n    // for types that reference themselves\n    const guardPathName = `${typeof parent === 'object' ? parent.name : parent}`\n    if (unionRecursionGuards.includes(guardPathName)) {\n      return {}\n    }\n\n    try {\n      unionRecursionGuards.push(guardPathName)\n\n      candidates.forEach((def, i) => {\n        if (typeNeedsHoisting(def)) {\n          throw createLiftTypeArrayError(\n            i,\n            parent.name,\n            def.type ? def.type.name : def.name,\n            options.grandParent\n          )\n        }\n      })\n\n      const converted = candidates.map((def) => convertType(def))\n\n      const getName = (def: {type: string | {name: string}}): string =>\n        typeof def.type === 'string' ? def.type : def.type.name\n\n      // We might end up with union types being returned - these needs to be flattened\n      // so that an ImageOr(PersonOrPet) becomes ImageOrPersonOrPet\n      const flattened = converted.reduce((acc, candidate) => {\n        const union = unionTypes.find((item) => item.name === candidate.type)\n        return union\n          ? acc.concat(union.types.map((type) => ({type, isReference: candidate.isReference})))\n          : acc.concat(candidate)\n      }, [] as {name?: string; type: string | {name: string}; isReference?: boolean}[])\n\n      const allCandidatesAreDocuments = flattened.every((def) => {\n        const typeDef = sanityTypes.find((type) => type.name === getName(def))\n        return typeDef && typeDef.type === 'document'\n      })\n\n      const interfaces = allCandidatesAreDocuments ? ['Document'] : undefined\n\n      const refs = flattened.filter((type) => type.isReference).map((ref) => ref.type)\n      const inlineObjs = flattened\n        .filter((type) => !type.isReference)\n        .map((type) => type.name || '')\n\n      // Here we remove duplicates, as they might appear twice due to in-line usage of types as well as references\n      const allTypeNames: string[] = flattened.map((type: any) => {\n        return type.isReference ? type.type : type.name\n      })\n\n      const possibleTypes = [...new Set(allTypeNames)].sort()\n\n      if (possibleTypes.length < 2) {\n        throw new Error(`Not enough types for a union type. Parent: ${parent.name}`)\n      }\n\n      const name = possibleTypes.join('Or')\n\n      if (!unionTypes.some((item) => item.name === name)) {\n        unionTypes.push({\n          kind: 'Union',\n          name,\n          types: possibleTypes,\n          interfaces,\n        })\n      }\n\n      const references = refs.length > 0 ? refs : undefined\n      const inlineObjects = inlineObjs.length > 0 ? inlineObjs : undefined\n      return isReference(parent)\n        ? {type: name, references}\n        : {type: name, references, inlineObjects}\n    } finally {\n      const parentIndex = unionRecursionGuards.indexOf(guardPathName)\n      if (parentIndex !== -1) {\n        unionRecursionGuards.splice(parentIndex, 1)\n      }\n    }\n  }\n\n  function getDocumentDefinition(def: ObjectSchemaType) {\n    const objectDef = getObjectDefinition(def)\n    const fields = getDocumentInterfaceFields().concat(objectDef.fields)\n\n    return {...objectDef, fields, interfaces: ['Document']}\n  }\n\n  function getDocumentInterfaceDefinition(): ConvertedInterface {\n    return {\n      kind: 'Interface',\n      name: 'Document',\n      description: 'A Sanity document',\n      fields: getDocumentInterfaceFields(),\n    }\n  }\n\n  function getDocumentInterfaceFields(): ConvertedFieldDefinition[] {\n    const isNullable = typeof nonNullDocumentFields === 'boolean' ? !nonNullDocumentFields : true\n    return [\n      {\n        fieldName: '_id',\n        type: 'ID',\n        isNullable,\n        description: 'Document ID',\n      },\n      {\n        fieldName: '_type',\n        type: 'String',\n        isNullable,\n        description: 'Document type',\n      },\n      {\n        fieldName: '_createdAt',\n        type: 'Datetime',\n        isNullable,\n        description: 'Date the document was created',\n      },\n      {\n        fieldName: '_updatedAt',\n        type: 'Datetime',\n        isNullable,\n        description: 'Date the document was last modified',\n      },\n      {\n        fieldName: '_rev',\n        type: 'String',\n        isNullable,\n        description: 'Current document revision',\n      },\n    ]\n  }\n\n  function arrayify(thing: unknown) {\n    if (Array.isArray(thing)) {\n      return thing\n    }\n\n    return thing === null || typeof thing === 'undefined' ? [] : [thing]\n  }\n\n  function hasValidationFlag(\n    field: SchemaType | ObjectField | ObjectFieldType,\n    flag: string\n  ): boolean {\n    return (\n      'validation' in field &&\n      Array.isArray(field.validation) &&\n      field.validation.some(\n        (rule) => rule && '_rules' in rule && rule._rules.some((item) => item.flag === flag)\n      )\n    )\n  }\n\n  function getDescription(type: SchemaType | ObjectField): string | undefined {\n    const description = type.type && type.type.description\n    return typeof description === 'string' ? description : undefined\n  }\n\n  function gatherAllReferenceCandidates(type: SchemaType): ObjectSchemaType[] {\n    const allFields = gatherReferenceCandidates(type)\n    return uniqBy(allFields, 'name')\n  }\n\n  function gatherReferenceCandidates(type: SchemaType): ObjectSchemaType[] {\n    const refTo = 'to' in type ? type.to : []\n    return 'type' in type && type.type ? [...gatherReferenceCandidates(type.type), ...refTo] : refTo\n  }\n\n  function gatherAllFields(type: SchemaType | ObjectField) {\n    const allFields = gatherFields(type)\n    return uniqBy(allFields, 'name')\n  }\n\n  function gatherFields(type: SchemaType | ObjectField): ObjectField[] {\n    if ('fields' in type) {\n      return type.type ? gatherFields(type.type).concat(type.fields) : type.fields\n    }\n\n    return []\n  }\n\n  function hasFieldsLikeShape(type: unknown): type is {fields: unknown} {\n    return typeof type === 'object' && type !== null && 'fields' in type\n  }\n\n  function hasArrayOfFields(type: unknown): type is {fields: ObjectField[]} {\n    return hasFieldsLikeShape(type) && Array.isArray(type.fields)\n  }\n\n  function hasFields(type: SchemaType | ObjectField): boolean {\n    if (hasArrayOfFields(type)) {\n      return gatherAllFields(type).length > 0\n    }\n\n    return 'type' in type && type.type ? hasFields(type.type) : false\n  }\n}\n\nfunction createLiftTypeArrayError(\n  index: number,\n  parent: string,\n  inlineType = 'object',\n  grandParent = ''\n) {\n  const helpUrl = generateHelpUrl(helpUrls.SCHEMA_LIFT_ANONYMOUS_OBJECT_TYPE)\n  const context = [grandParent, parent].filter(Boolean).join('/')\n  return new HelpfulError(\n    oneline`\n    Encountered anonymous inline ${inlineType} at index ${index} for type/field ${context}.\n    To use this type with GraphQL you will need to create a top-level schema type for it.\n    See ${helpUrl}`,\n    helpUrl\n  )\n}\n\nfunction createLiftTypeError(typeName: string, parent: string, inlineType = 'object') {\n  const helpUrl = generateHelpUrl(helpUrls.SCHEMA_LIFT_ANONYMOUS_OBJECT_TYPE)\n  return new HelpfulError(\n    oneline`\n    Encountered anonymous inline ${inlineType} \"${typeName}\" for field/type \"${parent}\".\n    To use this field with GraphQL you will need to create a top-level schema type for it.\n    See ${helpUrl}`,\n    helpUrl\n  )\n}\n\nclass HelpfulError extends Error {\n  helpUrl?: string\n\n  constructor(message: string, helpUrl?: string) {\n    super(message)\n    this.helpUrl = helpUrl\n  }\n}\n","import {addHook} from 'pirates'\nimport jsdomGlobal from 'jsdom-global'\nimport resolveFrom from 'resolve-from'\nimport {register as registerESBuild} from 'esbuild-register/dist/node'\n\nconst jsdomDefaultHtml = `<!doctype html>\n<html>\n  <head><meta charset=\"utf-8\"></head>\n  <body></body>\n</html>`\n\nexport function mockBrowserEnvironment(basePath: string): () => void {\n  // Guard against double-registering\n  if (global && global.window && '__mockedBySanity' in global.window) {\n    return () => {\n      /* intentional noop */\n    }\n  }\n\n  const domCleanup = jsdomGlobal(jsdomDefaultHtml, {url: 'http://localhost:3333/'})\n  const windowCleanup = () => global.window.close()\n  const globalCleanup = provideFakeGlobals(basePath)\n  const cleanupFileLoader = addHook(\n    (code, filename) => `module.exports = ${JSON.stringify(filename)}`,\n    {\n      ignoreNodeModules: false,\n      exts: getFileExtensions(),\n    }\n  )\n\n  const {unregister: unregisterESBuild} = registerESBuild({\n    target: 'node14',\n  })\n\n  return function cleanupBrowserEnvironment() {\n    unregisterESBuild()\n    cleanupFileLoader()\n    globalCleanup()\n    windowCleanup()\n    domCleanup()\n  }\n}\n\nconst getFakeGlobals = (basePath: string) => ({\n  __mockedBySanity: true,\n  requestAnimationFrame: setImmediate,\n  cancelAnimationFrame: clearImmediate,\n  requestIdleCallback: setImmediate,\n  cancelIdleCallback: clearImmediate,\n  InputEvent: global.window && global.window.InputEvent,\n  ace: tryGetAceGlobal(basePath),\n})\n\nfunction provideFakeGlobals(basePath: string): () => void {\n  const globalEnv = global as any as Record<string, unknown>\n  const globalWindow = global.window as Record<string, any>\n\n  const fakeGlobals = getFakeGlobals(basePath)\n  const stubbedGlobalKeys: string[] = []\n  const stubbedWindowKeys: string[] = []\n\n  for (const [rawKey, value] of Object.entries(fakeGlobals)) {\n    if (typeof value === 'undefined') {\n      continue\n    }\n\n    const key = rawKey as keyof typeof fakeGlobals\n\n    if (!(key in globalEnv)) {\n      globalEnv[key] = fakeGlobals[key]\n      stubbedGlobalKeys.push(key)\n    }\n\n    if (!(key in global.window)) {\n      globalWindow[key] = fakeGlobals[key]\n      stubbedWindowKeys.push(key)\n    }\n  }\n\n  return () => {\n    stubbedGlobalKeys.forEach((key) => {\n      delete globalEnv[key]\n    })\n\n    stubbedWindowKeys.forEach((key) => {\n      delete globalWindow[key]\n    })\n  }\n}\n\nfunction tryGetAceGlobal(basePath: string) {\n  // Work around an issue where using the @sanity/code-input plugin would crash\n  // due to `ace` not being defined on the global due to odd bundling stategy.\n  const acePath = resolveFrom.silent(basePath, 'ace-builds')\n  if (!acePath) {\n    return undefined\n  }\n\n  try {\n    // eslint-disable-next-line import/no-dynamic-require\n    return require(acePath)\n  } catch (err) {\n    return undefined\n  }\n}\n\nfunction getFileExtensions() {\n  return [\n    '.jpeg',\n    '.jpg',\n    '.png',\n    '.gif',\n    '.svg',\n    '.webp',\n    '.woff',\n    '.woff2',\n    '.ttf',\n    '.eot',\n    '.otf',\n  ]\n}\n","/* eslint-disable no-sync */\nimport fs from 'fs'\nimport path from 'path'\nimport {first} from 'rxjs/operators'\nimport {resolveConfig, Config, Workspace} from '../../config'\nimport {mockBrowserEnvironment} from './mockBrowserEnvironment'\n\nconst candidates = [\n  'sanity.config.js',\n  'sanity.config.jsx',\n  'sanity.config.ts',\n  'sanity.config.tsx',\n]\n\n/**\n * Note: Don't run this on the main thread, use it a forked process\n */\nexport async function getStudioConfig(options: {\n  configPath?: string\n  basePath: string\n}): Promise<Workspace[]> {\n  let workspaces: Workspace[] | undefined\n\n  const {basePath, configPath: cfgPath} = options\n\n  let cleanup\n  try {\n    cleanup = mockBrowserEnvironment(basePath)\n\n    let configPath = cfgPath\n    if (configPath && !fs.existsSync(configPath)) {\n      throw new Error(`Failed to find config at \"${cfgPath}\"`)\n    } else if (!configPath) {\n      configPath = candidates\n        .map((candidate) => path.join(basePath, candidate))\n        .find((candidate) => fs.existsSync(candidate))\n    }\n\n    if (!configPath) {\n      throw new Error(`Failed to resolve sanity.config.(js|ts) for base path \"${basePath}\"`)\n    }\n\n    let config: Config | undefined\n    try {\n      // eslint-disable-next-line import/no-dynamic-require\n      const mod = require(configPath)\n      config = mod.__esModule && mod.default ? mod.default : mod\n    } catch (err) {\n      throw new Error(`Failed to load configuration file \"${configPath}\":\\n${err.message}`)\n    }\n\n    if (!config) {\n      throw new Error('Configuration did not export expected config shape')\n    }\n\n    workspaces = await resolveConfig(config).pipe(first()).toPromise()\n  } catch (error) {\n    if (cleanup) {\n      cleanup()\n    }\n\n    throw error\n  }\n\n  cleanup()\n\n  if (!workspaces) {\n    throw new Error('Failed to resolve configuration')\n  }\n\n  return workspaces\n}\n","import {Worker, isMainThread, parentPort, workerData, MessagePort} from 'worker_threads'\nimport oneline from 'oneline'\nimport {isPlainObject} from 'lodash'\nimport type {CliCommandContext, CliV3CommandContext, GraphQLAPIConfig} from '@sanity/cli'\nimport type {Schema} from '@sanity/types'\nimport {getStudioConfig} from '../../util/getStudioConfig'\nimport {createSchema} from '../../../schema'\nimport type {Workspace} from '../../../config'\nimport type {SchemaDefinitionish} from './types'\n\ninterface ResolvedSerializableProperties {\n  projectId: string\n  dataset: string\n  schemaTypes: SchemaDefinitionish[]\n}\ninterface ResolvedSourceProperties {\n  projectId: string\n  dataset: string\n  schema: Schema\n}\n\nexport type TypeResolvedGraphQLAPI = Omit<GraphQLAPIConfig, 'workspace' | 'source'> &\n  ResolvedSerializableProperties\n\nexport type ResolvedGraphQLAPI = Omit<GraphQLAPIConfig, 'workspace' | 'source'> &\n  ResolvedSourceProperties\n\nif (!isMainThread && parentPort) {\n  getGraphQLAPIsForked(parentPort)\n}\n\nasync function getGraphQLAPIsForked(parent: MessagePort): Promise<void> {\n  const {cliConfig, cliConfigPath, workDir} = workerData\n  const resolved = await resolveGraphQLApis({cliConfig, cliConfigPath, workDir})\n  parent.postMessage(resolved)\n}\n\nexport async function getGraphQLAPIs(cliContext: CliCommandContext): Promise<ResolvedGraphQLAPI[]> {\n  if (!isModernCliConfig(cliContext)) {\n    throw new Error('Expected Sanity studio of version 3 or above')\n  }\n\n  if (!isMainThread) {\n    throw new Error('getGraphQLAPIs() must be called from the main thread')\n  }\n\n  const defaultSchema = createSchema({name: 'default', types: []})\n  const defaultTypes = defaultSchema.getTypeNames()\n  const isCustomType = (type: SchemaDefinitionish) => !defaultTypes.includes(type.name)\n\n  const apis = await getApisWithSchemaTypes(cliContext)\n  const resolved = apis.map(\n    ({schemaTypes, ...api}): ResolvedSourceProperties => ({\n      schema: createSchema({name: 'default', types: schemaTypes.filter(isCustomType)}),\n      ...api,\n    })\n  )\n\n  return resolved\n}\n\nfunction getApisWithSchemaTypes(cliContext: CliCommandContext): Promise<TypeResolvedGraphQLAPI[]> {\n  return new Promise<TypeResolvedGraphQLAPI[]>((resolve, reject) => {\n    const {cliConfig, cliConfigPath, workDir} = cliContext\n    const worker = new Worker(__filename, {workerData: {cliConfig, cliConfigPath, workDir}})\n    worker.on('message', resolve)\n    worker.on('error', reject)\n    worker.on('exit', (code) => {\n      if (code !== 0) reject(new Error(`Worker stopped with exit code ${code}`))\n    })\n  })\n}\n\nasync function resolveGraphQLApis({\n  cliConfig,\n  cliConfigPath,\n  workDir,\n}: Pick<CliV3CommandContext, 'cliConfig' | 'cliConfigPath' | 'workDir'>): Promise<\n  TypeResolvedGraphQLAPI[]\n> {\n  const workspaces = await getStudioConfig({basePath: workDir})\n  const numSources = workspaces.reduce(\n    (count, workspace) => count + workspace.unstable_sources.length,\n    0\n  )\n  const multiSource = numSources > 1\n  const multiWorkspace = workspaces.length > 1\n  const hasGraphQLConfig = Boolean(cliConfig?.graphql)\n\n  if (workspaces.length === 0) {\n    throw new Error('No studio configuration found')\n  }\n\n  if (numSources === 0) {\n    throw new Error('No sources (project ID / dataset) configured')\n  }\n\n  // We can only automatically configure if there is a single workspace + source in play\n  if ((multiWorkspace || multiSource) && !hasGraphQLConfig) {\n    throw new Error(oneline`\n      Multiple workspaces/sources configured.\n      You must define an array of GraphQL APIs in ${cliConfigPath || 'sanity.cli.js'}\n      and specify which workspace/source to use.\n    `)\n  }\n\n  // No config is defined, but we have a single workspace + source, so use that\n  if (!hasGraphQLConfig) {\n    const {projectId, dataset, schema} = workspaces[0].unstable_sources[0]\n    return [{schemaTypes: getStrippedSchemaTypes(schema), projectId, dataset}]\n  }\n\n  // Explicity defined config\n  const apiDefs = validateCliConfig(cliConfig?.graphql || [])\n  return resolveGraphQLAPIsFromConfig(apiDefs, workspaces)\n}\n\nfunction resolveGraphQLAPIsFromConfig(\n  apiDefs: GraphQLAPIConfig[],\n  workspaces: Workspace[]\n): TypeResolvedGraphQLAPI[] {\n  const resolvedApis: TypeResolvedGraphQLAPI[] = []\n\n  for (const apiDef of apiDefs) {\n    const {workspace: workspaceName, source: sourceName} = apiDef\n    if (!workspaceName && workspaces.length > 0) {\n      throw new Error(\n        'Must define `workspace` name in GraphQL API config when multiple workspaces are defined'\n      )\n    }\n\n    // If we only have a single workspace defined, we can assume that is the intended one,\n    // even if no `workspace` is defined for the GraphQL API\n    const workspace =\n      !workspaceName && workspaces.length === 1\n        ? workspaces[0]\n        : workspaces.find((space) => space.name === (workspaceName || 'default'))\n\n    if (!workspace) {\n      throw new Error(`Workspace \"${workspaceName || 'default'}\" not found`)\n    }\n\n    // If we only have a single source defined, we can assume that is the intended one,\n    // even if no `source` is defined for the GraphQL API\n    const source =\n      !sourceName && workspace.unstable_sources.length === 1\n        ? workspace.unstable_sources[0]\n        : workspace.unstable_sources.find((src) => src.name === (sourceName || 'default'))\n\n    if (!source) {\n      throw new Error(\n        `Source \"${sourceName || 'default'}\" not found in workspace \"${workspaceName || 'default'}\"`\n      )\n    }\n\n    resolvedApis.push({\n      ...apiDef,\n      dataset: source.dataset,\n      projectId: source.projectId,\n      schemaTypes: getStrippedSchemaTypes(source.schema),\n    })\n  }\n\n  return resolvedApis\n}\n\nfunction validateCliConfig(\n  config: GraphQLAPIConfig[],\n  configPath = 'sanity.cli.js'\n): GraphQLAPIConfig[] {\n  if (!Array.isArray(config)) {\n    throw new Error(`\"graphql\" key in \"${configPath}\" must be an array if defined`)\n  }\n\n  if (config.length === 0) {\n    throw new Error(`No GraphQL APIs defined in \"${configPath}\"`)\n  }\n\n  return config\n}\n\nfunction isModernCliConfig(config: CliCommandContext): config is CliV3CommandContext {\n  return config.sanityMajorVersion >= 3\n}\n\nfunction getStrippedSchemaTypes(schema: Schema): SchemaDefinitionish[] {\n  const schemaDef = schema._original || {types: []}\n  return schemaDef.types.map((type) => stripType(type))\n}\n\nfunction stripType(input: unknown): SchemaDefinitionish {\n  return strip(input) as SchemaDefinitionish\n}\n\nfunction strip(input: unknown): unknown {\n  if (Array.isArray(input)) {\n    return input.map((item) => strip(item)).filter((item) => typeof item !== 'undefined')\n  }\n\n  if (isPlainishObject(input)) {\n    return Object.keys(input).reduce((stripped, key) => {\n      stripped[key] = strip(input[key])\n      return stripped\n    }, {} as Record<string, unknown>)\n  }\n\n  return isBasicType(input) ? input : undefined\n}\n\nfunction isPlainishObject(input: unknown): input is Record<string, unknown> {\n  return isPlainObject(input)\n}\n\nfunction isBasicType(input: unknown): boolean {\n  const type = typeof input\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return true\n  }\n\n  if (type !== 'object') {\n    return false\n  }\n\n  return Array.isArray(input) || input === null || isPlainishObject(input)\n}\n","import type {\n  ConvertedDocumentType,\n  ConvertedInterface,\n  ConvertedType,\n  ConvertedUnion,\n} from './types'\n\nexport function isUnion(\n  type: ConvertedType | ConvertedUnion | ConvertedInterface\n): type is ConvertedUnion {\n  return type.kind === 'Union'\n}\n\nexport function isNonUnion(\n  type: ConvertedType | ConvertedUnion | ConvertedInterface\n): type is ConvertedType {\n  return !isUnion(type) && 'type' in type\n}\n\nexport function isDocumentType(\n  type: ConvertedType | ConvertedUnion | ConvertedInterface\n): type is ConvertedDocumentType {\n  return (\n    isNonUnion(type) &&\n    type.type === 'Object' &&\n    Array.isArray(type.interfaces) &&\n    type.interfaces.includes('Document')\n  )\n}\n","import {flatten} from 'lodash'\nimport {isNonUnion} from '../helpers'\nimport type {\n  ConvertedField,\n  ConvertedFieldDefinition,\n  ConvertedType,\n  ConvertedUnion,\n  InputFilterField,\n  InputObjectType,\n} from '../types'\n\ntype FilterCreator = (field: ConvertedField) => InputFilterField[]\n\nconst filterCreators: Record<string, FilterCreator> = {\n  ID: createIdFilters,\n  String: createStringFilters,\n  Url: createStringFilters,\n  Float: createNumberFilters,\n  Integer: createNumberFilters,\n  Boolean: createBooleanFilters,\n  Datetime: createDateFilters,\n  Date: createDateFilters,\n  Object: createObjectFilters,\n}\n\nexport function generateTypeFilters(types: (ConvertedType | ConvertedUnion)[]): InputObjectType[] {\n  const queryable = types\n    .filter(isNonUnion)\n    .filter(\n      (type) => type.type === 'Object' && type.interfaces && type.interfaces.includes('Document')\n    )\n\n  return queryable.map((type) => {\n    const name = `${type.name}Filter`\n    const fields = flatten(type.fields.map(createFieldFilters)).filter(Boolean)\n    return {name, kind: 'InputObject', fields: [...fields, ...getDocumentFilters()]}\n  })\n}\n\nfunction createFieldFilters(field: ConvertedField) {\n  if (filterCreators[field.type]) {\n    return filterCreators[field.type](field)\n  }\n\n  if (field.kind === 'List') {\n    return createListFilters()\n  }\n\n  if (field.isReference) {\n    return createReferenceFilters(field)\n  }\n\n  return createInlineTypeFilters()\n}\n\nfunction getFieldName(field: ConvertedField, modifier = '') {\n  const suffix = modifier ? `_${modifier}` : ''\n  return `${field.fieldName}${suffix}`\n}\n\nfunction getDocumentFilters(): InputFilterField[] {\n  return [\n    {\n      fieldName: 'references',\n      type: 'ID',\n      description: 'All documents references the given document ID',\n      constraint: {\n        comparator: 'REFERENCES',\n      },\n    },\n    {\n      fieldName: 'is_draft',\n      type: 'Boolean',\n      description: 'All documents that are drafts',\n      constraint: {\n        field: '_id',\n        comparator: 'IS_DRAFT',\n      },\n    },\n  ]\n}\n\nfunction createEqualityFilter(field: ConvertedFieldDefinition): InputFilterField {\n  return {\n    fieldName: getFieldName(field),\n    type: field.type,\n    description: 'All documents that are equal to given value',\n    constraint: {\n      field: field.fieldName,\n      comparator: 'EQUALS',\n    },\n  }\n}\n\nfunction createInequalityFilter(field: ConvertedFieldDefinition): InputFilterField {\n  return {\n    fieldName: getFieldName(field, 'not'),\n    type: field.type,\n    description: 'All documents that are not equal to given value',\n    constraint: {\n      field: field.fieldName,\n      comparator: 'NOT_EQUALS',\n    },\n  }\n}\n\nfunction createDefaultFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return [createEqualityFilter(field), createInequalityFilter(field)]\n}\n\nfunction createGtLtFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return [\n    {\n      fieldName: getFieldName(field, 'lt'),\n      type: field.type,\n      description: 'All documents are less than given value',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'LT',\n      },\n    },\n    {\n      fieldName: getFieldName(field, 'lte'),\n      type: field.type,\n      description: 'All documents are less than or equal to given value',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'LTE',\n      },\n    },\n    {\n      fieldName: getFieldName(field, 'gt'),\n      type: field.type,\n      description: 'All documents are greater than given value',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'GT',\n      },\n    },\n    {\n      fieldName: getFieldName(field, 'gte'),\n      type: field.type,\n      description: 'All documents are greater than or equal to given value',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'GTE',\n      },\n    },\n  ]\n}\n\nfunction createBooleanFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return createDefaultFilters(field)\n}\n\nfunction createIdFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return createStringFilters(field)\n}\n\nfunction createDateFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return createDefaultFilters(field).concat(createGtLtFilters(field))\n}\n\nfunction createStringFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return [\n    ...createDefaultFilters(field),\n    {\n      fieldName: getFieldName(field, 'matches'),\n      type: 'String',\n      description: 'All documents contain (match) the given word/words',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'MATCHES',\n      },\n    },\n    {\n      fieldName: getFieldName(field, 'in'),\n      kind: 'List',\n      children: {\n        type: 'String',\n        isNullable: false,\n      },\n      description: 'All documents match one of the given values',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'IN',\n      },\n    },\n    {\n      fieldName: getFieldName(field, 'not_in'),\n      kind: 'List',\n      children: {\n        type: 'String',\n        isNullable: false,\n      },\n      description: 'None of the values match any of the given values',\n      constraint: {\n        field: field.fieldName,\n        comparator: 'NOT_IN',\n      },\n    },\n  ]\n}\n\nfunction createNumberFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return createDefaultFilters(field).concat(createGtLtFilters(field))\n}\n\nfunction createObjectFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return []\n}\n\nfunction createListFilters(): InputFilterField[] {\n  return []\n}\n\nfunction createInlineTypeFilters(): InputFilterField[] {\n  return []\n}\n\nfunction createReferenceFilters(field: ConvertedFieldDefinition): InputFilterField[] {\n  return [\n    {\n      fieldName: getFieldName(field),\n      type: 'ID',\n      constraint: {\n        field: `${field.fieldName}._ref`,\n        comparator: 'EQUALS',\n      },\n    },\n  ]\n}\n","import pluralize from 'pluralize-esm'\nimport {startCase, upperFirst} from 'lodash'\nimport type {ConvertedType, ConvertedUnion, InputObjectType, QueryDefinition} from '../types'\nimport {isNonUnion} from '../helpers'\n\nfunction pluralizeTypeName(name: string): string {\n  const words = startCase(name).split(' ')\n  const last = words[words.length - 1]\n  const plural = pluralize(last.toLowerCase())\n  words[words.length - 1] = upperFirst(plural)\n  return words.join('')\n}\n\nexport function generateTypeQueries(\n  types: (ConvertedType | ConvertedUnion)[],\n  filters: InputObjectType[]\n): QueryDefinition[] {\n  const queries: QueryDefinition[] = []\n  const queryable = types\n    .filter(isNonUnion)\n    .filter(\n      (type) => type.type === 'Object' && type.interfaces && type.interfaces.includes('Document')\n    )\n\n  // Single ID-based result lookup queries\n  queryable.forEach((type) => {\n    queries.push({\n      fieldName: type.name,\n      type: type.name,\n      constraints: [\n        {\n          field: '_id',\n          comparator: 'EQUALS',\n          value: {kind: 'argumentValue', argName: 'id'},\n        },\n      ],\n      args: [\n        {\n          name: 'id',\n          description: `${type.name} document ID`,\n          type: 'ID',\n          isNullable: false,\n        },\n      ],\n    })\n  })\n\n  // Fetch all of type\n  queryable.forEach((type) => {\n    const filterName = `${type.name}Filter`\n    const hasFilter = filters.find((filter) => filter.name === filterName)\n    queries.push({\n      fieldName: `all${pluralizeTypeName(type.name)}`,\n      filter: `_type == \"${type.originalName || type.name}\"`,\n      type: {\n        kind: 'List',\n        isNullable: false,\n        children: {type: type.name, isNullable: false},\n      },\n      args: hasFilter\n        ? [{name: 'where', type: filterName, isFieldFilter: true}, ...getLimitOffsetArgs()]\n        : getLimitOffsetArgs(),\n    })\n  })\n\n  return queries\n}\n\nfunction getLimitOffsetArgs(): QueryDefinition['args'] {\n  return [\n    {\n      name: 'limit',\n      type: 'Int',\n      description: 'Max documents to return',\n      isFieldFilter: false,\n    },\n    {\n      name: 'offset',\n      type: 'Int',\n      description: 'Offset at which to start returning documents from',\n      isFieldFilter: false,\n    },\n  ]\n}\n","import {ApiSpecification, GeneratedApiSpecification} from '../types'\nimport {generateTypeFilters} from './generateTypeFilters'\nimport {generateTypeQueries} from './generateTypeQueries'\n\nexport default (extracted: ApiSpecification): GeneratedApiSpecification => {\n  const filters = generateTypeFilters(extracted.types)\n  const queries = generateTypeQueries(extracted.types, filters)\n  const types = [...extracted.types, ...filters]\n  return {types, queries, interfaces: extracted.interfaces, generation: 'gen1'}\n}\n","import type {InputObjectType} from '../../types'\n\nexport function createBooleanFilters(): InputObjectType {\n  return {\n    name: 'BooleanFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'Boolean',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'Boolean',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n    ],\n  }\n}\n","import type {InputObjectType} from '../../types'\n\nexport function createDateFilters(): InputObjectType {\n  return {\n    name: 'DateFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'Date',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'Date',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'gt',\n        type: 'Date',\n        description: 'Checks if the value is greater than the given input.',\n      },\n      {\n        fieldName: 'gte',\n        type: 'Date',\n        description: 'Checks if the value is greater than or equal to the given input.',\n      },\n      {\n        fieldName: 'lt',\n        type: 'Date',\n        description: 'Checks if the value is lesser than the given input.',\n      },\n      {\n        fieldName: 'lte',\n        type: 'Date',\n        description: 'Checks if the value is lesser than or equal to the given input.',\n      },\n    ],\n  }\n}\n","import type {InputObjectType} from '../../types'\n\nexport function createDateTimeFilters(): InputObjectType {\n  return {\n    name: 'DatetimeFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'Datetime',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'Datetime',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'gt',\n        type: 'Datetime',\n        description: 'Checks if the value is greater than the given input.',\n      },\n      {\n        fieldName: 'gte',\n        type: 'Datetime',\n        description: 'Checks if the value is greater than or equal to the given input.',\n      },\n      {\n        fieldName: 'lt',\n        type: 'Datetime',\n        description: 'Checks if the value is lesser than the given input.',\n      },\n      {\n        fieldName: 'lte',\n        type: 'Datetime',\n        description: 'Checks if the value is lesser than or equal to the given input.',\n      },\n    ],\n  }\n}\n","import type {InputObjectType} from '../../types'\n\nexport function createDocumentFilters(): InputObjectType {\n  return {\n    name: 'DocumentFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'references',\n        type: 'ID',\n        description: 'All documents referencing the given document ID.',\n      },\n      {\n        fieldName: 'is_draft',\n        type: 'Boolean',\n        description: 'All documents that are drafts.',\n      },\n    ],\n  }\n}\n","import type {InputObjectType} from '../../types'\n\nexport function createFloatFilters(): InputObjectType {\n  return {\n    name: 'FloatFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'Float',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'Float',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'gt',\n        type: 'Float',\n        description: 'Checks if the value is greater than the given input.',\n      },\n      {\n        fieldName: 'gte',\n        type: 'Float',\n        description: 'Checks if the value is greater than or equal to the given input.',\n      },\n      {\n        fieldName: 'lt',\n        type: 'Float',\n        description: 'Checks if the value is lesser than the given input.',\n      },\n      {\n        fieldName: 'lte',\n        type: 'Float',\n        description: 'Checks if the value is lesser than or equal to the given input.',\n      },\n    ],\n  }\n}\n","import type {InputObjectType} from '../../types'\n\nexport function createIdFilters(): InputObjectType {\n  return {\n    name: 'IDFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'ID',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'ID',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'matches',\n        type: 'ID',\n        description: 'Checks if the value matches the given word/words.',\n      },\n      {\n        fieldName: 'in',\n        kind: 'List',\n        children: {\n          type: 'ID',\n          isNullable: false,\n        },\n        description: 'Checks if the value is equal to one of the given values.',\n      },\n      {\n        fieldName: 'nin',\n        kind: 'List',\n        children: {\n          type: 'ID',\n          isNullable: false,\n        },\n        description: 'Checks if the value is not equal to one of the given values.',\n      },\n    ],\n  }\n}\n","import type {InputObjectType} from '../../types'\n\nexport function createIntegerFilters(): InputObjectType {\n  return {\n    name: 'IntFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'Int',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'Int',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'gt',\n        type: 'Int',\n        description: 'Checks if the value is greater than the given input.',\n      },\n      {\n        fieldName: 'gte',\n        type: 'Int',\n        description: 'Checks if the value is greater than or equal to the given input.',\n      },\n      {\n        fieldName: 'lt',\n        type: 'Int',\n        description: 'Checks if the value is lesser than the given input.',\n      },\n      {\n        fieldName: 'lte',\n        type: 'Int',\n        description: 'Checks if the value is lesser than or equal to the given input.',\n      },\n    ],\n  }\n}\n","import type {InputObjectType} from '../../types'\n\nexport function createStringFilters(): InputObjectType {\n  return {\n    name: 'StringFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'eq',\n        type: 'String',\n        description: 'Checks if the value is equal to the given input.',\n      },\n      {\n        fieldName: 'neq',\n        type: 'String',\n        description: 'Checks if the value is not equal to the given input.',\n      },\n      {\n        fieldName: 'matches',\n        type: 'String',\n        description: 'Checks if the value matches the given word/words.',\n      },\n      {\n        fieldName: 'in',\n        kind: 'List',\n        children: {\n          type: 'String',\n          isNullable: false,\n        },\n        description: 'Checks if the value is equal to one of the given values.',\n      },\n      {\n        fieldName: 'nin',\n        kind: 'List',\n        children: {\n          type: 'String',\n          isNullable: false,\n        },\n        description: 'Checks if the value is not equal to one of the given values.',\n      },\n    ],\n  }\n}\n","import type {ConvertedType, ConvertedUnion, InputObjectType} from '../types'\nimport {isNonUnion, isUnion} from '../helpers'\nimport {createBooleanFilters} from './filters/booleanFilters'\nimport {createDateFilters} from './filters/dateFilters'\nimport {createDateTimeFilters} from './filters/dateTimeFilters'\nimport {createDocumentFilters} from './filters/documentFilters'\nimport {createFloatFilters} from './filters/floatFilters'\nimport {createIdFilters} from './filters/idFilters'\nimport {createIntegerFilters} from './filters/integerFilters'\nimport {createStringFilters} from './filters/stringFilters'\n\nconst typeAliases: Record<string, string | undefined> = {\n  Url: 'String',\n  Text: 'String',\n  Email: 'String',\n}\n\ntype FilterCreator = () => InputObjectType\n\nconst filterCreators: Record<string, FilterCreator> = {\n  ID: createIdFilters,\n  String: createStringFilters,\n  Float: createFloatFilters,\n  Integer: createIntegerFilters,\n  Boolean: createBooleanFilters,\n  Datetime: createDateTimeFilters,\n  Date: createDateFilters,\n  Document: createDocumentFilters,\n}\n\nexport function generateTypeFilters(types: (ConvertedType | ConvertedUnion)[]): InputObjectType[] {\n  const builtInTypeKeys = Object.keys(filterCreators)\n  const builtinTypeValues = Object.values(filterCreators)\n  const objectTypes = types\n    .filter(isNonUnion)\n    .filter(\n      (type) =>\n        type.type === 'Object' &&\n        !['Block', 'Span'].includes(type.name) &&\n        !type.interfaces &&\n        !builtInTypeKeys.includes(type.type)\n    )\n\n  const unionTypes = types.filter(isUnion).map((type) => type.name)\n  const documentTypes = types\n    .filter(isNonUnion)\n    .filter(\n      (type) => type.type === 'Object' && type.interfaces && type.interfaces.includes('Document')\n    )\n\n  const builtinTypeFilters = createBuiltinTypeFilters(builtinTypeValues)\n  const objectTypeFilters = createObjectTypeFilters(objectTypes, {unionTypes})\n  const documentTypeFilters = createDocumentTypeFilters(documentTypes, {unionTypes})\n\n  return [...builtinTypeFilters, ...objectTypeFilters, ...documentTypeFilters]\n}\n\nfunction createBuiltinTypeFilters(builtinTypeValues: FilterCreator[]): InputObjectType[] {\n  return builtinTypeValues.map((filterCreator) => filterCreator())\n}\n\nfunction createObjectTypeFilters(\n  objectTypes: ConvertedType[],\n  options: {unionTypes: string[]}\n): InputObjectType[] {\n  return objectTypes.map((objectType) => ({\n    name: `${objectType.name}Filter`,\n    kind: 'InputObject',\n    fields: createFieldFilters(objectType, options),\n  }))\n}\n\nfunction createDocumentTypeFilters(\n  documentTypes: ConvertedType[],\n  options: {unionTypes: string[]}\n): InputObjectType[] {\n  return documentTypes.map((documentType) => ({\n    name: `${documentType.name}Filter`,\n    kind: 'InputObject',\n    fields: [...getDocumentFilters(), ...createFieldFilters(documentType, options)],\n  }))\n}\n\nfunction createFieldFilters(objectType: ConvertedType, options: {unionTypes: string[]}) {\n  const {unionTypes} = options\n  return objectType.fields\n    .filter(\n      (field) => field.type !== 'JSON' && field.kind !== 'List' && !unionTypes.includes(field.type)\n    )\n    .map((field) => ({\n      fieldName: field.fieldName,\n      type: `${typeAliases[field.type] || field.type}Filter`,\n      isReference: field.isReference,\n    }))\n}\n\nfunction getDocumentFilters() {\n  return [\n    {\n      fieldName: '_',\n      type: 'DocumentFilter',\n      description: 'Apply filters on document level',\n    },\n  ]\n}\n","import {isDocumentType, isNonUnion} from '../helpers'\nimport type {ConvertedEnum, ConvertedType, ConvertedUnion, InputObjectType} from '../types'\n\nconst builtInTypes = [\n  'Boolean',\n  'Date',\n  'Datetime',\n  'Email',\n  'Float',\n  'ID',\n  'Integer',\n  'String',\n  'Text',\n  'Url',\n]\n\nconst builtInSortingEnum: ConvertedEnum = {\n  name: 'SortOrder',\n  kind: 'Enum',\n  values: [\n    {\n      name: 'ASC',\n      description: 'Sorts on the value in ascending order.',\n      value: 1,\n    },\n    {\n      name: 'DESC',\n      description: 'Sorts on the value in descending order.',\n      value: 2,\n    },\n  ],\n}\n\nexport function generateTypeSortings(\n  types: (ConvertedType | ConvertedUnion)[]\n): (InputObjectType | ConvertedEnum)[] {\n  const objectTypes = types.filter(isNonUnion).filter(\n    (type) =>\n      type.type === 'Object' &&\n      !['Block', 'Span'].includes(type.name) && // TODO: What do we do with blocks?\n      !type.interfaces &&\n      !builtInTypes.includes(type.name)\n  )\n\n  const documentTypes = types.filter(isDocumentType)\n\n  const hasFields = (type: InputObjectType) => type.fields.length > 0\n\n  const objectTypeSortings = createObjectTypeSortings(objectTypes)\n  const documentTypeSortings = createDocumentTypeSortings(documentTypes)\n  const allSortings = [...objectTypeSortings, ...documentTypeSortings].filter(hasFields)\n\n  return [...allSortings, builtInSortingEnum]\n}\n\nfunction createObjectTypeSortings(objectTypes: ConvertedType[]): InputObjectType[] {\n  return objectTypes.map((objectType) => ({\n    name: `${objectType.name}Sorting`,\n    kind: 'InputObject',\n    fields: objectType.fields\n      .filter((field) => field.type !== 'JSON' && field.kind !== 'List')\n      .filter((field) => !field.isReference)\n      .map((field) => ({\n        fieldName: field.fieldName,\n        type: builtInTypes.includes(field.type) ? builtInSortingEnum.name : `${field.type}Sorting`,\n      })),\n  }))\n}\n\nfunction createDocumentTypeSortings(documentTypes: ConvertedType[]): InputObjectType[] {\n  return documentTypes.map((documentType) => ({\n    name: `${documentType.name}Sorting`,\n    kind: 'InputObject',\n    fields: documentType.fields\n      .filter((field) => field.type !== 'JSON' && field.kind !== 'List')\n      .filter((field) => !field.isReference)\n      .map((field) => ({\n        fieldName: field.fieldName,\n        type: builtInTypes.includes(field.type) ? builtInSortingEnum.name : `${field.type}Sorting`,\n      })),\n  }))\n}\n","import {upperFirst} from 'lodash'\nimport {isDocumentType} from '../helpers'\nimport type {ConvertedType, ConvertedUnion, InputObjectType, QueryDefinition} from '../types'\n\nexport function generateTypeQueries(\n  types: (ConvertedType | ConvertedUnion)[],\n  sortings: InputObjectType[]\n): QueryDefinition[] {\n  const queries: QueryDefinition[] = []\n  const queryable = types.filter(isDocumentType)\n  const isSortable = (type: ConvertedType) =>\n    sortings.some((sorting) => sorting.name === `${type.name}Sorting`)\n\n  // A document of any type\n  queries.push({\n    fieldName: 'Document',\n    type: 'Document',\n    constraints: [\n      {\n        field: '_id',\n        comparator: 'eq',\n        value: {kind: 'argumentValue', argName: 'id'},\n      },\n    ],\n    args: [\n      {\n        name: 'id',\n        description: 'Document ID',\n        type: 'ID',\n        isNullable: false,\n      },\n    ],\n  })\n\n  // Single ID-based result lookup queries\n  queryable.forEach((type) => {\n    queries.push({\n      fieldName: type.name,\n      type: type.name,\n      constraints: [\n        {\n          field: '_id',\n          comparator: 'eq',\n          value: {kind: 'argumentValue', argName: 'id'},\n        },\n      ],\n      args: [\n        {\n          name: 'id',\n          description: `${type.name} document ID`,\n          type: 'ID',\n          isNullable: false,\n        },\n      ],\n    })\n  })\n\n  // Fetch all of type\n  queryable.forEach((type) => {\n    const sorting: QueryDefinition['args'] = []\n    if (isSortable(type)) {\n      sorting.push({\n        name: 'sort',\n        type: {\n          kind: 'List',\n          isNullable: true,\n          children: {\n            type: `${type.name}Sorting`,\n            isNullable: false,\n          },\n        },\n      })\n    }\n\n    queries.push({\n      fieldName: `all${upperFirst(type.name)}`,\n      filter: `_type == \"${type.originalName || type.name}\"`,\n      type: {\n        kind: 'List',\n        isNullable: false,\n        children: {type: type.name, isNullable: false},\n      },\n      args: [\n        {\n          name: 'where',\n          type: `${type.name}Filter`,\n          isFieldFilter: true,\n        },\n        ...sorting,\n        {\n          name: 'limit',\n          type: 'Int',\n          description: 'Max documents to return',\n          isFieldFilter: false,\n        },\n        {\n          name: 'offset',\n          type: 'Int',\n          description: 'Offset at which to start returning documents from',\n          isFieldFilter: false,\n        },\n      ],\n    })\n  })\n\n  return queries\n}\n","import type {ApiSpecification, GeneratedApiSpecification, InputObjectType} from '../types'\nimport {generateTypeFilters} from './generateTypeFilters'\nimport {generateTypeSortings} from './generateTypeSortings'\nimport {generateTypeQueries} from './generateTypeQueries'\n\nexport default (extracted: ApiSpecification): GeneratedApiSpecification => {\n  const filters = generateTypeFilters(extracted.types)\n  const sortings = generateTypeSortings(extracted.types)\n  const queries = generateTypeQueries(\n    extracted.types,\n    sortings.filter((node): node is InputObjectType => node.kind === 'InputObject')\n  )\n  const types = [...extracted.types, ...filters, ...sortings]\n\n  return {types, queries, interfaces: extracted.interfaces, generation: 'gen2'}\n}\n","import type {InputObjectType} from '../../types'\n\nexport function createDocumentFilters(): InputObjectType {\n  return {\n    name: 'Sanity_DocumentFilter',\n    kind: 'InputObject',\n    isConstraintFilter: true,\n    fields: [\n      {\n        fieldName: 'references',\n        type: 'ID',\n        description: 'All documents referencing the given document ID.',\n      },\n      {\n        fieldName: 'is_draft',\n        type: 'Boolean',\n        description: 'All documents that are drafts.',\n      },\n    ],\n  }\n}\n","import type {ConvertedDocumentType, ConvertedType, ConvertedUnion, InputObjectType} from '../types'\nimport {isDocumentType, isNonUnion, isUnion} from '../helpers'\nimport {createBooleanFilters} from '../gen2/filters/booleanFilters'\nimport {createDateFilters} from '../gen2/filters/dateFilters'\nimport {createDateTimeFilters} from '../gen2/filters/dateTimeFilters'\nimport {createFloatFilters} from '../gen2/filters/floatFilters'\nimport {createIdFilters} from '../gen2/filters/idFilters'\nimport {createIntegerFilters} from '../gen2/filters/integerFilters'\nimport {createStringFilters} from '../gen2/filters/stringFilters'\nimport {createDocumentFilters} from './filters/documentFilters'\n\nconst typeAliases: Record<string, string | undefined> = {\n  Url: 'String',\n  Text: 'String',\n  Email: 'String',\n}\n\ntype FilterCreator = () => InputObjectType\n\nconst filterCreators: Record<string, FilterCreator> = {\n  ID: createIdFilters,\n  String: createStringFilters,\n  Float: createFloatFilters,\n  Integer: createIntegerFilters,\n  Boolean: createBooleanFilters,\n  Datetime: createDateTimeFilters,\n  Date: createDateFilters,\n  Document: createDocumentFilters,\n}\n\nexport function generateTypeFilters(types: (ConvertedType | ConvertedUnion)[]): InputObjectType[] {\n  const builtInTypeKeys = Object.keys(filterCreators)\n  const builtinTypeValues = Object.values(filterCreators)\n  const objectTypes = types.filter(isNonUnion).filter(\n    (type) =>\n      type.type === 'Object' &&\n      !['Block', 'Span'].includes(type.name) && // TODO: What do we do with blocks?\n      !type.interfaces &&\n      !builtInTypeKeys.includes(type.type)\n  )\n\n  const unionTypes = types.filter(isUnion).map((type) => type.name)\n  const documentTypes = types.filter(\n    (type): type is ConvertedDocumentType => type.name === 'Document' || isDocumentType(type)\n  )\n\n  const builtinTypeFilters = createBuiltinTypeFilters(builtinTypeValues)\n  const objectTypeFilters = createObjectTypeFilters(objectTypes, {unionTypes})\n  const documentTypeFilters = createDocumentTypeFilters(documentTypes, {unionTypes})\n\n  return builtinTypeFilters.concat(objectTypeFilters).concat(documentTypeFilters)\n}\n\nfunction createBuiltinTypeFilters(builtinTypeValues: FilterCreator[]): InputObjectType[] {\n  return builtinTypeValues.map((filterCreator) => filterCreator())\n}\n\nfunction createObjectTypeFilters(\n  objectTypes: ConvertedType[],\n  options: {unionTypes: string[]}\n): InputObjectType[] {\n  return objectTypes.map((objectType) => ({\n    name: `${objectType.name}Filter`,\n    kind: 'InputObject',\n    fields: createFieldFilters(objectType, options),\n  }))\n}\n\nfunction createDocumentTypeFilters(\n  documentTypes: ConvertedType[],\n  options: {unionTypes: string[]}\n): InputObjectType[] {\n  return documentTypes.map((documentType) => ({\n    name: `${documentType.name}Filter`,\n    kind: 'InputObject',\n    fields: [...getDocumentFilters(), ...createFieldFilters(documentType, options)],\n  }))\n}\n\nfunction createFieldFilters(objectType: ConvertedType, options: {unionTypes: string[]}) {\n  const {unionTypes} = options\n  if (!objectType.fields) {\n    return []\n  }\n\n  return objectType.fields\n    .filter(\n      (field) => field.type !== 'JSON' && field.kind !== 'List' && !unionTypes.includes(field.type)\n    )\n    .map((field) => ({\n      fieldName: field.fieldName,\n      type: `${typeAliases[field.type] || field.type}Filter`,\n      isReference: field.isReference,\n    }))\n}\n\nfunction getDocumentFilters() {\n  return [\n    {\n      fieldName: '_',\n      type: 'Sanity_DocumentFilter',\n      description: 'Apply filters on document level',\n    },\n  ]\n}\n","import {isDocumentType, isNonUnion} from '../helpers'\nimport type {\n  ConvertedDocumentType,\n  ConvertedEnum,\n  ConvertedType,\n  ConvertedUnion,\n  InputObjectType,\n} from '../types'\n\nconst builtInTypes = [\n  'Boolean',\n  'Date',\n  'Datetime',\n  'Email',\n  'Float',\n  'ID',\n  'Integer',\n  'String',\n  'Text',\n  'Url',\n]\n\nconst builtInSortingEnum: ConvertedEnum = {\n  name: 'SortOrder',\n  kind: 'Enum',\n  values: [\n    {\n      name: 'ASC',\n      description: 'Sorts on the value in ascending order.',\n      value: 1,\n    },\n    {\n      name: 'DESC',\n      description: 'Sorts on the value in descending order.',\n      value: 2,\n    },\n  ],\n}\n\nexport function generateTypeSortings(\n  types: (ConvertedType | ConvertedUnion)[]\n): (InputObjectType | ConvertedEnum)[] {\n  const objectTypes = types.filter(isNonUnion).filter(\n    (type) =>\n      type.type === 'Object' &&\n      !['Block', 'Span'].includes(type.name) && // TODO: What do we do with blocks?\n      !type.interfaces &&\n      !builtInTypes.includes(type.name)\n  )\n  const documentTypes = types.filter(\n    (type): type is ConvertedDocumentType => type.name === 'Document' || isDocumentType(type)\n  )\n\n  const hasFields = (type: InputObjectType) => type.fields.length > 0\n\n  const objectTypeSortings = createObjectTypeSortings(objectTypes)\n  const documentTypeSortings = createDocumentTypeSortings(documentTypes)\n  const allSortings = [...objectTypeSortings, ...documentTypeSortings].filter(hasFields)\n\n  return [...allSortings, builtInSortingEnum]\n}\n\nfunction createObjectTypeSortings(objectTypes: ConvertedType[]): InputObjectType[] {\n  return objectTypes.map((objectType) => ({\n    name: `${objectType.name}Sorting`,\n    kind: 'InputObject',\n    fields: objectType.fields\n      .filter((field) => field.type !== 'JSON' && field.kind !== 'List')\n      .filter((field) => !field.isReference)\n      .map((field) => ({\n        fieldName: field.fieldName,\n        type: builtInTypes.includes(field.type) ? builtInSortingEnum.name : `${field.type}Sorting`,\n      })),\n  }))\n}\n\nfunction createDocumentTypeSortings(documentTypes: ConvertedType[]): InputObjectType[] {\n  return documentTypes.map((documentType) => ({\n    name: `${documentType.name}Sorting`,\n    kind: 'InputObject',\n    fields: documentType.fields\n      .filter((field) => field.type !== 'JSON' && field.kind !== 'List')\n      .filter((field) => !field.isReference)\n      .map((field) => ({\n        fieldName: field.fieldName,\n        type: builtInTypes.includes(field.type) ? builtInSortingEnum.name : `${field.type}Sorting`,\n      })),\n  }))\n}\n","import {upperFirst} from 'lodash'\nimport {isDocumentType, isUnion} from '../helpers'\nimport type {ConvertedType, ConvertedUnion, InputObjectType, QueryDefinition} from '../types'\n\nexport function generateTypeQueries(\n  types: (ConvertedType | ConvertedUnion)[],\n  sortings: InputObjectType[]\n): QueryDefinition[] {\n  const queries: QueryDefinition[] = []\n  const documentTypes = types.filter(isDocumentType)\n\n  const documentTypeNames = documentTypes.map((docType) =>\n    JSON.stringify(docType.originalName || docType.name)\n  )\n  const documentsFilter = `_type in [${documentTypeNames.join(', ')}]`\n\n  const documentInterface = types.find((type) => type.name === 'Document')\n  if (!documentInterface || isUnion(documentInterface)) {\n    throw new Error('Failed to find document interface')\n  }\n\n  const queryable = [...documentTypes, documentInterface]\n  const isSortable = (type: ConvertedType) =>\n    sortings.some((sorting) => sorting.name === `${type.name}Sorting`)\n\n  // Single ID-based result lookup queries\n  queryable.forEach((type) => {\n    queries.push({\n      fieldName: type.name,\n      type: type.name,\n      constraints: [\n        {\n          field: '_id',\n          comparator: 'eq',\n          value: {kind: 'argumentValue', argName: 'id'},\n        },\n      ],\n      args: [\n        {\n          name: 'id',\n          description: `${type.name} document ID`,\n          type: 'ID',\n          isNullable: false,\n        },\n      ],\n    })\n  })\n\n  // Fetch all of type\n  queryable.forEach((type) => {\n    const sorting: QueryDefinition['args'] = []\n    if (isSortable(type)) {\n      sorting.push({\n        name: 'sort',\n        type: {\n          kind: 'List',\n          isNullable: true,\n          children: {\n            type: `${type.name}Sorting`,\n            isNullable: false,\n          },\n        },\n      })\n    }\n\n    queries.push({\n      fieldName: `all${upperFirst(type.name)}`,\n      filter:\n        type.name === 'Document' && type.kind === 'Interface'\n          ? documentsFilter\n          : `_type == ${JSON.stringify(type.originalName || type.name)}`,\n      type: {\n        kind: 'List',\n        isNullable: false,\n        children: {type: type.name, isNullable: false},\n      },\n      args: [\n        {\n          name: 'where',\n          type: `${type.name}Filter`,\n          isFieldFilter: true,\n        },\n        ...sorting,\n        {\n          name: 'limit',\n          type: 'Int',\n          description: 'Max documents to return',\n          isFieldFilter: false,\n        },\n        {\n          name: 'offset',\n          type: 'Int',\n          description: 'Offset at which to start returning documents from',\n          isFieldFilter: false,\n        },\n      ],\n    })\n  })\n\n  return queries\n}\n","import util from 'util'\n\nimport {isUnion} from '../helpers'\nimport type {\n  ApiSpecification,\n  ConvertedType,\n  GeneratedApiSpecification,\n  InputObjectType,\n} from '../types'\nimport {generateTypeFilters} from './generateTypeFilters'\nimport {generateTypeSortings} from './generateTypeSortings'\nimport {generateTypeQueries} from './generateTypeQueries'\n\nexport default (extracted: ApiSpecification): GeneratedApiSpecification => {\n  const documentInterface = extracted.interfaces.find((iface) => iface.name === 'Document')\n  if (!documentInterface || isUnion(documentInterface)) {\n    throw new Error('Failed to find document interface')\n  }\n\n  const types = [...extracted.types, documentInterface as ConvertedType]\n\n  const filters = generateTypeFilters(types)\n  const sortings = generateTypeSortings(types)\n  const queries = generateTypeQueries(\n    types,\n    sortings.filter((node): node is InputObjectType => node.kind === 'InputObject')\n  )\n  const graphqlTypes = [...extracted.types, ...filters, ...sortings]\n\n  return {types: graphqlTypes, queries, interfaces: extracted.interfaces, generation: 'gen3'}\n}\n","/* eslint-disable no-process-env, no-process-exit, max-statements */\nimport {get} from 'lodash'\nimport yargs from 'yargs/yargs'\nimport type {SanityClient} from '@sanity/client'\nimport type {CliCommandContext, CliOutputter, CliPrompter} from '@sanity/cli'\nimport {hideBin} from 'yargs/helpers'\nimport oneline from 'oneline'\n\nimport {debug} from '../../debug'\nimport {getUrlHeaders} from '../../util/getUrlHeaders'\nimport {extractFromSanitySchema} from './extractFromSanitySchema'\nimport {SchemaError} from './SchemaError'\nimport {getGraphQLAPIs} from './getGraphQLAPIs'\nimport {DeployResponse, GeneratedApiSpecification, ValidationResponse} from './types'\n\nimport gen1 from './gen1'\nimport gen2 from './gen2'\nimport gen3 from './gen3'\n\nconst latestGeneration = 'gen3'\nconst generations = {\n  gen1,\n  gen2,\n  gen3,\n}\n\nconst apiIdRegex = /^[a-z0-9_-]+$/\nconst isInteractive = process.stdout.isTTY && process.env.TERM !== 'dumb' && !('CI' in process.env)\n\nconst ignoredWarnings: string[] = ['OPTIONAL_INPUT_FIELD_ADDED']\nconst ignoredBreaking: string[] = []\n\ninterface DeployTask {\n  dataset: string\n  projectId: string\n  tag: string\n  enablePlayground: boolean\n  schema: GeneratedApiSpecification\n}\n\n// eslint-disable-next-line complexity\nexport default async function deployGraphQLApiAction(\n  args: {argv?: string[]},\n  context: CliCommandContext\n): Promise<void> {\n  // Reparsing CLI flags for better control of binary flags\n  const flags = await parseCliFlags(args)\n  const {force, dryRun, api: onlyApis} = flags\n\n  const {apiClient, output, prompt} = context\n\n  let spinner\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: true,\n  })\n\n  const apiDefs = await getGraphQLAPIs(context)\n  const deployTasks: DeployTask[] = []\n\n  const apiNames = new Set<string>()\n  const apiIds = new Set<string>()\n  for (const apiDef of apiDefs) {\n    const apiName = [apiDef.dataset, apiDef.tag || 'default'].join('/')\n    if (apiNames.has(apiName)) {\n      throw new Error(`Multiple GraphQL APIs with the same dataset and tag found (${apiName})`)\n    }\n\n    if (apiDef.id) {\n      if (typeof apiDef.id !== 'string' || !apiIdRegex.test(apiDef.id)) {\n        throw new Error(\n          `Invalid GraphQL API id \"${apiDef.id}\" - only a-z, 0-9, underscore and dashes are allowed`\n        )\n      }\n\n      if (apiIds.has(apiDef.id)) {\n        throw new Error(`Multiple GraphQL APIs with the same ID found (${apiDef.id})`)\n      }\n\n      apiIds.add(apiDef.id)\n    }\n\n    apiNames.add(apiName)\n  }\n\n  for (const apiId of onlyApis || []) {\n    if (!apiDefs.some((apiDef) => apiDef.id === apiId)) {\n      throw new Error(`GraphQL API with id \"${apiId}\" not found`)\n    }\n  }\n\n  if (onlyApis) {\n    output.warn(`Deploying only specified APIs: ${onlyApis.join(', ')}`)\n  }\n\n  let index = -1\n  for (const apiDef of apiDefs) {\n    if (onlyApis && (!apiDef.id || !onlyApis.includes(apiDef.id))) {\n      continue\n    }\n\n    index++\n\n    const {projectId, dataset, playground, tag = 'default', nonNullDocumentFields, schema} = apiDef\n    const apiName = [dataset, tag].join('/')\n    spinner = output.spinner(`Generating GraphQL API: ${apiName}`).start()\n\n    let generation: string | undefined = apiDef.generation\n    if (!dataset) {\n      throw new Error(`No dataset specified for API at index ${index}`)\n    }\n\n    const projectClient = client.clone().config({projectId})\n    const {currentGeneration, playgroundEnabled} = await getCurrentSchemaProps(\n      projectClient,\n      dataset,\n      tag\n    )\n    generation = await resolveApiGeneration({\n      currentGeneration,\n      specifiedGeneration: generation,\n      index,\n      force,\n      output,\n      prompt,\n    })\n\n    if (!generation) {\n      // User cancelled\n      spinner.fail()\n      continue\n    }\n\n    if (!isRecognizedApiGeneration(generation)) {\n      throw new Error(`Unknown API generation \"${generation}\" for API at index ${index}`)\n    }\n\n    const enablePlayground = await shouldEnablePlayground({\n      dryRun,\n      spinner,\n      playgroundConfiguration: playground,\n      playgroundCurrentlyEnabled: playgroundEnabled,\n      prompt,\n    })\n\n    let apiSpec: GeneratedApiSpecification\n    try {\n      const generateSchema = generations[generation]\n      const extracted = extractFromSanitySchema(schema, {\n        nonNullDocumentFields,\n      })\n\n      apiSpec = generateSchema(extracted)\n    } catch (err) {\n      spinner.fail()\n\n      if (err instanceof SchemaError) {\n        err.print(output)\n        process.exit(1) // eslint-disable-line no-process-exit\n      }\n\n      throw err\n    }\n\n    let valid: ValidationResponse | undefined\n    try {\n      valid = await projectClient.request<ValidationResponse>({\n        url: `/apis/graphql/${dataset}/${tag}/validate`,\n        method: 'POST',\n        body: {enablePlayground, schema: apiSpec},\n        maxRedirects: 0,\n      })\n    } catch (err) {\n      const validationError = get(err, 'response.body.validationError')\n      spinner.fail()\n      throw validationError ? new Error(validationError) : err\n    }\n\n    // when the result is not valid and there are breaking changes afoot!\n    if (!isResultValid(valid, {spinner, force})) {\n      // not valid and a dry run? then it can exit with a error\n      if (dryRun) {\n        spinner.fail()\n        renderBreakingChanges(valid, output)\n        process.exit(1)\n      }\n\n      if (!isInteractive) {\n        spinner.fail()\n        renderBreakingChanges(valid, output)\n        throw new Error(\n          'Dangerous changes found - falling back. Re-run the command with the `--force` flag to force deployment.'\n        )\n      }\n\n      spinner.stop()\n      renderBreakingChanges(valid, output)\n      const shouldDeploy = await prompt.single({\n        type: 'confirm',\n        message: 'Do you want to deploy a new API despite the dangerous changes?',\n        default: false,\n      })\n\n      if (!shouldDeploy) {\n        spinner.fail()\n        continue\n      }\n\n      spinner.succeed()\n    } else if (dryRun) {\n      spinner.succeed()\n      output.print('GraphQL API is valid and has no breaking changes')\n      process.exit(0)\n    }\n\n    deployTasks.push({\n      projectId,\n      dataset,\n      tag,\n      enablePlayground,\n      schema: apiSpec,\n    })\n  }\n\n  // Give some space for deployment tasks\n  output.print('')\n\n  for (const task of deployTasks) {\n    const {dataset, tag, schema, projectId, enablePlayground} = task\n\n    output.print(`Project: ${projectId}`)\n    output.print(`Dataset: ${dataset}`)\n    output.print(`Tag:     ${tag}`)\n\n    spinner = output.spinner('Deploying GraphQL API').start()\n\n    try {\n      const projectClient = client.clone().config({projectId})\n      const response = await projectClient.request<DeployResponse>({\n        url: `/apis/graphql/${dataset}/${tag}`,\n        method: 'PUT',\n        body: {enablePlayground, schema},\n        maxRedirects: 0,\n      })\n\n      spinner.stop()\n      const apiUrl = projectClient.getUrl(\n        response.location.replace(/^\\/(v1|v\\d{4}-\\d{2}-\\d{2})\\//, '/')\n      )\n      output.print(`URL:     ${apiUrl}`)\n      spinner.start('Deployed!').succeed()\n      output.print('')\n    } catch (err) {\n      spinner.fail()\n      throw err\n    }\n  }\n\n  // Because of side effects when loading the schema, we can end up in situations where\n  // the API has been successfully deployed, but some timer or other handle is keeping\n  // the process from naturally exiting.\n  process.exit(0)\n}\n\nasync function shouldEnablePlayground({\n  dryRun,\n  spinner,\n  playgroundConfiguration,\n  playgroundCurrentlyEnabled,\n  prompt,\n}: {\n  dryRun: boolean\n  spinner: ReturnType<CliCommandContext['output']['spinner']>\n  playgroundConfiguration?: boolean\n  playgroundCurrentlyEnabled?: boolean\n  prompt: CliCommandContext['prompt']\n}): Promise<boolean> {\n  // On a dry run, it doesn't matter, return true 🤷‍♂️\n  if (dryRun) {\n    return true\n  }\n\n  // If explicitly set true/false in configuration, use that\n  if (typeof playgroundConfiguration !== 'undefined') {\n    return playgroundConfiguration\n  }\n\n  // If API is already deployed, use the current state\n  if (typeof playgroundCurrentlyEnabled !== 'undefined') {\n    return playgroundCurrentlyEnabled\n  }\n\n  // If no API is deployed, default to true if non-interactive\n  if (!isInteractive) {\n    return true\n  }\n\n  // Interactive environment, so prompt the user\n  const prevText = spinner.text\n  spinner.warn()\n  const shouldDeploy = await prompt.single<boolean>({\n    type: 'confirm',\n    message: 'Do you want to enable a GraphQL playground?',\n    default: true,\n  })\n  spinner.clear().start(prevText)\n\n  return shouldDeploy\n}\n\nasync function getCurrentSchemaProps(\n  client: SanityClient,\n  dataset: string,\n  tag: string\n): Promise<{\n  currentGeneration?: string\n  playgroundEnabled?: boolean\n}> {\n  try {\n    const res = await getUrlHeaders(client.getUrl(`/apis/graphql/${dataset}/${tag}`), {\n      Authorization: `Bearer ${client.config().token}`,\n    })\n\n    return {\n      currentGeneration: res['x-sanity-graphql-generation'],\n      playgroundEnabled: res['x-sanity-graphql-playground'] === 'true',\n    }\n  } catch (err) {\n    if (err.statusCode === 404) {\n      return {}\n    }\n\n    throw err\n  }\n}\n\nfunction parseCliFlags(args: {argv?: string[]}) {\n  return yargs(hideBin(args.argv || process.argv).slice(2))\n    .option('api', {type: 'string', array: true})\n    .option('dataset', {type: 'string'})\n    .option('tag', {type: 'string', default: 'default'})\n    .option('generation', {type: 'string'})\n    .option('non-null-document-fields', {type: 'boolean', default: false})\n    .option('playground', {type: 'boolean'})\n    .option('dry-run', {type: 'boolean', default: false})\n    .option('force', {type: 'boolean'}).argv\n}\n\nfunction isResultValid(\n  valid: ValidationResponse,\n  {spinner, force}: {spinner: any; force?: boolean}\n) {\n  const {validationError, breakingChanges: breaking, dangerousChanges: dangerous} = valid\n  if (validationError) {\n    spinner.fail()\n    throw new Error(`GraphQL schema is not valid:\\n\\n${validationError}`)\n  }\n\n  const breakingChanges = breaking.filter((change) => !ignoredBreaking.includes(change.type))\n  const dangerousChanges = dangerous.filter((change) => !ignoredWarnings.includes(change.type))\n\n  const hasProblematicChanges = breakingChanges.length > 0 || dangerousChanges.length > 0\n  if (force && hasProblematicChanges) {\n    spinner.text = 'Validating GraphQL API: Dangerous changes. Forced with `--force`.'\n    spinner.warn()\n    return true\n  } else if (force || !hasProblematicChanges) {\n    spinner.succeed()\n    return true\n  }\n\n  spinner.warn()\n  return false\n}\n\nfunction renderBreakingChanges(valid: ValidationResponse, output: CliOutputter) {\n  const {breakingChanges: breaking, dangerousChanges: dangerous} = valid\n\n  const breakingChanges = breaking.filter((change) => !ignoredBreaking.includes(change.type))\n  const dangerousChanges = dangerous.filter((change) => !ignoredWarnings.includes(change.type))\n\n  if (dangerousChanges.length > 0) {\n    output.print('\\nFound potentially dangerous changes from previous schema:')\n    dangerousChanges.forEach((change) => output.print(` - ${change.description}`))\n  }\n\n  if (breakingChanges.length > 0) {\n    output.print('\\nFound BREAKING changes from previous schema:')\n    breakingChanges.forEach((change) => output.print(` - ${change.description}`))\n  }\n\n  output.print('')\n}\n\nasync function resolveApiGeneration({\n  currentGeneration,\n  specifiedGeneration,\n  index,\n  force,\n  output,\n  prompt,\n}: {\n  index: number\n  currentGeneration?: string\n  specifiedGeneration?: string\n  force?: boolean\n  output: CliOutputter\n  prompt: CliPrompter\n}): Promise<string | undefined> {\n  // a) If no API is currently deployed:\n  //    use the specificed one from config, or use whichever generation is the latest\n  // b) If an API generation is specified explicitly:\n  //    use the given one, but _prompt_ if it differs from the current one\n  // c) If no API generation is specified explicitly:\n  //    use whichever is already deployed, but warn if differs from latest\n  if (!currentGeneration) {\n    const generation = specifiedGeneration || latestGeneration\n    debug(\n      'There is no current generation deployed, using %s (%s)',\n      generation,\n      specifiedGeneration ? 'specified' : 'default'\n    )\n    return generation\n  }\n\n  if (specifiedGeneration && specifiedGeneration !== currentGeneration) {\n    if (!force && !isInteractive) {\n      throw new Error(oneline`\n        Specified generation (${specifiedGeneration}) for API at index ${index} differs from the one currently deployed (${currentGeneration}).\n        Re-run the command with \\`--force\\` to force deployment.\n      `)\n    }\n\n    output.warn(\n      `Specified generation (${specifiedGeneration}) for API at index ${index} differs from the one currently deployed (${currentGeneration}).`\n    )\n\n    const confirmDeploy =\n      force ||\n      (await prompt.single({\n        type: 'confirm',\n        message: 'Are you sure you want to deploy?',\n        default: false,\n      }))\n\n    return confirmDeploy ? specifiedGeneration : undefined\n  }\n\n  if (specifiedGeneration) {\n    debug('Using specified (%s) generation', specifiedGeneration)\n    return specifiedGeneration\n  }\n\n  debug('Using the currently deployed version (%s)', currentGeneration)\n  return currentGeneration\n}\n\nfunction isRecognizedApiGeneration(generation: string): generation is 'gen1' | 'gen2' | 'gen3' {\n  return generations.hasOwnProperty(generation)\n}\n"],"names":["request","getIt","promise","HttpError","Error","getUrlHeaders","url","headers","response","stream","maxRedirects","method","statusCode","error","body","resume","SCHEMA_LIFT_ANONYMOUS_OBJECT_TYPE","consoleOutputter","console","SchemaError","constructor","problemGroups","print","output","logger","forEach","group","problems","problem","icon","logSymbols","severity","info","upperFirst","getPath","path","message","helpId","generateHelpUrl","map","segment","kind","name","type","filter","Boolean","join","skipTypes","allowedJsonTypes","disallowedCustomizedMembers","disabledBlockFields","scalars","getBaseType","baseSchema","typeName","_a","Schema","compile","types","_original","concat","options","hotspot","get","getTypeName","str","startCase","replace","isBaseType","jsonType","includes","isReference","isCrossDatasetReference","isBlockType","typeDef","hasBlockParent","isArrayOfBlocks","of","some","isType","extractFromSanitySchema","sanitySchema","extractOptions","nonNullDocumentFields","unionRecursionGuards","hasErrors","_validation","Array","isArray","sanityTypes","typeNames","getTypeNames","unionTypes","schemaType","convertType","withUnions","interfaces","getDocumentInterfaceDefinition","isTopLevelType","mapFieldType","field","isScalar","hasValidationFlag","isArrayType","_convertType","parent","getReferenceDefinition","getArrayDefinition","getDocumentDefinition","getObjectDefinition","hasFields","description","getDescription","props","mapped","isField","fieldName","gqlName","originalName","original","def","isInline","isDocument","actualType","typeNeedsHoisting","createLiftTypeError","fields","collectFields","firstUnprefixed","Math","max","findIndex","keyField","createStringField","splice","objectIsBlock","objectFields","buildRawField","parentName","isRawAlias","gatherAllFields","length","extended","base","candidates","arrayify","gatherAllReferenceCandidates","getUnionDefinition","grandParent","children","getArrayChildDefinition","child","arrayDef","isCustomized","guardPathName","push","i","createLiftTypeArrayError","converted","getName","flattened","reduce","acc","candidate","union","find","item","allCandidatesAreDocuments","every","refs","ref","inlineObjs","allTypeNames","possibleTypes","Set","sort","references","inlineObjects","parentIndex","indexOf","objectDef","getDocumentInterfaceFields","isNullable","thing","flag","validation","rule","_rules","allFields","gatherReferenceCandidates","uniqBy","refTo","to","gatherFields","hasFieldsLikeShape","hasArrayOfFields","index","inlineType","helpUrl","helpUrls.SCHEMA_LIFT_ANONYMOUS_OBJECT_TYPE","context","HelpfulError","oneline","jsdomDefaultHtml","mockBrowserEnvironment","basePath","global","window","domCleanup","jsdomGlobal","windowCleanup","close","globalCleanup","provideFakeGlobals","cleanupFileLoader","addHook","code","filename","JSON","stringify","ignoreNodeModules","exts","getFileExtensions","unregister","unregisterESBuild","registerESBuild","target","cleanupBrowserEnvironment","getFakeGlobals","__mockedBySanity","requestAnimationFrame","setImmediate","cancelAnimationFrame","clearImmediate","requestIdleCallback","cancelIdleCallback","InputEvent","ace","tryGetAceGlobal","globalEnv","globalWindow","fakeGlobals","stubbedGlobalKeys","stubbedWindowKeys","rawKey","value","Object","entries","key","acePath","resolveFrom","silent","require","err","getStudioConfig","workspaces","configPath","cfgPath","cleanup","fs","existsSync","config","mod","__esModule","default","resolveConfig","pipe","first","toPromise","isMainThread","parentPort","getGraphQLAPIsForked","cliConfig","cliConfigPath","workDir","workerData","resolved","resolveGraphQLApis","postMessage","getGraphQLAPIs","cliContext","isModernCliConfig","defaultSchema","createSchema","defaultTypes","isCustomType","apis","getApisWithSchemaTypes","schemaTypes","api","schema","Promise","resolve","reject","worker","Worker","__filename","on","numSources","count","workspace","unstable_sources","multiSource","multiWorkspace","hasGraphQLConfig","graphql","projectId","dataset","getStrippedSchemaTypes","apiDefs","validateCliConfig","resolveGraphQLAPIsFromConfig","resolvedApis","apiDef","workspaceName","source","sourceName","space","src","sanityMajorVersion","schemaDef","stripType","input","strip","isPlainishObject","keys","stripped","isBasicType","isPlainObject","isUnion","isNonUnion","isDocumentType","filterCreators","ID","createIdFilters","String","createStringFilters","Url","Float","createNumberFilters","Integer","createBooleanFilters","Datetime","createDateFilters","Date","createObjectFilters","generateTypeFilters","queryable","flatten","createFieldFilters","getDocumentFilters","createListFilters","createReferenceFilters","createInlineTypeFilters","getFieldName","modifier","suffix","constraint","comparator","createEqualityFilter","createInequalityFilter","createDefaultFilters","createGtLtFilters","pluralizeTypeName","words","split","last","plural","pluralize","toLowerCase","generateTypeQueries","filters","queries","constraints","argName","args","filterName","hasFilter","isFieldFilter","getLimitOffsetArgs","gen1","extracted","generation","isConstraintFilter","createDateTimeFilters","createDocumentFilters","createFloatFilters","createIntegerFilters","typeAliases","Text","Email","Document","builtInTypeKeys","builtinTypeValues","values","objectTypes","documentTypes","builtinTypeFilters","createBuiltinTypeFilters","objectTypeFilters","createObjectTypeFilters","documentTypeFilters","createDocumentTypeFilters","filterCreator","objectType","documentType","builtInTypes","builtInSortingEnum","generateTypeSortings","objectTypeSortings","createObjectTypeSortings","documentTypeSortings","createDocumentTypeSortings","allSortings","sortings","isSortable","sorting","gen2","node","documentTypeNames","docType","documentsFilter","documentInterface","gen3","iface","graphqlTypes","latestGeneration","generations","apiIdRegex","isInteractive","process","stdout","isTTY","env","TERM","ignoredWarnings","ignoredBreaking","deployGraphQLApiAction","flags","parseCliFlags","force","dryRun","onlyApis","apiClient","prompt","spinner","client","requireUser","requireProject","deployTasks","apiNames","apiIds","apiName","tag","has","id","test","add","apiId","warn","playground","start","projectClient","clone","currentGeneration","playgroundEnabled","getCurrentSchemaProps","resolveApiGeneration","specifiedGeneration","fail","isRecognizedApiGeneration","enablePlayground","shouldEnablePlayground","playgroundConfiguration","playgroundCurrentlyEnabled","apiSpec","generateSchema","exit","valid","validationError","isResultValid","renderBreakingChanges","stop","shouldDeploy","single","succeed","task","apiUrl","getUrl","location","prevText","text","clear","res","Authorization","token","yargs","hideBin","argv","slice","option","array","breakingChanges","breaking","dangerousChanges","dangerous","change","hasProblematicChanges","debug","confirmDeploy","hasOwnProperty"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,MAAMA,OAAU,GAAAC,cAAA,CAAA,SAAA,CAAAA,CAAM,CAACC,UAAA,CAAAA,OAAAA,EAAD,CAAND,CAAhB;;AAEO,MAAME,SAAN,SAAwBC,KAAxB,CAA8B;;AAIrC,eAAsBC,aAAtB,CAAoCC,GAApC,EAAgG;EAAA,IAA/CC,OAA+C,uEAArC,EAAqC;EACxF,MAAAC,QAAA,GAAW,MAAMR,OAAQ,CAAA;IAC7BM,GAD6B;IAE7BG,MAAQ,EAAA,IAFqB;IAG7BC,YAAc,EAAA,CAHe;IAI7BC,MAAQ,EAAA,MAJqB;IAK7BJ;EAL6B,CAAA,CAAzB;;EAQF,IAAAC,QAAA,CAASI,UAAT,IAAuB,GAAvB,EAA4B;IAC9B,MAAMC,KAAQ,GAAA,IAAIV,SAAJ,iCAAuCK,SAASI,UAAhD,EAAd;IACAC,KAAA,CAAMD,UAAN,GAAmBJ,QAAS,CAAAI,UAA5B;IACM,MAAAC,KAAA;EACR;;EAEAL,QAAA,CAASM,IAAT,CAAcC,MAAd;EACA,OAAOP,QAAS,CAAAD,OAAhB;AACF;;AC1BO,MAAMS,iCAAoC,GAAA,mCAA1C;ACOP,MAAMC,gBAAA,GAAmB;EAACJ,KAAO,EAAA;IAAA,OAAwBK,OAAQ,CAAAL,KAAR,CAAc,YAAd,CAAxB;EAAA;AAAR,CAAzB;;AAEO,MAAMM,WAAN,SAA0Bf,KAA1B,CAAgC;EAGrCgB,YAAYC,eAA+C;IACzD,MAAM,2BAAN;IACA,KAAKA,aAAL,GAAqBA,aAArB;EACF;;EAEAC,MAAMC,QAA4B;IAChC,MAAMC,SAASD,MAAU,IAAAN,gBAAzB;IACAO,MAAA,CAAOX,KAAP,CAAa,uCAAb;IAEK,KAAAQ,aAAA,CAAcI,OAAd,CAAuBC,KAAD,IAAW;MAC9BA,KAAA,CAAAC,QAAA,CAASF,OAAT,CAAkBG,OAAD,IAAa;QAClC,MAAMC,IAAO,GAAAC,mBAAAA,CAAAA,SAAAA,CAAAA,CAAWF,OAAQ,CAAAG,QAAnBD,KAAgCA,mBAAW,CAAA,SAAA,CAAXA,CAAWE,IAAxD;QACOT,MAAA,CAAAV,KAAA,aAAWgB,IAAX,cAAmBI,MAAAA,CAAAA,UAAAA,CAAWL,OAAA,CAAQG,QAAnBE,CAAnB,eAAoDC,OAAA,CAAQR,KAAM,CAAAS,IAAd,CAApD;QACAZ,MAAA,CAAAV,KAAA,aAAWe,OAAA,CAAQQ,OAAnB;;QACP,IAAIR,QAAQS,MAAZ,EAAoB;UAClBd,MAAA,CAAOV,KAAP,iBAAsByB,eAAAA,CAAAA,eAAAA,CAAgBV,OAAA,CAAQS,MAAxBC,CAAtB;QACF;;QACAf,MAAA,CAAOV,KAAP,CAAa,EAAb;MACD,CARK;IASP,CAVI;EAWP;;AAvBqC;;AA0BvC,SAASqB,OAAT,CAAiBC,IAAjB,EAA6D;EACpD,OAAAA,IAAA,CACJI,GADI,CACCC,OAAD,IAAa;IAChB,IAAIA,QAAQC,IAAR,KAAiB,MAAjB,IAA2BD,OAAQ,CAAAE,IAAnC,IAA2CF,QAAQG,IAAvD,EAA6D;MACpD,iBAAGH,OAAQ,CAAAE,IAAX,iBAAsBF,OAAQ,CAAAG,IAA9B;IACT;;IACA,IAAIH,OAAQ,CAAAC,IAAR,KAAiB,UAAjB,IAA+BD,OAAA,CAAQE,IAA3C,EAAiD;MAC/C,OAAOF,OAAQ,CAAAE,IAAf;IACF;;IACO,OAAA,IAAA;EACR,CATI,EAUJE,MAVI,CAUGC,OAVH,EAWJC,IAXI,CAWC,KAXD,CAAA;AAYT;;ACzBA,MAAMC,SAAY,GAAA,CAAC,UAAD,EAAa,WAAb,EAA0B,uBAA1B,CAAlB;AACA,MAAMC,gBAAA,GAAmB,CAAC,QAAD,EAAW,OAAX,CAAzB;AACA,MAAMC,8BAA8B,CAAC,QAAD,EAAW,OAAX,EAAoB,OAApB,EAA6B,MAA7B,EAAqC,OAArC,CAApC;AACA,MAAMC,mBAAA,GAAsB,CAAC,UAAD,CAA5B;AACA,MAAMC,OAAU,GAAA,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CAAhB;;AAEA,SAASC,WAAT,CAAqBC,UAArB,EAAiDC,QAAjD,EAA4F;EA7B5F,IAAAC,EAAA;;EA8BE,OAAOC,sBAAAA,CAAAA,SAAAA,CAAAA,CAAOC,OAAPD,CAAe;IACpBE,UAAQH,EAAW,GAAAF,UAAA,CAAAM,cAAX,mBAAsBD,UAAS,IAAIE,OAAO,CAChD;MAAClB,uBAAD;MAA0BC,IAAA,EAAMW,QAAhC;MAA0CO,OAAS,EAAA;QAACC,OAAS,EAAA;MAAV;IAAnD,CADgD;EAD9B,CAAfN,EAIJO,GAJIP,CAIA,iBAJAA,CAAP;AAKF;;AAEA,SAASQ,WAAT,CAAqBC,GAArB,EAA0C;EACxC,MAAMvB,OAAOwB,MAAAA,CAAAA,SAAAA,CAAUD,GAAVC,EAAeC,OAAfD,CAAuB,MAAvBA,EAA+B,EAA/BA,CAAb;EACO,OAAAxB,IAAA,KAAS,QAAT,GAAoB,OAApB,GAA8BA,IAA9B;AACT;;AAEA,SAAS0B,UAAT,CAAoBzB,IAApB,EAA+C;EAE3C,OAAAA,IAAA,CAAKD,IAAL,KAAcC,IAAK,CAAA0B,QAAnB,IACArB,iBAAiBsB,QAAjB,CAA0B3B,IAAA,CAAK0B,QAA/B,CADA,IAEA,CAACtB,UAAUuB,QAAV,CAAmB3B,IAAA,CAAKD,IAAxB,CAFD,IAGA,CAAC6B,YAAY5B,KAHb,IAIA,CAAC6B,uBAAA,CAAwB7B,IAAxB,CAJD;AAMJ;;AAEA,SAAS8B,WAAT,CAAqBC,OAArB,EAAiE;EAC3D,IAAAA,OAAA,CAAQhC,IAAR,KAAiB,OAAjB,EAA0B;IACrB,OAAA,IAAA;EACT;;EAEA,IAAIgC,QAAQ/B,IAAZ,EAAkB;IACT,OAAA8B,WAAA,CAAYC,QAAQ/B,IAApB,CAAA;EACT;;EAEO,OAAA,KAAA;AACT;;AAEA,SAASgC,cAAT,CAAwBD,OAAxB,EAAsD;EAChD,IAAAA,OAAA,CAAQ/B,IAAR,IAAgB+B,OAAQ,CAAA/B,IAAR,CAAaD,IAAb,KAAsB,OAAtC,IAAiD,CAACgC,OAAQ,CAAA/B,IAAR,CAAaA,IAA/D,EAAqE;IAChE,OAAA,IAAA;EACT;;EAEA,OAAOE,QAAQ6B,OAAQ,CAAA/B,IAAR,IAAgBgC,cAAe,CAAAD,OAAA,CAAQ/B,IAAR,EAA9C;AACF;;AAEA,SAASiC,eAAT,CAAyBF,OAAzB,EAAqE;EAC7D,MAAA/B,IAAA,GAAO+B,QAAQ/B,IAAR,IAAgB+B,OAAvB;;EACN,IAAI,EAAE,cAAc/B,IAAhB,KAAyBA,IAAA,CAAK0B,QAAL,KAAkB,OAA/C,EAAwD;IAC/C,OAAA,KAAA;EACT;;EAEA,OAAA,CAAQ1B,IAAK,CAAAkC,EAAL,IAAW,EAAnB,EAAuBC,IAAvB,CAA4BH,cAA5B,CAAA;AACF;;AAEA,SAASI,MAAT,CAAgBL,OAAhB,EAAqEpB,QAArE,EAAgG;EAC9F,IAAIX,IAA+D,GAAA+B,OAAnE;;EACA,OAAO/B,IAAP,EAAa;IACP,IAAAA,IAAA,CAAKD,IAAL,KAAcY,QAAd,IAA2BX,IAAA,CAAKA,IAAL,IAAaA,IAAK,CAAAA,IAAL,CAAUD,IAAV,KAAmBY,QAA3D,EAAsE;MACjE,OAAA,IAAA;IACT;;IAEAX,IAAA,GAAOA,IAAK,CAAAA,IAAZ;EACF;;EACO,OAAA,KAAA;AACT;;AAEA,SAAS4B,WAAT,CACEG,OADF,EAEkC;EACzB,OAAAK,MAAA,CAAOL,OAAP,EAAgB,WAAhB,CAAA;AACT;;AAEA,SAASF,uBAAT,CAAiCE,OAAjC,EAAsD;EAC7C,OAAAK,MAAA,CAAOL,OAAP,EAAgB,uBAAhB,CAAA;AACT;;AAEO,SAASM,uBAAT,CACLC,YADK,EAGa;EAAA,IADlBC,cACkB,uEADkC,EAClC;;EA1GpB,IAAA3B,EAAA;;EA2GQ,MAAA;IAAC4B;EAAD,IAA0BD,cAA1B;EACN,MAAME,uBAAiC,EAAvC;;EACA,MAAMC,SACJ,GAAAJ,YAAA,CAAaK,WAAb,IACAL,YAAA,CAAaK,WAAb,CAAyBR,IAAzB,CAA+BpD,KAAD,IAC5BA,KAAM,CAAAC,QAAN,CAAemD,IAAf,CAAqBlD,OAAD,IAAaA,OAAQ,CAAAG,QAAR,KAAqB,OAAtD,CADF,CAFF;;EAMA,IAAIsD,SAAa,IAAAE,KAAA,CAAMC,OAAN,CAAcP,YAAA,CAAaK,WAA3B,CAAjB,EAA0D;IAClD,MAAA,IAAInE,WAAJ,CAAgB8D,YAAA,CAAaK,WAA7B,CAAA;EACR;;EAEA,MAAMG,WAAc,GAAA,CAAA,CAAAlC,EAAA,GAAA0B,YAAA,CAAatB,SAAb,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAJ,EAAA,CAAwBG,KAAxB,KAAiC,EAArD;EACM,MAAAgC,SAAA,GAAYT,aAAaU,YAAb,EAAZ;EACN,MAAMC,aAA+B,EAArC;EACM,MAAAlC,KAAA,GAAyBgC,SAC5B,CAAAnD,GAD4B,CACvBG,IAAD,IAAUuC,aAAalB,GAAb,CAAiBrB,IAAjB,CADc,EAE5BE,MAF4B,CAEpBiD,UAAD,IAA0ChD,OAAQ,CAAAgD,UAAA,CAF7B,EAG5BjD,MAH4B,CAGrBwB,UAHqB,EAI5B7B,GAJ4B,CAIvBI,IAAD,IAAUmD,WAAY,CAAAnD,IAAA,CAJE,CAAzB;EAMN,MAAMoD,UAAa,GAAA,CAAC,GAAGrC,KAAJ,EAAW,GAAGkC,UAAd,CAAnB;EACA,OAAO;IAAClC,KAAO,EAAAqC,UAAR;IAAoBC,YAAY,CAACC,8BAAA,EAAD;EAAhC,CAAP;;EAEA,SAASC,cAAT,CAAwB5C,QAAxB,EAAmD;IAC1C,OAAAoC,SAAA,CAAUpB,QAAV,CAAmBhB,QAAnB,CAAA;EACT;;EAEA,SAAS6C,YAAT,CAAsBC,KAAtB,EAAiF;IAC3E,IAAA,CAACA,MAAMzD,IAAP,EAAa;MACT,MAAA,IAAIvC,KAAJ,CAAU,oBAAV,CAAA;IACR;;IAEA,MAAMiE,QAAW,GAAA,cAAc+B,KAAd,GAAsBA,KAAA,CAAM/B,QAA5B,GAAuC,EAAxD;IACM,MAAAgC,QAAA,GAAWlD,OAAQ,CAAAmB,QAAR,CAAiBD,QAAjB,CAAX;;IACF,IAAAgC,QAAA,IAAYhC,aAAa,QAAzB,EAAmC;MACrC,OAAOiC,iBAAkB,CAAAF,KAAA,EAAO,SAAP,CAAlB,GAAsC,KAAtC,GAA8C,OAArD;KADE,UAEOC,UAAU;MACnB,OAAOrC,YAAYK,SAAnB;IACF;;IAEA,MAAM1B,IAAO,GAAAyD,KAAA,CAAMzD,IAAN,CAAWA,IAAX,IAAmByD,KAAM,CAAAzD,IAAtC;;IAGA,IAAIA,KAAKA,IAAT,EAAe;MACb,OAAOwD,aAAaxD,KAApB;IACF;;IAEA,QAAQA,IAAK,CAAAD,IAAb;MACO,KAAA,QAAA;QACH,OAAO4D,iBAAkB,CAAAF,KAAA,EAAO,SAAP,CAAlB,GAAsC,KAAtC,GAA8C,OAArD;;MAAqD;QAE9C,OAAApC,WAAA,CAAYrB,KAAKD,IAAjB,CAAA;IAJX;EAMF;;EAEA,SAAS6D,WAAT,CAAqB5D,IAArB,EAA8E;IACrE,OAAAE,OAAA,CACJ,cAAcF,IAAd,IAAsBA,IAAK,CAAA0B,QAAL,KAAkB,OAAxC,IACE1B,IAAK,CAAAA,IAAL,IAAaA,IAAK,CAAAA,IAAL,CAAU0B,QAAV,KAAuB,OAFlC,CAAA;EAIT;;EAES,SAAAmC,YAAA,CACP7D,IADO,EAEP8D,MAFO,EAGP5C,OAHO,EAIQ;IACX,IAAAnB,IAAA;;IACJ,IAAIC,KAAKA,IAAT,EAAe;MACbD,IAAA,GAAOC,KAAKA,IAAL,CAAUD,IAAjB;IACF,CAFA,MAEA,IAAW,cAAcC,IAAzB,EAA+B;MAC7BD,IAAA,GAAOC,IAAK,CAAA0B,QAAZ;IACF;;IAEI,IAAAE,WAAA,CAAY5B,IAAZ,CAAA,EAAmB;MACd,OAAA+D,sBAAA,CAAuB/D,IAAvB,EAAoD8D,MAApD,CAAA;IACT;;IAEI,IAAAF,WAAA,CAAY5D,IAAZ,CAAA,EAAmB;MACd,OAAAgE,kBAAA,CAAmBhE,IAAnB,EAAyB8D,MAAzB,EAAiC5C,OAAjC,CAAA;IACT;;IAEA,IAAInB,SAAS,UAAb,EAAyB;MACvB,OAAOkE,sBAAsBjE,KAA7B;IACF;;IAEI,IAAAD,IAAA,KAAS,OAAT,IAAoBA,IAAA,KAAS,QAA7B,EAAuC;MAClC,OAAAmE,mBAAA,CAAoBlE,IAApB,EAA0B8D,MAA1B,CAAA;IACT;;IAEI,IAAAK,SAAA,CAAUnE,IAAV,CAAA,EAAiB;MACZ,OAAAkE,mBAAA,CAAoBlE,IAApB,EAA0B8D,MAA1B,CAAA;IACT;;IAEO,OAAA;MACL9D,IAAA,EAAMwD,aAAaxD,KADd;MAELoE,WAAA,EAAaC,eAAerE;IAFvB,CAAA;EAIT;;EAEA,SAASmD,WAAT,CACEnD,IADF,EAEE8D,MAFF,EAIiB;IAAA,IADfQ,KACe,uEADe,EACf;;IACT,MAAAC,MAAA,GAASV,YAAa,CAAA7D,IAAA,EAAM8D,MAAU,IAAA,EAAhB,EAAoB;MAACU,OAAA,EAAStE,OAAQ,CAAAoE,KAAA,CAAMG,SAAN;IAAlB,CAApB,CAAtB;;IACA,MAAAC,OAAA,GAAUJ,KAAM,CAAAG,SAAN,IAAmBF,MAAO,CAAAxE,IAApC;IACN,MAAM4E,eAAe3E,IAAK,CAAAD,IAA1B;IACA,MAAM6E,WAAWF,OAAY,KAAAC,YAAZ,GAA2B,EAA3B,GAAgC;MAACA;IAAD,CAAjD;IACA,qDAAWL,KAAX,GAAqBC,MAArB,GAAgCK,QAAhC;EACF;;EAEA,SAASJ,OAAT,CAAiBK,GAAjB,EAAoE;IAClE,OAAO,EAAE,cAAcA,GAAhB,KAAwB,CAACA,GAAI,CAAAnD,QAApC;EACF;;EAGS,SAAAwC,mBAAA,CAAoBW,GAApB,EAAmDf,MAAnD,EAAmF;IACpF,MAAAgB,QAAA,GAAWN,QAAQK,IAAnB;IACN,MAAME,aAAaF,GAAI,CAAA7E,IAAJ,GAAW6E,GAAI,CAAA7E,IAAJ,CAASD,IAAT,KAAkB,UAA7B,GAA0C,KAA7D;IACM,MAAAiF,UAAA,GAAaF,QAAW,GAAAD,GAAA,CAAI7E,IAAJ,GAAW6E,GAAnC;;IAEF,IAAAI,iBAAA,CAAkBD,UAAlB,CAAA,EAA+B;MACjC,MAAME,oBAAoBL,GAAI,CAAA9E,MAAM+D,MAAU,IAAA,IAAIkB,WAAWjF,KAA7D;IACF;;IAEA,IAAI+E,QAAY,IAAAhB,MAAZ,IAAsBe,GAAI,CAAA7E,IAAJ,CAASD,IAAT,KAAkB,QAA5C,EAAsD;MAC9C,MAAAmF,mBAAA,CAAoBL,GAAI,CAAA9E,IAAxB,EAA8B+D,MAA9B,CAAA;IACR;;IAEA,IAAIA,UAAUe,GAAI,CAAA7E,IAAd,IAAsBuD,eAAesB,GAAI,CAAA7E,IAAJ,CAASD,KAAlD,EAAyD;MACvD,OAAO;QAACC,IAAM,EAAAqB,WAAA,CAAYwD,GAAI,CAAA7E,IAAJ,CAASD,IAArB;MAAP,CAAP;IACF;;IAEA,MAAMA,iBAAU+D,MAAA,IAAU,WAAKzC,WAAA,CAAYwD,IAAI9E,IAAhB,EAA/B;IACM,MAAAoF,MAAA,GAASC,cAAcP,IAAvB;IACN,MAAMQ,kBAAkBC,IAAK,CAAAC,GAAL,CACtB,CADsB,EAEtBJ,OAAOK,SAAP,CAAkB/B,KAAD,IAAWA,KAAM,CAAA1D,IAAN,CAAW,CAAX,MAAkB,GAA9C,CAFsB,CAAxB;IAKM,MAAA0F,QAAA,GAAWC,kBAAkB,OAA7B;IAECP,MAAA,CAAAQ,MAAA,CAAON,eAAP,EAAwB,CAAxB,EAA2BI,QAA3B;;IAEP,IAAI,CAACV,UAAL,EAAiB;MACfI,MAAA,CAAOQ,MAAP,CAAcN,eAAkB,GAAA,CAAhC,EAAmC,CAAnC,EAAsCK,iBAAA,CAAkB,OAAlB,CAAtC;IACF;;IAEM,MAAAE,aAAA,GAAgB9D,YAAY+C,IAA5B;IACN,MAAMgB,YAAe,GAAAD,aAAA,GACjBT,MAAO,CAAAlF,MAAP,CAAewD,KAAD,IAAW,CAAClD,mBAAA,CAAoBoB,QAApB,CAA6B8B,KAAA,CAAM1D,IAAnC,CAA1B,CADiB,GAEjBoF,MAFJ;IAIO,OAAA;MACLrF,IAAM,EAAA,MADD;MAELC,IAFK;MAGLC,IAAM,EAAA,QAHD;MAILoE,WAAA,EAAaC,eAAeQ,IAJvB;MAKLM,QAAQU,YAAa,CAAAjG,GAAb,CAAkB6D,KAAD,IACvBxB,eAAA,CAAgBwB,KAAhB,CAAA,GACIqC,cAAcrC,OAAO1D,KADzB,GAEKoD,WAAA,CAAYM,KAAZ,EAAmB1D,IAAnB,EAAyB;QAAC0E,SAAW,EAAAhB,KAAA,CAAM1D;MAAlB,CAAzB,CAHC;IALH,CAAA;EAWT;;EAES,SAAA+F,aAAA,CAAcrC,KAAd,EAAkCsC,UAAlC,EAAsD;IACtD,uCACF5C,YAAYM,OAAOsC,YAAY;MAACtB,SAAW,YAAGhB,KAAM,CAAA1D,IAAT;IAAZ,EAD7B;MAELC,IAAM,EAAA,MAFD;MAGLgG,UAAY,EAAA;IAHP;EAKT;;EAEA,SAASN,iBAAT,CAA2B3F,IAA3B,EAAsD;IAC7C,OAAA;MACLA,IADK;MAELC,IAAM,EAAA;QACJ0B,QAAU,EAAA,QADN;QAEJ3B,IAAM,EAAA,QAFF;QAGJC,MAAM;UAACD,IAAA,EAAM,QAAP;UAAiBC,IAAM,EAAA,KAAA,CAAvB;UAAkC0B,UAAU;QAA5C;MAHF;IAFD,CAAA;EAQT;;EAEA,SAAS0D,aAAT,CAAuBP,GAAvB,EAAsD;IAC9C,MAAAM,MAAA,GAASc,gBAAgBpB,IAAzB;;IACF,IAAAM,MAAA,CAAOe,MAAP,GAAgB,CAAhB,EAAmB;MACd,OAAAf,MAAA;IACT;;IAEA,MAAMgB,QAAW,GAAA1F,WAAA,CAAY6B,YAAZ,EAA0BuC,GAAA,CAAI9E,IAA9B,CAAjB;IACA,OAAOkG,gBAAgBE,SAAvB;EACF;;EAES,SAAApC,sBAAA,CAAuBc,GAAvB,EAAwCf,MAAxC,EAA6D;IACpE,MAAMsC,OAAO;MAAChC,WAAA,EAAaC,eAAeQ,IAA7B;MAAmCjD,aAAa;IAAhD,CAAb;IACA,MAAMyE,UAAa,GAAAC,QAAA,CAASC,4BAA6B,CAAA1B,GAAA,CAAtC,CAAnB;;IACI,IAAAwB,UAAA,CAAWH,MAAX,KAAsB,CAAtB,EAAyB;MACrB,MAAA,IAAIzI,KAAJ,CAAU,6BAAV,CAAA;IACR;;IAEO,OAAA4I,UAAA,CAAWH,MAAX,KAAsB,CAAtB;MACFlG,IAAA,EAAMqB,YAAYgF,UAAW,CAAA,CAAA,CAAX,CAAcrG,IAAd,CAAmBD;IADnC,GAC6CqG,IAD7C,oCAECI,kBAAA,CAAmBH,UAAnB,EAA+BxB,GAA/B,EAAoC;MAAC4B,WAAA,EAAa3C;IAAd,CAApC,CAFD,GAEgEsC,IAFhE,CAAA;EAGT;;EAEA,SAASpC,kBAAT,CACEa,GADF,EAEEf,MAFF,EAIO;IAAA,IADL5C,OACK,uEAD0B,EAC1B;;IAhUTN,IAAAA,GAAAA;;IAiUI,MAAMwF,OAAO;MAAChC,WAAA,EAAaC,eAAeQ,IAA7B;MAAmC/E,MAAM;IAAzC,CAAb;IACA,MAAMC,IAAO,GAAA,CAACmB,OAAQ,CAAAsD,OAAT,IAAoBK,GAAI,CAAA9E,IAAxB,GAA+B;MAACA,IAAA,EAAMsB,WAAY,CAAAwD,GAAA,CAAI9E,IAAJ;IAAnB,CAA/B,GAA+D,EAA5E;IACA,MAAMsG,UAAazF,GAAAA,CAAAA,CAAAA,GAAAA,GAAAiE,GAAI,CAAA7E,IAAJY,KAAA,IAAAA,SAAAA,GAAAA,GAAU,CAAAZ,IAAVY,KAAkB,QAAQiE,GAAA,CAAI7E,IAA9BY,GAAqC0F,QAAS,CAAAzB,GAAA,CAAI7E,IAAJ,CAASkC,EAAT,CAA9CtB,GAA6DiE,GAAI,CAAA3C,EAApF;IAEO,OAAAmE,UAAA,CAAWH,MAAX,KAAsB,CAAtB;MAEDQ,QAAU,EAAAC,uBAAA,CAAwBN,UAAW,CAAA,CAAA,CAAnC,EAAuCxB,GAAvC;IAFT,GAGEuB,IAHF,GAIErG,IAJF;MAOD2G,UAAUF,kBAAmB,CAAAH,UAAA,EAAYxB,GAAZ,EAAiB;QAAC4B,WAAA,EAAa3C;MAAd,CAAjB;IAP5B,GAQEsC,IARF,GASErG,IATF,CAAA;EAWT;;EAES,SAAA4G,uBAAA,CAAwBC,KAAxB,EAA2CC,QAA3C,EAAiE;IACpE,IAAA5B,iBAAA,CAAkB2B,KAAlB,CAAA,EAA0B;MAE5B,MAAM1B,mBAAoB,CAAA0B,KAAA,CAAM7G,IAAN,EAAY8G,QAAA,CAAS9G,IAArB,CAA1B;IACF;;IAEI,IAAA6B,WAAA,CAAYgF,KAAZ,CAAA,EAAoB;MACf,OAAA7C,sBAAA,CAAuB6C,KAAvB,EAA8BC,QAAA,CAAS9G,IAAvC,CAAA;IACT;;IAGI,IAAAS,OAAA,CAAQmB,QAAR,CAAiBiF,KAAA,CAAMlF,QAAvB,KAAoC,CAAClB,OAAQ,CAAAmB,QAAR,CAAiBiF,KAAM,CAAA7G,IAAvB,CAArC,EAAmE;MACrE,OAAO;QAACC,IAAA,EAAMwD,YAAa,CAAAoD,KAAA;MAApB,CAAP;IACF;;IAEA,OAAO;MAAC5G,IAAA,EAAMqB,WAAY,CAAAuF,KAAA,CAAM7G,IAAN;IAAnB,CAAP;EACF;;EAEA,SAASkF,iBAAT,CAA2BjF,IAA3B,EAAiF;IAC3E,IAAAA,IAAA,CAAKD,IAAL,KAAc,QAAd,EAAwB;MACnB,OAAA,IAAA;IACT;;IAEA,IAAIC,KAAK0B,QAAL,KAAkB,QAAlB,IAA8B,CAAC6B,cAAe,CAAAvD,IAAA,CAAKD,IAAL,CAAlD,EAA8D;MACrD,OAAA,IAAA;IACT;;IAEA,IAAIC,KAAK8G,YAAL,IAAqB,CAACvD,cAAe,CAAAvD,IAAA,CAAKD,IAAL,CAAzC,EAAqD;MAC5C,OAAA,IAAA;IACT;;IAEA,IAAIC,KAAK8G,YAAL,IAAqBxG,2BAAA,CAA4BqB,QAA5B,CAAqC3B,IAAA,CAAKD,IAA1C,CAAzB,EAA0E;MACjE,OAAA,IAAA;IACT;;IAEO,OAAA,KAAA;EACT;;EAEA,SAASyG,kBAAT,CACEH,UADF,EAEEvC,MAFF,EAIE;IAAA,IADA5C,OACA,uEADkC,EAClC;;IACI,IAAAmF,UAAA,CAAWH,MAAX,GAAoB,CAApB,EAAuB;MACnB,MAAA,IAAIzI,KAAJ,CAAU,wCAAV,CAAA;IACR;;IAIA,MAAMsJ,0BAAmB,OAAOjD,MAAP,KAAkB,QAAlB,GAA6BA,OAAO/D,IAApC,GAA2C+D,OAApE;;IACI,IAAArB,oBAAA,CAAqBd,QAArB,CAA8BoF,aAA9B,CAAA,EAA8C;MAChD,OAAO,EAAP;IACF;;IAEI,IAAA;MACFtE,oBAAA,CAAqBuE,IAArB,CAA0BD,aAA1B;MAEWV,UAAA,CAAAvH,OAAA,CAAQ,CAAC+F,GAAD,EAAMoC,CAAN,KAAY;QACzB,IAAAhC,iBAAA,CAAkBJ,GAAlB,CAAA,EAAwB;UACpB,MAAAqC,wBAAA,CACJD,CADI,EAEJnD,MAAO,CAAA/D,IAFH,EAGJ8E,GAAI,CAAA7E,IAAJ,GAAW6E,GAAI,CAAA7E,IAAJ,CAASD,IAApB,GAA2B8E,GAAI,CAAA9E,IAH3B,EAIJmB,OAAQ,CAAAuF,WAJJ,CAAA;QAMR;MACD,CATU;MAWX,MAAMU,YAAYd,UAAW,CAAAzG,GAAX,CAAgBiF,GAAD,IAAS1B,WAAA,CAAY0B,GAAZ,CAAxB,CAAlB;;MAEM,MAAAuC,OAAA,GAAWvC,GAAD,IACd,OAAOA,GAAA,CAAI7E,IAAX,KAAoB,QAApB,GAA+B6E,GAAA,CAAI7E,IAAnC,GAA0C6E,GAAA,CAAI7E,IAAJ,CAASD,IAD/C;;MAKN,MAAMsH,SAAY,GAAAF,SAAA,CAAUG,MAAV,CAAiB,CAACC,GAAD,EAAMC,SAAN,KAAoB;QAC/C,MAAAC,KAAA,GAAQxE,WAAWyE,IAAX,CAAiBC,IAAD,IAAUA,IAAK,CAAA5H,IAAL,KAAcyH,UAAUxH,IAAlD,CAAR;QACN,OAAOyH,QACHF,GAAI,CAAAtG,MAAJ,CAAWwG,MAAM1G,KAAN,CAAYnB,GAAZ,CAAiBI,IAAD,KAAW;UAACA,IAAD;UAAO4B,WAAA,EAAa4F,UAAU5F;QAA9B,CAAX,CAAhB,CAAX,IACA2F,GAAA,CAAItG,MAAJ,CAAWuG,SAAX,CAFJ;MAGF,CALkB,EAKf,EALe,CAAlB;MAOA,MAAMI,yBAA4B,GAAAP,SAAA,CAAUQ,KAAV,CAAiBhD,GAAD,IAAS;QACnD,MAAA9C,OAAA,GAAUe,YAAY4E,IAAZ,CAAkB1H,IAAD,IAAUA,IAAK,CAAAD,IAAL,KAAcqH,OAAQ,CAAAvC,GAAA,CAAjD,CAAV;QACC,OAAA9C,OAAA,IAAWA,QAAQ/B,IAAR,KAAiB,UAA5B;MACR,CAHiC,CAAlC;MAKA,MAAMqD,UAAa,GAAAuE,yBAAA,GAA4B,CAAC,UAAD,CAA5B,GAA2C,KAAA,CAA9D;MAEA,MAAME,IAAO,GAAAT,SAAA,CAAUpH,MAAV,CAAkBD,IAAD,IAAUA,IAAA,CAAK4B,WAAhC,EAA6ChC,GAA7C,CAAkDmI,GAAD,IAASA,GAAA,CAAI/H,IAA9D,CAAb;MACA,MAAMgI,UAAa,GAAAX,SAAA,CAChBpH,MADgB,CACRD,IAAD,IAAU,CAACA,IAAA,CAAK4B,WADP,EAEhBhC,GAFgB,CAEXI,IAAD,IAAUA,IAAA,CAAKD,IAAL,IAAa,EAFX,CAAnB;MAKA,MAAMkI,YAAyB,GAAAZ,SAAA,CAAUzH,GAAV,CAAeI,IAAD,IAAe;QAC1D,OAAOA,IAAK,CAAA4B,WAAL,GAAmB5B,IAAK,CAAAA,IAAxB,GAA+BA,IAAK,CAAAD,IAA3C;MACD,CAF8B,CAA/B;MAIM,MAAAmI,aAAA,GAAgB,CAAC,GAAG,IAAIC,GAAJ,CAAQF,YAAR,CAAJ,EAA2BG,IAA3B,EAAhB;;MAEF,IAAAF,aAAA,CAAchC,MAAd,GAAuB,CAAvB,EAA0B;QAC5B,MAAM,IAAIzI,KAAJ,sDAAwDqG,MAAA,CAAO/D,IAA/D,EAAN;MACF;;MAEM,MAAAA,IAAA,GAAOmI,aAAc,CAAA/H,IAAd,CAAmB,IAAnB,CAAP;;MAEF,IAAA,CAAC8C,WAAWd,IAAX,CAAiBwF,IAAD,IAAUA,IAAK,CAAA5H,IAAL,KAAcA,IAAxC,CAAD,EAAgD;QAClDkD,UAAA,CAAW+D,IAAX,CAAgB;UACdlH,IAAM,EAAA,OADQ;UAEdC,IAFc;UAGdgB,KAAO,EAAAmH,aAHO;UAId7E;QAJc,CAAhB;MAMF;;MAEA,MAAMgF,UAAa,GAAAP,IAAA,CAAK5B,MAAL,GAAc,CAAd,GAAkB4B,IAAlB,GAAyB,KAAA,CAA5C;MACA,MAAMQ,aAAgB,GAAAN,UAAA,CAAW9B,MAAX,GAAoB,CAApB,GAAwB8B,UAAxB,GAAqC,KAAA,CAA3D;MACA,OAAOpG,WAAY,CAAAkC,MAAA,CAAZ,GACH;QAAC9D,IAAM,EAAAD,IAAP;QAAasI;MAAb,CADG,GAEH;QAACrI,IAAA,EAAMD,IAAP;QAAasI,UAAb;QAAyBC;MAAzB,CAFJ;IAGA,CAnEE,SAmEF;MACM,MAAAC,WAAA,GAAc9F,oBAAqB,CAAA+F,OAArB,CAA6BzB,aAA7B,CAAd;;MACN,IAAIwB,gBAAgB,CAAI,CAAxB,EAAwB;QACD9F,oBAAA,CAAAkD,MAAA,CAAO4C,WAAP,EAAoB,CAApB;MACvB;IACF;EACF;;EAEA,SAAStE,qBAAT,CAA+BY,GAA/B,EAAsD;IAC9C,MAAA4D,SAAA,GAAYvE,oBAAoBW,IAAhC;IACN,MAAMM,MAAS,GAAAuD,0BAAA,GAA6BzH,MAA7B,CAAoCwH,UAAUtD,MAA9C,CAAf;IAEA,uCAAWsD,SAAX;MAAsBtD,MAAtB;MAA8B9B,UAAY,EAAA,CAAC,UAAD;IAA1C;EACF;;EAEA,SAASC,8BAAT,GAA8D;IACrD,OAAA;MACLxD,IAAM,EAAA,WADD;MAELC,IAAM,EAAA,UAFD;MAGLqE,WAAa,EAAA,mBAHR;MAILe,QAAQuD,0BAA2B;IAJ9B,CAAA;EAMT;;EAEA,SAASA,0BAAT,GAAkE;IAChE,MAAMC,UAAa,GAAA,OAAOnG,qBAAP,KAAiC,SAAjC,GAA6C,CAACA,qBAA9C,GAAsE,IAAzF;IACO,OAAA,CACL;MACEiC,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,IAFR;MAGE2I,UAHF;MAIEvE,WAAa,EAAA;IAJf,CADK,EAOL;MACEK,SAAW,EAAA,OADb;MAEEzE,IAAM,EAAA,QAFR;MAGE2I,UAHF;MAIEvE,WAAa,EAAA;IAJf,CAPK,EAaL;MACEK,SAAW,EAAA,YADb;MAEEzE,IAAM,EAAA,UAFR;MAGE2I,UAHF;MAIEvE,WAAa,EAAA;IAJf,CAbK,EAmBL;MACEK,SAAW,EAAA,YADb;MAEEzE,IAAM,EAAA,UAFR;MAGE2I,UAHF;MAIEvE,WAAa,EAAA;IAJf,CAnBK,EAyBL;MACEK,SAAW,EAAA,MADb;MAEEzE,IAAM,EAAA,QAFR;MAGE2I,UAHF;MAIEvE,WAAa,EAAA;IAJf,CAzBK,CAAA;EAgCT;;EAEA,SAASkC,QAAT,CAAkBsC,KAAlB,EAAkC;IAC5B,IAAAhG,KAAA,CAAMC,OAAN,CAAc+F,KAAd,CAAA,EAAsB;MACjB,OAAAA,KAAA;IACT;;IAEO,OAAAA,KAAA,KAAU,IAAV,IAAkB,OAAOA,KAAP,KAAiB,WAAnC,GAAiD,EAAjD,GAAsD,CAACA,KAAD,CAAtD;EACT;;EAES,SAAAjF,iBAAA,CACPF,KADO,EAEPoF,IAFO,EAGE;IAEP,OAAA,gBAAgBpF,KAAhB,IACAb,KAAM,CAAAC,OAAN,CAAcY,MAAMqF,UAApB,CADA,IAEArF,MAAMqF,UAAN,CAAiB3G,IAAjB,CACG4G,IAAD,IAAUA,IAAQ,IAAA,YAAYA,IAApB,IAA4BA,IAAA,CAAKC,MAAL,CAAY7G,IAAZ,CAAkBwF,IAAD,IAAUA,IAAK,CAAAkB,IAAL,KAAcA,IAAzC,CADxC,CAFA;EAMJ;;EAEA,SAASxE,cAAT,CAAwBrE,IAAxB,EAA4E;IAC1E,MAAMoE,WAAc,GAAApE,IAAA,CAAKA,IAAL,IAAaA,IAAA,CAAKA,IAAL,CAAUoE,WAA3C;IACO,OAAA,OAAOA,WAAP,KAAuB,QAAvB,GAAkCA,WAAlC,GAAgD,KAAA,CAAhD;EACT;;EAEA,SAASmC,4BAAT,CAAsCvG,IAAtC,EAA4E;IACpE,MAAAiJ,SAAA,GAAYC,0BAA0BlJ,KAAtC;IACC,OAAAmJ,MAAA,CAAAA,MAAAA,CAAOF,SAAPE,EAAkB,MAAlBA,CAAA;EACT;;EAEA,SAASD,yBAAT,CAAmClJ,IAAnC,EAAyE;IACvE,MAAMoJ,KAAQ,GAAA,QAAQpJ,IAAR,GAAeA,IAAA,CAAKqJ,EAApB,GAAyB,EAAvC;IACA,OAAO,UAAUrJ,IAAV,IAAkBA,IAAK,CAAAA,IAAvB,GAA8B,CAAC,GAAGkJ,yBAA0B,CAAAlJ,IAAA,CAAKA,IAAL,CAA9B,EAA0C,GAAGoJ,KAA7C,CAA9B,GAAoFA,KAA3F;EACF;;EAEA,SAASnD,eAAT,CAAyBjG,IAAzB,EAAyD;IACjD,MAAAiJ,SAAA,GAAYK,aAAatJ,KAAzB;IACC,OAAAmJ,MAAA,CAAAA,MAAAA,CAAOF,SAAPE,EAAkB,MAAlBA,CAAA;EACT;;EAEA,SAASG,YAAT,CAAsBtJ,IAAtB,EAAqE;IACnE,IAAI,YAAYA,IAAhB,EAAsB;MACb,OAAAA,IAAA,CAAKA,IAAL,GAAYsJ,YAAA,CAAatJ,IAAK,CAAAA,IAAlB,CAAA,CAAwBiB,MAAxB,CAA+BjB,IAAA,CAAKmF,MAApC,CAAZ,GAA0DnF,IAAK,CAAAmF,MAA/D;IACT;;IAEA,OAAO,EAAP;EACF;;EAEA,SAASoE,kBAAT,CAA4BvJ,IAA5B,EAAsE;IACpE,OAAO,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAA,KAAS,IAArC,IAA6C,YAAYA,IAAhE;EACF;;EAEA,SAASwJ,gBAAT,CAA0BxJ,IAA1B,EAA0E;IACxE,OAAOuJ,mBAAmBvJ,KAAnB,IAA4B4C,KAAM,CAAAC,OAAN,CAAc7C,KAAKmF,MAAnB,CAAnC;EACF;;EAEA,SAAShB,SAAT,CAAmBnE,IAAnB,EAA4D;IACtD,IAAAwJ,gBAAA,CAAiBxJ,IAAjB,CAAA,EAAwB;MACnB,OAAAiG,eAAA,CAAgBjG,IAAhB,CAAA,CAAsBkG,MAAtB,GAA+B,CAA/B;IACT;;IAEA,OAAO,UAAUlG,IAAV,IAAkBA,IAAA,CAAKA,IAAvB,GAA8BmE,SAAU,CAAAnE,IAAA,CAAKA,IAAL,CAAxC,GAAqD,KAA5D;EACF;AACF;;AAEA,SAASkH,wBAAT,CACEuC,KADF,EAEE3F,MAFF,EAKE;EAAA,IAFA4F,UAEA,uEAFa,QAEb;EAAA,IADAjD,WACA,uEADc,EACd;EACM,MAAAkD,OAAA,GAAUhK,+BAAAA,CAAgBiK,iCAAhBjK,CAAV;EACA,MAAAkK,OAAA,GAAU,CAACpD,WAAD,EAAc3C,MAAd,EAAsB7D,MAAtB,CAA6BC,OAA7B,EAAsCC,IAAtC,CAA2C,GAA3C,CAAV;EACN,OAAO,IAAI2J,YAAJ,CACLC,2BADK,yPAE0BL,UAF1B,EAEiDD,KAFjD,EAEyEI,OAFzE,EAICF,OAJD,GAKLA,OALK,CAAP;AAOF;;AAEA,SAASzE,mBAAT,CAA6BvE,QAA7B,EAA+CmD,MAA/C,EAAsF;EAAA,IAAvB4F,UAAuB,uEAAV,QAAU;EAC9E,MAAAC,OAAA,GAAUhK,+BAAAA,CAAgBiK,iCAAhBjK,CAAV;EACN,OAAO,IAAImK,YAAJ,CACLC,2BADK,2PAE0BL,UAF1B,EAEyC/I,QAFzC,EAEsEmD,MAFtE,EAIC6F,OAJD,GAKLA,OALK,CAAP;AAOF;;AAEA,MAAMG,YAAN,SAA2BrM,KAA3B,CAAiC;EAG/BgB,WAAA,CAAYgB,OAAZ,EAA6BkK,OAA7B,EAA+C;IAC7C,MAAMlK,OAAN;IACA,KAAKkK,OAAL,GAAeA,OAAf;EACF;;AAN+B;;AChmBjC,MAAMK,gBAAmB,+FAAzB;;AAMO,SAASC,sBAAT,CAAgCC,QAAhC,EAA8D;EAEnE,IAAIC,MAAU,IAAAA,MAAA,CAAOC,MAAjB,IAA2B,sBAAsBD,OAAOC,MAA5D,EAAoE;IAClE,OAAO,MAAM,CAEb,CAFA;EAGF;;EAEA,MAAMC,aAAaC,oBAAAA,CAAAA,SAAAA,CAAAA,CAAYN,gBAAZM,EAA8B;IAAC3M,GAAA,EAAK;EAAN,CAA9B2M,CAAnB;;EACA,MAAMC,aAAgB,GAAA,MAAMJ,MAAO,CAAAC,MAAP,CAAcI,KAAd,EAA5B;;EACM,MAAAC,aAAA,GAAgBC,mBAAmBR,SAAnC;EACN,MAAMS,iBAAoB,GAAAC,OAAA,CAAAA,OAAAA,CACxB,CAACC,IAAD,EAAOC,QAAP,gCAAwCC,IAAA,CAAKC,SAAL,CAAeF,QAAf,CAAxC,CADwBF,EAExB;IACEK,iBAAmB,EAAA,KADrB;IAEEC,MAAMC,iBAAkB;EAF1B,CAFwBP,CAA1B;EAQA,MAAM;IAACQ,UAAA,EAAYC;EAAb,IAAkCC,aAAAA,CAAgB;IACtDC,MAAQ,EAAA;EAD8C,CAAhBD,CAAxC;EAIA,OAAO,SAASE,yBAAT,GAAqC;IACxBH,iBAAA;IACAV,iBAAA;IACJF,aAAA;IACAF,aAAA;IACHF,UAAA;EACb,CANA;AAOF;;AAEA,MAAMoB,cAAA,GAAkBvB,QAAD,KAAuB;EAC5CwB,gBAAkB,EAAA,IAD0B;EAE5CC,qBAAuB,EAAAC,YAFqB;EAG5CC,oBAAsB,EAAAC,cAHsB;EAI5CC,mBAAqB,EAAAH,YAJuB;EAK5CI,kBAAoB,EAAAF,cALwB;EAM5CG,UAAY,EAAA9B,MAAA,CAAOC,MAAP,IAAiBD,MAAA,CAAOC,MAAP,CAAc6B,UANC;EAO5CC,GAAA,EAAKC,gBAAgBjC;AAPuB,CAAvB,CAAvB;;AAUA,SAASQ,kBAAT,CAA4BR,QAA5B,EAA0D;EACxD,MAAMkC,SAAY,GAAAjC,MAAlB;EACA,MAAMkC,eAAelC,MAAO,CAAAC,MAA5B;EAEM,MAAAkC,WAAA,GAAcb,eAAevB,SAA7B;EACN,MAAMqC,oBAA8B,EAApC;EACA,MAAMC,oBAA8B,EAApC;;EAEA,KAAA,MAAW,CAACC,MAAD,EAASC,KAAT,CAAX,IAA8BC,MAAO,CAAAC,OAAP,CAAeN,WAAf,CAA9B,EAA2D;IACrD,IAAA,OAAOI,KAAP,KAAiB,WAAjB,EAA8B;MAChC;IACF;;IAEA,MAAMG,GAAM,GAAAJ,MAAZ;;IAEI,IAAA,EAAEI,OAAOT,SAAT,CAAA,EAAqB;MACvBA,SAAA,CAAUS,GAAV,CAAA,GAAiBP,WAAY,CAAAO,GAAA,CAA7B;MACAN,iBAAA,CAAkBvF,IAAlB,CAAuB6F,GAAvB;IACF;;IAEI,IAAA,EAAEA,GAAO,IAAA1C,MAAA,CAAOC,MAAhB,CAAA,EAAyB;MAC3BiC,YAAA,CAAaQ,GAAb,CAAA,GAAoBP,WAAY,CAAAO,GAAA,CAAhC;MACAL,iBAAA,CAAkBxF,IAAlB,CAAuB6F,GAAvB;IACF;EACF;;EAEA,OAAO,MAAM;IACON,iBAAA,CAAAzN,OAAA,CAAS+N,GAAD,IAAS;MACjC,OAAOT,SAAU,CAAAS,GAAA,CAAjB;IACD,CAFiB;IAIAL,iBAAA,CAAA1N,OAAA,CAAS+N,GAAD,IAAS;MACjC,OAAOR,YAAa,CAAAQ,GAAA,CAApB;IACD,CAFiB;EAGpB,CARA;AASF;;AAEA,SAASV,eAAT,CAAyBjC,QAAzB,EAA2C;EAGzC,MAAM4C,OAAU,GAAAC,oBAAA,CAAA,SAAA,CAAAA,CAAYC,MAAZD,CAAmB7C,QAAnB6C,EAA6B,YAA7BA,CAAhB;;EACA,IAAI,CAACD,OAAL,EAAc;IACL,OAAA,KAAA,CAAA;EACT;;EAEI,IAAA;IAEF,OAAOG,QAAQH,QAAf;GAFE,QAGKI,KAAP;IACO,OAAA,KAAA,CAAA;EACT;AACF;;AAEA,SAAS/B,iBAAT,GAA6B;EACpB,OAAA,CACL,OADK,EAEL,MAFK,EAGL,MAHK,EAIL,MAJK,EAKL,MALK,EAML,OANK,EAOL,OAPK,EAQL,QARK,EASL,MATK,EAUL,MAVK,EAWL,MAXK,CAAA;AAaT;;ACjHA,MAAM9E,UAAa,GAAA,CACjB,kBADiB,EAEjB,mBAFiB,EAGjB,kBAHiB,EAIjB,mBAJiB,CAAnB;;AAUA,eAAsB8G,eAAtB,CAAsCjM,OAAtC,EAGyB;EACnB,IAAAkM,UAAA;EAEJ,MAAM;IAAClD,QAAD;IAAWmD,UAAY,EAAAC;EAAvB,IAAkCpM,OAAxC;EAEI,IAAAqM,OAAA;;EACA,IAAA;IACFA,OAAA,GAAUtD,uBAAuBC,SAAjC;IAEA,IAAImD,UAAa,GAAAC,OAAjB;;IACA,IAAID,UAAc,IAAA,CAACG,WAAAA,CAAAA,SAAAA,CAAAA,CAAGC,UAAHD,CAAcH,UAAdG,CAAnB,EAA8C;MACtC,MAAA,IAAI/P,KAAJ,sCAAuC6P,OAAvC,QAAA;IACR,CAFA,MAEA,IAAW,CAACD,UAAZ,EAAwB;MACtBA,UAAA,GAAahH,WACVzG,GADU,CACL4H,SAAD,IAAehI,aAAAA,CAAAA,SAAAA,CAAAA,CAAKW,IAALX,CAAU0K,QAAV1K,EAAoBgI,SAApBhI,CADT,EAEVkI,IAFU,CAEJF,SAAD,IAAegG,WAAG,CAAA,SAAA,CAAHA,CAAGC,UAAHD,CAAchG,SAAdgG,CAFV,CAAb;IAGF;;IAEA,IAAI,CAACH,UAAL,EAAiB;MACT,MAAA,IAAI5P,KAAJ,mEAAoEyM,QAApE,QAAA;IACR;;IAEI,IAAAwD,MAAA;;IACA,IAAA;MAEI,MAAAC,GAAA,GAAMV,QAAQI,WAAd;;MACNK,MAAA,GAASC,GAAI,CAAAC,UAAJ,IAAkBD,GAAI,CAAAE,OAAtB,GAAgCF,IAAIE,OAApC,GAA8CF,GAAvD;KAHE,QAIKT,KAAP;MACM,MAAA,IAAIzP,KAAJ,+CAAgD4P,UAAhD,kBAAiEH,IAAIzN,OAArE,EAAA;IACR;;IAEA,IAAI,CAACiO,MAAL,EAAa;MACL,MAAA,IAAIjQ,KAAJ,CAAU,oDAAV,CAAA;IACR;;IAEa2P,UAAA,GAAA,MAAMU,2BAAAA,CAAcJ,MAAdI,EAAsBC,IAAtBD,CAA2BE,eAAAA,EAA3BF,EAAoCG,SAApCH,EAAN;GA7BX,QA8BK5P,OAAP;IACA,IAAIqP,OAAJ,EAAa;MACHA,OAAA;IACV;;IAEM,MAAArP,KAAA;EACR;;EAEQqP,OAAA;;EAER,IAAI,CAACH,UAAL,EAAiB;IACT,MAAA,IAAI3P,KAAJ,CAAU,iCAAV,CAAA;EACR;;EAEO,OAAA2P,UAAA;AACT;;AC5CA,IAAI,CAACc,cAAAA,CAAAA,YAAD,IAAiBC,cAAAA,CAAAA,UAArB,EAAiC;EAC/BC,oBAAA,CAAqBD,cAAU,CAAAA,UAA/B,CAAA;AACF;;AAEA,eAAeC,oBAAf,CAAoCtK,MAApC,EAAwE;EACtE,MAAM;IAACuK,SAAD;IAAYC,aAAZ;IAA2BC;EAA3B,IAAsCC,cAAAA,CAAAA,UAA5C;EACA,MAAMC,WAAW,MAAMC,kBAAA,CAAmB;IAACL,SAAD;IAAYC,aAAZ;IAA2BC;EAA3B,CAAnB,CAAvB;EACAzK,MAAA,CAAO6K,WAAP,CAAmBF,QAAnB;AACF;;AAEA,eAAsBG,cAAtB,CAAqCC,UAArC,EAAmG;EAC7F,IAAA,CAACC,iBAAkB,CAAAD,UAAA,CAAnB,EAAgC;IAC5B,MAAA,IAAIpR,KAAJ,CAAU,8CAAV,CAAA;EACR;;EAEA,IAAI,CAACyQ,cAAAA,CAAAA,YAAL,EAAmB;IACX,MAAA,IAAIzQ,KAAJ,CAAU,sDAAV,CAAA;EACR;;EAEM,MAAAsR,aAAA,GAAgBC,aAAAA,CAAAA,YAAAA,CAAa;IAACjP,IAAA,EAAM,SAAP;IAAkBgB,KAAO,EAAA;EAAzB,CAAbiO,CAAhB;EACA,MAAAC,YAAA,GAAeF,cAAc/L,YAAd,EAAf;;EACN,MAAMkM,eAAgBlP,IAAD,IAA+B,CAACiP,YAAa,CAAAtN,QAAb,CAAsB3B,KAAKD,IAA3B,CAArD;;EAEM,MAAAoP,IAAA,GAAO,MAAMC,sBAAA,CAAuBP,UAAvB,CAAb;EACN,MAAMJ,WAAWU,IAAK,CAAAvP,GAAL,CACf;IAAA,IAAC;MAACyP;IAAD,CAAD;IAAA,IAAkBC,GAAlB;;IAAA;MACEC,MAAA,EAAQP,aAAAA,CAAAA,YAAAA,CAAa;QAACjP,IAAM,EAAA,SAAP;QAAkBgB,OAAOsO,WAAY,CAAApP,MAAZ,CAAmBiP,YAAnB;MAAzB,CAAbF;IADV,GAEKM,GAFL;EAAA,CADe,CAAjB;EAOO,OAAAb,QAAA;AACT;;AAEA,SAASW,sBAAT,CAAgCP,UAAhC,EAAkG;EAChG,OAAO,IAAIW,OAAJ,CAAsC,CAACC,OAAD,EAAUC,MAAV,KAAqB;IAChE,MAAM;MAACrB,SAAD;MAAYC,aAAZ;MAA2BC;IAA3B,IAAsCM,UAA5C;IACM,MAAAc,MAAA,GAAS,IAAIC,qBAAJ,CAAWC,UAAX,EAAuB;MAACrB,UAAY,EAAA;QAACH,SAAD;QAAYC,aAAZ;QAA2BC;MAA3B;IAAb,CAAvB,CAAT;IACCoB,MAAA,CAAAG,EAAA,CAAG,SAAH,EAAcL,OAAd;IACAE,MAAA,CAAAG,EAAA,CAAG,OAAH,EAAYJ,MAAZ;IACAC,MAAA,CAAAG,EAAA,CAAG,MAAH,EAAYjF,IAAD,IAAU;MAC1B,IAAIA,IAAS,KAAA,CAAb,EAAgB6E,MAAA,CAAO,IAAIjS,KAAJ,yCAA2CoN,IAA3C,EAAP,CAAA;IACjB,CAFM;EAGR,CARM,CAAP;AASF;;AAEA,eAAe6D,kBAAf,QAME;EAAA,IANgC;IAChCL,SADgC;IAEhCC,aAFgC;IAGhCC;EAHgC,CAMhC;EACA,MAAMnB,aAAa,MAAMD,eAAA,CAAgB;IAACjD,QAAA,EAAUqE;EAAX,CAAhB,CAAzB;EACA,MAAMwB,aAAa3C,UAAW,CAAA9F,MAAX,CACjB,CAAC0I,KAAD,EAAQC,SAAR,KAAsBD,KAAA,GAAQC,UAAUC,gBAAV,CAA2BhK,MADxC,EAEjB,CAFiB,CAAnB;EAIA,MAAMiK,cAAcJ,UAAa,GAAA,CAAjC;EACM,MAAAK,cAAA,GAAiBhD,WAAWlH,MAAX,GAAoB,CAArC;EACA,MAAAmK,gBAAA,GAAmBnQ,OAAQ,CAAAmO,SAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,SAAA,CAAWiC,OAAX,CAA3B;;EAEF,IAAAlD,UAAA,CAAWlH,MAAX,KAAsB,CAAtB,EAAyB;IACrB,MAAA,IAAIzI,KAAJ,CAAU,+BAAV,CAAA;EACR;;EAEA,IAAIsS,eAAe,CAAnB,EAAsB;IACd,MAAA,IAAItS,KAAJ,CAAU,8CAAV,CAAA;EACR;;EAGK,IAAA,CAAA2S,cAAA,IAAkBD,WAAlB,KAAkC,CAACE,gBAAnC,EAAqD;IACxD,MAAM,IAAI5S,KAAJ,CAAUsM,2BAAV,uOAE0CuE,aAAiB,IAAA,eAF3D,EAAN;EAKF;;EAGA,IAAI,CAAC+B,gBAAL,EAAuB;IACrB,MAAM;MAACE,SAAD;MAAYC,OAAZ;MAAqBjB;IAArB,IAA+BnC,UAAA,CAAW,CAAX,CAAA,CAAc8C,gBAAd,CAA+B,CAA/B,CAArC;IACO,OAAA,CAAC;MAACb,WAAa,EAAAoB,sBAAA,CAAuBlB,MAAvB,CAAd;MAA8CgB,SAA9C;MAAyDC;IAAzD,CAAD,CAAA;EACT;;EAGA,MAAME,OAAU,GAAAC,iBAAA,CAAA,CAAkBtC,SAAW,IAAA,IAAX,GAAW,KAAA,CAAX,GAAWA,SAAA,CAAAiC,OAA7B,KAAwC,EAAxC,CAAhB;EACO,OAAAM,4BAAA,CAA6BF,OAA7B,EAAsCtD,UAAtC,CAAA;AACT;;AAEA,SAASwD,4BAAT,CACEF,OADF,EAEEtD,UAFF,EAG4B;EAC1B,MAAMyD,eAAyC,EAA/C;;EAEA,KAAA,MAAWC,MAAX,IAAqBJ,OAArB,EAA8B;IAC5B,MAAM;MAACT,SAAA,EAAWc,aAAZ;MAA2BC,MAAA,EAAQC;IAAnC,IAAiDH,MAAvD;;IACA,IAAI,CAACC,aAAD,IAAkB3D,UAAW,CAAAlH,MAAX,GAAoB,CAA1C,EAA6C;MAC3C,MAAM,IAAIzI,KAAJ,CACJ,yFADI,CAAN;IAGF;;IAIA,MAAMwS,SACJ,GAAA,CAACc,aAAD,IAAkB3D,UAAA,CAAWlH,MAAX,KAAsB,CAAxC,GACIkH,UAAA,CAAW,CAAX,CADJ,GAEIA,UAAA,CAAW1F,IAAX,CAAiBwJ,KAAD,IAAWA,KAAM,CAAAnR,IAAN,MAAgBgR,iBAAiB,SAAjC,CAA3B,CAHN;;IAKA,IAAI,CAACd,SAAL,EAAgB;MACd,MAAM,IAAIxS,KAAJ,uBAAwBsT,aAAA,IAAiB,SAAzC,kBAAN;IACF;;IAIA,MAAMC,SACJ,CAACC,UAAD,IAAehB,UAAUC,gBAAV,CAA2BhK,MAA3B,KAAsC,CAArD,GACI+J,SAAU,CAAAC,gBAAV,CAA2B,CAA3B,CADJ,GAEID,SAAA,CAAUC,gBAAV,CAA2BxI,IAA3B,CAAiCyJ,GAAD,IAASA,GAAI,CAAApR,IAAJ,MAAckR,cAAc,SAA5B,CAAzC,CAHN;;IAKA,IAAI,CAACD,MAAL,EAAa;MACX,MAAM,IAAIvT,KAAJ,oBACOwT,UAAc,IAAA,SADrB,yCAC2DF,aAAiB,IAAA,SAD5E,QAAN;IAGF;;IAEAF,YAAA,CAAa7J,IAAb,iCACK8J,MADL;MAEEN,SAASQ,MAAO,CAAAR,OAFlB;MAGED,WAAWS,MAAO,CAAAT,SAHpB;MAIElB,WAAA,EAAaoB,sBAAuB,CAAAO,MAAA,CAAOzB,MAAP;IAJtC;EAMF;;EAEO,OAAAsB,YAAA;AACT;;AAEA,SAASF,iBAAT,CACEjD,MADF,EAGsB;EAAA,IADpBL,UACoB,uEADP,eACO;;EACpB,IAAI,CAACzK,KAAA,CAAMC,OAAN,CAAc6K,MAAd,CAAL,EAA4B;IACpB,MAAA,IAAIjQ,KAAJ,gCAA+B4P,UAA/B,oCAAA;EACR;;EAEI,IAAAK,MAAA,CAAOxH,MAAP,KAAkB,CAAlB,EAAqB;IACjB,MAAA,IAAIzI,KAAJ,wCAAyC4P,UAAzC,QAAA;EACR;;EAEO,OAAAK,MAAA;AACT;;AAEA,SAASoB,iBAAT,CAA2BpB,MAA3B,EAAqF;EACnF,OAAOA,OAAO0D,kBAAP,IAA6B,CAApC;AACF;;AAEA,SAASX,sBAAT,CAAgClB,MAAhC,EAAuE;EACrE,MAAM8B,YAAY9B,MAAO,CAAAvO,SAAP,IAAoB;IAACD,KAAA,EAAO;EAAR,CAAtC;EACA,OAAOsQ,UAAUtQ,KAAV,CAAgBnB,GAAhB,CAAqBI,IAAD,IAAUsR,SAAA,CAAUtR,IAAV,CAA9B,CAAP;AACF;;AAEA,SAASsR,SAAT,CAAmBC,KAAnB,EAAwD;EACtD,OAAOC,MAAMD,MAAb;AACF;;AAEA,SAASC,KAAT,CAAeD,KAAf,EAAwC;EAClC,IAAA3O,KAAA,CAAMC,OAAN,CAAc0O,KAAd,CAAA,EAAsB;IACxB,OAAOA,KAAM,CAAA3R,GAAN,CAAW+H,IAAD,IAAU6J,KAAM,CAAA7J,IAAA,CAA1B,EAAiC1H,MAAjC,CAAyC0H,IAAD,IAAU,OAAOA,IAAP,KAAgB,WAAlE,CAAP;EACF;;EAEI,IAAA8J,gBAAA,CAAiBF,KAAjB,CAAA,EAAyB;IAC3B,OAAO5E,OAAO+E,IAAP,CAAYH,KAAZ,EAAmBjK,MAAnB,CAA0B,CAACqK,QAAD,EAAW9E,GAAX,KAAmB;MACzC8E,QAAA,CAAA9E,GAAA,CAAA,GAAO2E,KAAM,CAAAD,KAAA,CAAM1E,GAAN,CAAA,CAAb;MACF,OAAA8E,QAAA;IACT,CAHO,EAGJ,EAHI,CAAP;EAIF;;EAEO,OAAAC,WAAA,CAAYL,KAAZ,CAAA,GAAqBA,KAArB,GAA6B,KAAA,CAA7B;AACT;;AAEA,SAASE,gBAAT,CAA0BF,KAA1B,EAA4E;EAC1E,OAAOM,MAAAA,CAAAA,aAAAA,CAAcN,KAAdM,CAAP;AACF;;AAEA,SAASD,WAAT,CAAqBL,KAArB,EAA8C;EAC5C,MAAMvR,OAAO,OAAOuR,KAApB;;EACA,IAAIvR,IAAS,KAAA,SAAT,IAAsBA,IAAS,KAAA,QAA/B,IAA2CA,SAAS,QAAxD,EAAkE;IACzD,OAAA,IAAA;EACT;;EAEA,IAAIA,SAAS,QAAb,EAAuB;IACd,OAAA,KAAA;EACT;;EAEA,OAAO4C,MAAMC,OAAN,CAAc0O,KAAd,KAAwBA,KAAU,KAAA,IAAlC,IAA0CE,iBAAiBF,MAAlE;AACF;;ACzNO,SAASO,OAAT,CACL9R,IADK,EAEmB;EACxB,OAAOA,KAAKF,IAAL,KAAc,OAArB;AACF;;AAEO,SAASiS,UAAT,CACL/R,IADK,EAEkB;EACvB,OAAO,CAAC8R,OAAA,CAAQ9R,IAAR,CAAD,IAAkB,UAAUA,IAAnC;AACF;;AAEO,SAASgS,cAAT,CACLhS,IADK,EAE0B;EAC/B,OACE+R,UAAW,CAAA/R,IAAA,CAAX,IACAA,IAAA,CAAKA,IAAL,KAAc,QADd,IAEA4C,KAAA,CAAMC,OAAN,CAAc7C,IAAA,CAAKqD,UAAnB,CAFA,IAGArD,IAAK,CAAAqD,UAAL,CAAgB1B,QAAhB,CAAyB,UAAzB,CAJF;AAMF;;ACfA,MAAMsQ,gBAAgD,GAAA;EACpDC,EAAI,EAAAC,iBADgD;EAEpDC,MAAQ,EAAAC,qBAF4C;EAGpDC,GAAK,EAAAD,qBAH+C;EAIpDE,KAAO,EAAAC,mBAJ6C;EAKpDC,OAAS,EAAAD,mBAL2C;EAMpDtS,OAAS,EAAAwS,sBAN2C;EAOpDC,QAAU,EAAAC,mBAP0C;EAQpDC,IAAM,EAAAD,mBAR8C;EASpDjG,MAAQ,EAAAmG;AAT4C,CAAtD;;AAYO,SAASC,qBAAT,CAA6BhS,KAA7B,EAA2F;EAChG,MAAMiS,SAAY,GAAAjS,KAAA,CACfd,MADe,CACR8R,UADQ,EAEf9R,MAFe,CAGbD,IAAD,IAAUA,IAAA,CAAKA,IAAL,KAAc,QAAd,IAA0BA,KAAKqD,UAA/B,IAA6CrD,IAAA,CAAKqD,UAAL,CAAgB1B,QAAhB,CAAyB,UAAzB,CAHzC,CAAlB;EAMO,OAAAqR,SAAA,CAAUpT,GAAV,CAAeI,IAAD,IAAU;IACvB,MAAAD,IAAA,aAAUC,IAAK,CAAAD,IAAf,WAAA;IACA,MAAAoF,MAAA,GAAS8N,cAAAA,CAAQjT,IAAK,CAAAmF,MAAL,CAAYvF,GAAZ,CAAgBsT,oBAAhB,CAARD,EAA6ChT,MAA7CgT,CAAoD/S,OAApD+S,CAAT;IACC,OAAA;MAAClT,IAAD;MAAOD,IAAA,EAAM,aAAb;MAA4BqF,MAAA,EAAQ,CAAC,GAAGA,MAAJ,EAAY,GAAGgO,oBAAmB,EAAlC;IAApC,CAAA;EACR,CAJM,CAAA;AAKT;;AAEA,SAASD,oBAAT,CAA4BzP,KAA5B,EAAmD;EAC7C,IAAAwO,gBAAA,CAAexO,MAAMzD,IAArB,CAAA,EAA4B;IACvB,OAAAiS,gBAAA,CAAexO,KAAM,CAAAzD,IAArB,CAAAiS,CAA2BxO,KAA3BwO,CAAA;EACT;;EAEI,IAAAxO,KAAA,CAAM3D,IAAN,KAAe,MAAf,EAAuB;IACzB,OAAOsT,iBAAkB,EAAzB;EACF;;EAEA,IAAI3P,MAAM7B,WAAV,EAAuB;IACrB,OAAOyR,uBAAuB5P,MAA9B;EACF;;EAEA,OAAO6P,uBAAwB,EAA/B;AACF;;AAEA,SAASC,YAAT,CAAsB9P,KAAtB,EAA4D;EAAA,IAAf+P,QAAe,uEAAJ,EAAI;EACpD,MAAAC,MAAA,GAASD,QAAW,cAAIA,QAAJ,IAAiB,EAArC;EACC,iBAAG/P,MAAMgB,SAAT,SAAqBgP,MAArB;AACT;;AAEA,SAASN,oBAAT,GAAkD;EACzC,OAAA,CACL;IACE1O,SAAW,EAAA,YADb;IAEEzE,IAAM,EAAA,IAFR;IAGEoE,WAAa,EAAA,gDAHf;IAIEsP,UAAY,EAAA;MACVC,UAAY,EAAA;IADF;EAJd,CADK,EASL;IACElP,SAAW,EAAA,UADb;IAEEzE,IAAM,EAAA,SAFR;IAGEoE,WAAa,EAAA,+BAHf;IAIEsP,UAAY,EAAA;MACVjQ,KAAO,EAAA,KADG;MAEVkQ,UAAY,EAAA;IAFF;EAJd,CATK,CAAA;AAmBT;;AAEA,SAASC,oBAAT,CAA8BnQ,KAA9B,EAAiF;EACxE,OAAA;IACLgB,SAAA,EAAW8O,aAAa9P,MADnB;IAELzD,MAAMyD,KAAM,CAAAzD,IAFP;IAGLoE,WAAa,EAAA,6CAHR;IAILsP,UAAY,EAAA;MACVjQ,OAAOA,KAAM,CAAAgB,SADH;MAEVkP,UAAY,EAAA;IAFF;EAJP,CAAA;AAST;;AAEA,SAASE,sBAAT,CAAgCpQ,KAAhC,EAAmF;EAC1E,OAAA;IACLgB,SAAA,EAAW8O,YAAa,CAAA9P,KAAA,EAAO,KAAP,CADnB;IAELzD,MAAMyD,KAAM,CAAAzD,IAFP;IAGLoE,WAAa,EAAA,iDAHR;IAILsP,UAAY,EAAA;MACVjQ,OAAOA,KAAM,CAAAgB,SADH;MAEVkP,UAAY,EAAA;IAFF;EAJP,CAAA;AAST;;AAEA,SAASG,oBAAT,CAA8BrQ,KAA9B,EAAmF;EACjF,OAAO,CAACmQ,oBAAqB,CAAAnQ,KAAA,CAAtB,EAA8BoQ,sBAAA,CAAuBpQ,KAAvB,CAA9B,CAAP;AACF;;AAEA,SAASsQ,iBAAT,CAA2BtQ,KAA3B,EAAgF;EACvE,OAAA,CACL;IACEgB,SAAA,EAAW8O,YAAa,CAAA9P,KAAA,EAAO,IAAP,CAD1B;IAEEzD,MAAMyD,KAAM,CAAAzD,IAFd;IAGEoE,WAAa,EAAA,yCAHf;IAIEsP,UAAY,EAAA;MACVjQ,OAAOA,KAAM,CAAAgB,SADH;MAEVkP,UAAY,EAAA;IAFF;EAJd,CADK,EAUL;IACElP,SAAA,EAAW8O,YAAa,CAAA9P,KAAA,EAAO,KAAP,CAD1B;IAEEzD,MAAMyD,KAAM,CAAAzD,IAFd;IAGEoE,WAAa,EAAA,qDAHf;IAIEsP,UAAY,EAAA;MACVjQ,OAAOA,KAAM,CAAAgB,SADH;MAEVkP,UAAY,EAAA;IAFF;EAJd,CAVK,EAmBL;IACElP,SAAA,EAAW8O,YAAa,CAAA9P,KAAA,EAAO,IAAP,CAD1B;IAEEzD,MAAMyD,KAAM,CAAAzD,IAFd;IAGEoE,WAAa,EAAA,4CAHf;IAIEsP,UAAY,EAAA;MACVjQ,OAAOA,KAAM,CAAAgB,SADH;MAEVkP,UAAY,EAAA;IAFF;EAJd,CAnBK,EA4BL;IACElP,SAAA,EAAW8O,YAAa,CAAA9P,KAAA,EAAO,KAAP,CAD1B;IAEEzD,MAAMyD,KAAM,CAAAzD,IAFd;IAGEoE,WAAa,EAAA,wDAHf;IAIEsP,UAAY,EAAA;MACVjQ,OAAOA,KAAM,CAAAgB,SADH;MAEVkP,UAAY,EAAA;IAFF;EAJd,CA5BK,CAAA;AAsCT;;AAEA,SAASjB,sBAAT,CAA8BjP,KAA9B,EAAmF;EACjF,OAAOqQ,qBAAqBrQ,MAA5B;AACF;;AAEA,SAAS0O,iBAAT,CAAyB1O,KAAzB,EAA8E;EAC5E,OAAO4O,sBAAoB5O,MAA3B;AACF;;AAEA,SAASmP,mBAAT,CAA2BnP,KAA3B,EAAgF;EAC9E,OAAOqQ,qBAAqBrQ,MAArB,CAA4BxC,MAA5B,CAAmC8S,iBAAA,CAAkBtQ,KAAlB,CAAnC,CAAP;AACF;;AAEA,SAAS4O,qBAAT,CAA6B5O,KAA7B,EAAkF;EACzE,OAAA,CACL,GAAGqQ,qBAAqBrQ,MADnB,EAEL;IACEgB,SAAA,EAAW8O,YAAa,CAAA9P,KAAA,EAAO,SAAP,CAD1B;IAEEzD,IAAM,EAAA,QAFR;IAGEoE,WAAa,EAAA,oDAHf;IAIEsP,UAAY,EAAA;MACVjQ,OAAOA,KAAM,CAAAgB,SADH;MAEVkP,UAAY,EAAA;IAFF;EAJd,CAFK,EAWL;IACElP,SAAA,EAAW8O,YAAa,CAAA9P,KAAA,EAAO,IAAP,CAD1B;IAEE3D,IAAM,EAAA,MAFR;IAGE4G,QAAU,EAAA;MACR1G,IAAM,EAAA,QADE;MAER2I,UAAY,EAAA;IAFJ,CAHZ;IAOEvE,WAAa,EAAA,6CAPf;IAQEsP,UAAY,EAAA;MACVjQ,OAAOA,KAAM,CAAAgB,SADH;MAEVkP,UAAY,EAAA;IAFF;EARd,CAXK,EAwBL;IACElP,SAAA,EAAW8O,YAAa,CAAA9P,KAAA,EAAO,QAAP,CAD1B;IAEE3D,IAAM,EAAA,MAFR;IAGE4G,QAAU,EAAA;MACR1G,IAAM,EAAA,QADE;MAER2I,UAAY,EAAA;IAFJ,CAHZ;IAOEvE,WAAa,EAAA,kDAPf;IAQEsP,UAAY,EAAA;MACVjQ,OAAOA,KAAM,CAAAgB,SADH;MAEVkP,UAAY,EAAA;IAFF;EARd,CAxBK,CAAA;AAsCT;;AAEA,SAASnB,mBAAT,CAA6B/O,KAA7B,EAAkF;EAChF,OAAOqQ,qBAAqBrQ,MAArB,CAA4BxC,MAA5B,CAAmC8S,iBAAA,CAAkBtQ,KAAlB,CAAnC,CAAP;AACF;;AAEA,SAASqP,mBAAT,CAA6BrP,KAA7B,EAAkF;EAChF,OAAO,EAAP;AACF;;AAEA,SAAS2P,iBAAT,GAAiD;EAC/C,OAAO,EAAP;AACF;;AAEA,SAASE,uBAAT,GAAuD;EACrD,OAAO,EAAP;AACF;;AAEA,SAASD,sBAAT,CAAgC5P,KAAhC,EAAqF;EAC5E,OAAA,CACL;IACEgB,SAAA,EAAW8O,aAAa9P,MAD1B;IAEEzD,IAAM,EAAA,IAFR;IAGE0T,UAAY,EAAA;MACVjQ,KAAA,YAAUA,KAAM,CAAAgB,SAAhB,UADU;MAEVkP,UAAY,EAAA;IAFF;EAHd,CADK,CAAA;AAUT;;AClOA,SAASK,iBAAT,CAA2BjU,IAA3B,EAAiD;EAC/C,MAAMkU,KAAQ,GAAA1S,MAAAA,CAAAA,SAAAA,CAAUxB,IAAVwB,EAAgB2S,KAAhB3S,CAAsB,GAAtBA,CAAd;EACM,MAAA4S,IAAA,GAAOF,KAAM,CAAAA,KAAA,CAAM/N,MAAN,GAAe,CAAf,CAAb;EACN,MAAMkO,MAAS,GAAAC,kBAAA,CAAA,SAAA,CAAAA,CAAUF,IAAK,CAAAG,WAAL,EAAVD,CAAf;EACAJ,KAAA,CAAMA,KAAM,CAAA/N,MAAN,GAAe,CAArB,CAAA,GAA0B5G,MAAAA,CAAAA,UAAAA,CAAW8U,MAAX9U,CAA1B;EACO,OAAA2U,KAAA,CAAM9T,IAAN,CAAW,EAAX,CAAA;AACT;;AAEgB,SAAAoU,qBAAA,CACdxT,KADc,EAEdyT,OAFc,EAGK;EACnB,MAAMC,UAA6B,EAAnC;EACA,MAAMzB,SAAY,GAAAjS,KAAA,CACfd,MADe,CACR8R,UADQ,EAEf9R,MAFe,CAGbD,IAAD,IAAUA,IAAA,CAAKA,IAAL,KAAc,QAAd,IAA0BA,KAAKqD,UAA/B,IAA6CrD,IAAA,CAAKqD,UAAL,CAAgB1B,QAAhB,CAAyB,UAAzB,CAHzC,CAAlB;EAOUqR,SAAA,CAAAlU,OAAA,CAASkB,IAAD,IAAU;IAC1ByU,OAAA,CAAQzN,IAAR,CAAa;MACXvC,WAAWzE,IAAK,CAAAD,IADL;MAEXC,MAAMA,IAAK,CAAAD,IAFA;MAGX2U,WAAa,EAAA,CACX;QACEjR,KAAO,EAAA,KADT;QAEEkQ,UAAY,EAAA,QAFd;QAGEjH,KAAO,EAAA;UAAC5M,IAAM,EAAA,eAAP;UAAwB6U,SAAS;QAAjC;MAHT,CADW,CAHF;MAUXC,IAAM,EAAA,CACJ;QACE7U,IAAM,EAAA,IADR;QAEEqE,WAAA,YAAgBpE,IAAK,CAAAD,IAArB,iBAFF;QAGEC,IAAM,EAAA,IAHR;QAIE2I,UAAY,EAAA;MAJd,CADI;IAVK,CAAb;EAmBD,CApBS;EAuBAqK,SAAA,CAAAlU,OAAA,CAASkB,IAAD,IAAU;IACpB,MAAA6U,UAAA,aAAgB7U,IAAK,CAAAD,IAArB,WAAA;IACN,MAAM+U,YAAYN,OAAQ,CAAA9M,IAAR,CAAczH,MAAD,IAAYA,MAAA,CAAOF,IAAP,KAAgB8U,UAAzC,CAAlB;IACAJ,OAAA,CAAQzN,IAAR,CAAa;MACXvC,SAAW,eAAMuP,iBAAkB,CAAAhU,IAAA,CAAKD,IAAL,CAAxB,CADA;MAEXE,MAAQ,uBAAaD,IAAK,CAAA2E,YAAL,IAAqB3E,IAAK,CAAAD,IAAvC,OAFG;MAGXC,IAAM,EAAA;QACJF,IAAM,EAAA,MADF;QAEJ6I,UAAY,EAAA,KAFR;QAGJjC,UAAU;UAAC1G,IAAA,EAAMA,IAAK,CAAAD,IAAZ;UAAkB4I,YAAY;QAA9B;MAHN,CAHK;MAQXiM,IAAM,EAAAE,SAAA,GACF,CAAC;QAAC/U,MAAM,OAAP;QAAgBC,IAAA,EAAM6U,UAAtB;QAAkCE,aAAA,EAAe;MAAjD,CAAD,EAAyD,GAAGC,kBAAmB,EAA/E,CADE,GAEFA,kBAAmB;IAVZ,CAAb;EAYD,CAfS;EAiBH,OAAAP,OAAA;AACT;;AAEA,SAASO,kBAAT,GAAuD;EAC9C,OAAA,CACL;IACEjV,IAAM,EAAA,OADR;IAEEC,IAAM,EAAA,KAFR;IAGEoE,WAAa,EAAA,yBAHf;IAIE2Q,aAAe,EAAA;EAJjB,CADK,EAOL;IACEhV,IAAM,EAAA,QADR;IAEEC,IAAM,EAAA,KAFR;IAGEoE,WAAa,EAAA,mDAHf;IAIE2Q,aAAe,EAAA;EAJjB,CAPK,CAAA;AAcT;;AC/EA,IAAeE,IAAA,GAACC,SAAD,IAA4D;EACnE,MAAAV,OAAA,GAAUzB,qBAAoB,CAAAmC,SAAA,CAAUnU,KAAV,CAA9B;EACN,MAAM0T,OAAU,GAAAF,qBAAA,CAAoBW,SAAU,CAAAnU,KAA9B,EAAqCyT,OAArC,CAAhB;EACA,MAAMzT,QAAQ,CAAC,GAAGmU,SAAU,CAAAnU,KAAd,EAAqB,GAAGyT,OAAxB,CAAd;EACA,OAAO;IAACzT,KAAD;IAAQ0T,OAAR;IAAiBpR,YAAY6R,SAAU,CAAA7R,UAAvC;IAAmD8R,YAAY;EAA/D,CAAP;AACF,CALA;;ACFO,SAASzC,oBAAT,GAAiD;EAC/C,OAAA;IACL3S,IAAM,EAAA,eADD;IAELD,IAAM,EAAA,aAFD;IAGLsV,kBAAoB,EAAA,IAHf;IAILjQ,MAAQ,EAAA,CACN;MACEV,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,SAFR;MAGEoE,WAAa,EAAA;IAHf,CADM,EAMN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,SAFR;MAGEoE,WAAa,EAAA;IAHf,CANM;EAJH,CAAA;AAiBT;;AClBO,SAASwO,iBAAT,GAA8C;EAC5C,OAAA;IACL7S,IAAM,EAAA,YADD;IAELD,IAAM,EAAA,aAFD;IAGLsV,kBAAoB,EAAA,IAHf;IAILjQ,MAAQ,EAAA,CACN;MACEV,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,MAFR;MAGEoE,WAAa,EAAA;IAHf,CADM,EAMN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,MAFR;MAGEoE,WAAa,EAAA;IAHf,CANM,EAWN;MACEK,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,MAFR;MAGEoE,WAAa,EAAA;IAHf,CAXM,EAgBN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,MAFR;MAGEoE,WAAa,EAAA;IAHf,CAhBM,EAqBN;MACEK,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,MAFR;MAGEoE,WAAa,EAAA;IAHf,CArBM,EA0BN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,MAFR;MAGEoE,WAAa,EAAA;IAHf,CA1BM;EAJH,CAAA;AAqCT;;ACtCO,SAASiR,qBAAT,GAAkD;EAChD,OAAA;IACLtV,IAAM,EAAA,gBADD;IAELD,IAAM,EAAA,aAFD;IAGLsV,kBAAoB,EAAA,IAHf;IAILjQ,MAAQ,EAAA,CACN;MACEV,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,UAFR;MAGEoE,WAAa,EAAA;IAHf,CADM,EAMN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,UAFR;MAGEoE,WAAa,EAAA;IAHf,CANM,EAWN;MACEK,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,UAFR;MAGEoE,WAAa,EAAA;IAHf,CAXM,EAgBN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,UAFR;MAGEoE,WAAa,EAAA;IAHf,CAhBM,EAqBN;MACEK,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,UAFR;MAGEoE,WAAa,EAAA;IAHf,CArBM,EA0BN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,UAFR;MAGEoE,WAAa,EAAA;IAHf,CA1BM;EAJH,CAAA;AAqCT;;ACtCO,SAASkR,uBAAT,GAAkD;EAChD,OAAA;IACLvV,IAAM,EAAA,gBADD;IAELD,IAAM,EAAA,aAFD;IAGLsV,kBAAoB,EAAA,IAHf;IAILjQ,MAAQ,EAAA,CACN;MACEV,SAAW,EAAA,YADb;MAEEzE,IAAM,EAAA,IAFR;MAGEoE,WAAa,EAAA;IAHf,CADM,EAMN;MACEK,SAAW,EAAA,UADb;MAEEzE,IAAM,EAAA,SAFR;MAGEoE,WAAa,EAAA;IAHf,CANM;EAJH,CAAA;AAiBT;;AClBO,SAASmR,kBAAT,GAA+C;EAC7C,OAAA;IACLxV,IAAM,EAAA,aADD;IAELD,IAAM,EAAA,aAFD;IAGLsV,kBAAoB,EAAA,IAHf;IAILjQ,MAAQ,EAAA,CACN;MACEV,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,OAFR;MAGEoE,WAAa,EAAA;IAHf,CADM,EAMN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,OAFR;MAGEoE,WAAa,EAAA;IAHf,CANM,EAWN;MACEK,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,OAFR;MAGEoE,WAAa,EAAA;IAHf,CAXM,EAgBN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,OAFR;MAGEoE,WAAa,EAAA;IAHf,CAhBM,EAqBN;MACEK,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,OAFR;MAGEoE,WAAa,EAAA;IAHf,CArBM,EA0BN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,OAFR;MAGEoE,WAAa,EAAA;IAHf,CA1BM;EAJH,CAAA;AAqCT;;ACtCO,SAAS+N,eAAT,GAA4C;EAC1C,OAAA;IACLpS,IAAM,EAAA,UADD;IAELD,IAAM,EAAA,aAFD;IAGLsV,kBAAoB,EAAA,IAHf;IAILjQ,MAAQ,EAAA,CACN;MACEV,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,IAFR;MAGEoE,WAAa,EAAA;IAHf,CADM,EAMN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,IAFR;MAGEoE,WAAa,EAAA;IAHf,CANM,EAWN;MACEK,SAAW,EAAA,SADb;MAEEzE,IAAM,EAAA,IAFR;MAGEoE,WAAa,EAAA;IAHf,CAXM,EAgBN;MACEK,SAAW,EAAA,IADb;MAEE3E,IAAM,EAAA,MAFR;MAGE4G,QAAU,EAAA;QACR1G,IAAM,EAAA,IADE;QAER2I,UAAY,EAAA;MAFJ,CAHZ;MAOEvE,WAAa,EAAA;IAPf,CAhBM,EAyBN;MACEK,SAAW,EAAA,KADb;MAEE3E,IAAM,EAAA,MAFR;MAGE4G,QAAU,EAAA;QACR1G,IAAM,EAAA,IADE;QAER2I,UAAY,EAAA;MAFJ,CAHZ;MAOEvE,WAAa,EAAA;IAPf,CAzBM;EAJH,CAAA;AAwCT;;ACzCO,SAASoR,oBAAT,GAAiD;EAC/C,OAAA;IACLzV,IAAM,EAAA,WADD;IAELD,IAAM,EAAA,aAFD;IAGLsV,kBAAoB,EAAA,IAHf;IAILjQ,MAAQ,EAAA,CACN;MACEV,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,KAFR;MAGEoE,WAAa,EAAA;IAHf,CADM,EAMN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,KAFR;MAGEoE,WAAa,EAAA;IAHf,CANM,EAWN;MACEK,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,KAFR;MAGEoE,WAAa,EAAA;IAHf,CAXM,EAgBN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,KAFR;MAGEoE,WAAa,EAAA;IAHf,CAhBM,EAqBN;MACEK,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,KAFR;MAGEoE,WAAa,EAAA;IAHf,CArBM,EA0BN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,KAFR;MAGEoE,WAAa,EAAA;IAHf,CA1BM;EAJH,CAAA;AAqCT;;ACtCO,SAASiO,mBAAT,GAAgD;EAC9C,OAAA;IACLtS,IAAM,EAAA,cADD;IAELD,IAAM,EAAA,aAFD;IAGLsV,kBAAoB,EAAA,IAHf;IAILjQ,MAAQ,EAAA,CACN;MACEV,SAAW,EAAA,IADb;MAEEzE,IAAM,EAAA,QAFR;MAGEoE,WAAa,EAAA;IAHf,CADM,EAMN;MACEK,SAAW,EAAA,KADb;MAEEzE,IAAM,EAAA,QAFR;MAGEoE,WAAa,EAAA;IAHf,CANM,EAWN;MACEK,SAAW,EAAA,SADb;MAEEzE,IAAM,EAAA,QAFR;MAGEoE,WAAa,EAAA;IAHf,CAXM,EAgBN;MACEK,SAAW,EAAA,IADb;MAEE3E,IAAM,EAAA,MAFR;MAGE4G,QAAU,EAAA;QACR1G,IAAM,EAAA,QADE;QAER2I,UAAY,EAAA;MAFJ,CAHZ;MAOEvE,WAAa,EAAA;IAPf,CAhBM,EAyBN;MACEK,SAAW,EAAA,KADb;MAEE3E,IAAM,EAAA,MAFR;MAGE4G,QAAU,EAAA;QACR1G,IAAM,EAAA,QADE;QAER2I,UAAY,EAAA;MAFJ,CAHZ;MAOEvE,WAAa,EAAA;IAPf,CAzBM;EAJH,CAAA;AAwCT;;AChCA,MAAMqR,aAAkD,GAAA;EACtDnD,GAAK,EAAA,QADiD;EAEtDoD,IAAM,EAAA,QAFgD;EAGtDC,KAAO,EAAA;AAH+C,CAAxD;AAQA,MAAM1D,gBAAgD,GAAA;EACpDC,EAAI,EAAAC,eADgD;EAEpDC,MAAQ,EAAAC,mBAF4C;EAGpDE,KAAO,EAAAgD,kBAH6C;EAIpD9C,OAAS,EAAA+C,oBAJ2C;EAKpDtV,OAAS,EAAAwS,oBAL2C;EAMpDC,QAAU,EAAA0C,qBAN0C;EAOpDxC,IAAM,EAAAD,iBAP8C;EAQpDgD,QAAU,EAAAN;AAR0C,CAAtD;;AAWO,SAASvC,qBAAT,CAA6BhS,KAA7B,EAA2F;EAC1F,MAAA8U,eAAA,GAAkBlJ,MAAO,CAAA+E,IAAP,CAAYO,gBAAZ,CAAlB;EACA,MAAA6D,iBAAA,GAAoBnJ,MAAO,CAAAoJ,MAAP,CAAc9D,gBAAd,CAApB;EACN,MAAM+D,WAAc,GAAAjV,KAAA,CACjBd,MADiB,CACV8R,UADU,EAEjB9R,MAFiB,CAGfD,IAAD,IACEA,IAAK,CAAAA,IAAL,KAAc,QAAd,IACA,CAAC,CAAC,OAAD,EAAU,MAAV,EAAkB2B,QAAlB,CAA2B3B,IAAK,CAAAD,IAAhC,CADD,IAEA,CAACC,IAAA,CAAKqD,UAFN,IAGA,CAACwS,eAAA,CAAgBlU,QAAhB,CAAyB3B,IAAA,CAAKA,IAA9B,CAPa,CAApB;EAUM,MAAAiD,UAAA,GAAalC,MAAMd,MAAN,CAAa6R,OAAb,EAAsBlS,GAAtB,CAA2BI,IAAD,IAAUA,IAAA,CAAKD,IAAzC,CAAb;EACN,MAAMkW,aAAgB,GAAAlV,KAAA,CACnBd,MADmB,CACZ8R,UADY,EAEnB9R,MAFmB,CAGjBD,IAAD,IAAUA,IAAA,CAAKA,IAAL,KAAc,QAAd,IAA0BA,KAAKqD,UAA/B,IAA6CrD,IAAA,CAAKqD,UAAL,CAAgB1B,QAAhB,CAAyB,UAAzB,CAHrC,CAAtB;EAMM,MAAAuU,kBAAA,GAAqBC,2BAAyBL,kBAA9C;EACN,MAAMM,iBAAoB,GAAAC,yBAAA,CAAwBL,WAAxB,EAAqC;IAAC/S;EAAD,CAArC,CAA1B;EACA,MAAMqT,mBAAsB,GAAAC,2BAAA,CAA0BN,aAA1B,EAAyC;IAAChT;EAAD,CAAzC,CAA5B;EAEA,OAAO,CAAC,GAAGiT,kBAAJ,EAAwB,GAAGE,iBAA3B,EAA8C,GAAGE,mBAAjD,CAAP;AACF;;AAEA,SAASH,0BAAT,CAAkCL,iBAAlC,EAAyF;EACvF,OAAOA,iBAAkB,CAAAlW,GAAlB,CAAuB4W,aAAD,IAAmBA,eAAzC,CAAP;AACF;;AAEA,SAASH,yBAAT,CACEL,WADF,EAEE9U,OAFF,EAGqB;EACZ,OAAA8U,WAAA,CAAYpW,GAAZ,CAAiB6W,UAAD,KAAiB;IACtC1W,IAAA,YAAS0W,UAAW,CAAA1W,IAApB,WADsC;IAEtCD,IAAM,EAAA,aAFgC;IAGtCqF,MAAA,EAAQ+N,oBAAmB,CAAAuD,UAAA,EAAYvV,OAAZ;EAHW,CAAjB,CAAhB,CAAA;AAKT;;AAEA,SAASqV,2BAAT,CACEN,aADF,EAEE/U,OAFF,EAGqB;EACZ,OAAA+U,aAAA,CAAcrW,GAAd,CAAmB8W,YAAD,KAAmB;IAC1C3W,IAAA,YAAS2W,YAAa,CAAA3W,IAAtB,WAD0C;IAE1CD,IAAM,EAAA,aAFoC;IAG1CqF,MAAA,EAAQ,CAAC,GAAGgO,oBAAA,EAAJ,EAA0B,GAAGD,oBAAA,CAAmBwD,YAAnB,EAAiCxV,OAAjC,CAA7B;EAHkC,CAAnB,CAAlB,CAAA;AAKT;;AAEA,SAASgS,oBAAT,CAA4BuD,UAA5B,EAAuDvV,OAAvD,EAAwF;EAChF,MAAA;IAAC+B;EAAD,IAAe/B,OAAf;EACN,OAAOuV,WAAWtR,MAAX,CACJlF,MADI,CAEFwD,KAAD,IAAWA,KAAM,CAAAzD,IAAN,KAAe,MAAf,IAAyByD,KAAA,CAAM3D,IAAN,KAAe,MAAxC,IAAkD,CAACmD,UAAA,CAAWtB,QAAX,CAAoB8B,KAAA,CAAMzD,IAA1B,CAF3D,EAIJJ,GAJI,CAIC6D,KAAD,KAAY;IACfgB,WAAWhB,KAAM,CAAAgB,SADF;IAEfzE,IAAM,YAAGyV,aAAY,CAAAhS,KAAA,CAAMzD,IAAN,CAAZyV,IAA2BhS,KAAM,CAAAzD,IAApC,WAFS;IAGf4B,aAAa6B,KAAM,CAAA7B;EAHJ,CAAZ,CAJA,CAAP;AASF;;AAEA,SAASuR,oBAAT,GAA8B;EACrB,OAAA,CACL;IACE1O,SAAW,EAAA,GADb;IAEEzE,IAAM,EAAA,gBAFR;IAGEoE,WAAa,EAAA;EAHf,CADK,CAAA;AAOT;;ACrGA,MAAMuS,cAAe,GAAA,CACnB,SADmB,EAEnB,MAFmB,EAGnB,UAHmB,EAInB,OAJmB,EAKnB,OALmB,EAMnB,IANmB,EAOnB,SAPmB,EAQnB,QARmB,EASnB,MATmB,EAUnB,KAVmB,CAArB;AAaA,MAAMC,oBAAoC,GAAA;EACxC7W,IAAM,EAAA,WADkC;EAExCD,IAAM,EAAA,MAFkC;EAGxCiW,MAAQ,EAAA,CACN;IACEhW,IAAM,EAAA,KADR;IAEEqE,WAAa,EAAA,wCAFf;IAGEsI,KAAO,EAAA;EAHT,CADM,EAMN;IACE3M,IAAM,EAAA,MADR;IAEEqE,WAAa,EAAA,yCAFf;IAGEsI,KAAO,EAAA;EAHT,CANM;AAHgC,CAA1C;;AAiBO,SAASmK,sBAAT,CACL9V,KADK,EAEgC;EACrC,MAAMiV,WAAc,GAAAjV,KAAA,CAAMd,MAAN,CAAa8R,UAAb,EAAyB9R,MAAzB,CACjBD,IAAD,IACEA,IAAK,CAAAA,IAAL,KAAc,QAAd,IACA,CAAC,CAAC,OAAD,EAAU,MAAV,EAAkB2B,QAAlB,CAA2B3B,IAAK,CAAAD,IAAhC,CADD,IAEA,CAACC,IAAA,CAAKqD,UAFN,IAGA,CAACsT,cAAA,CAAahV,QAAbgV,CAAsB3W,IAAA,CAAKD,IAA3B4W,CALe,CAApB;EAQM,MAAAV,aAAA,GAAgBlV,KAAM,CAAAd,MAAN,CAAa+R,cAAb,CAAhB;;EAEN,MAAM7N,SAAY,GAACnE,IAAD,IAA2BA,IAAA,CAAKmF,MAAL,CAAYe,MAAZ,GAAqB,CAAlE;;EAEM,MAAA4Q,kBAAA,GAAqBC,2BAAyBf,YAA9C;EACA,MAAAgB,oBAAA,GAAuBC,6BAA2BhB,cAAlD;EACA,MAAAiB,WAAA,GAAc,CAAC,GAAGJ,kBAAJ,EAAwB,GAAGE,oBAA3B,EAAiD/W,MAAjD,CAAwDkE,SAAxD,CAAd;EAEC,OAAA,CAAC,GAAG+S,WAAJ,EAAiBN,oBAAjB,CAAA;AACT;;AAEA,SAASG,0BAAT,CAAkCf,WAAlC,EAAmF;EAC1E,OAAAA,WAAA,CAAYpW,GAAZ,CAAiB6W,UAAD,KAAiB;IACtC1W,IAAA,YAAS0W,UAAW,CAAA1W,IAApB,YADsC;IAEtCD,IAAM,EAAA,aAFgC;IAGtCqF,MAAA,EAAQsR,WAAWtR,MAAX,CACLlF,MADK,CACGwD,KAAD,IAAWA,KAAA,CAAMzD,IAAN,KAAe,MAAf,IAAyByD,KAAM,CAAA3D,IAAN,KAAe,MADrD,EAELG,MAFK,CAEGwD,KAAD,IAAW,CAACA,MAAM7B,WAFpB,EAGLhC,GAHK,CAGA6D,KAAD,KAAY;MACfgB,WAAWhB,KAAM,CAAAgB,SADF;MAEfzE,IAAA,EAAM2W,eAAahV,QAAbgV,CAAsBlT,KAAA,CAAMzD,IAA5B2W,IAAoCC,oBAAA,CAAmB7W,IAAvD4W,aAAiElT,KAAM,CAAAzD,IAAvE2W;IAFS,CAAZ,CAHC;EAH8B,CAAjB,CAAhB,CAAA;AAWT;;AAEA,SAASM,4BAAT,CAAoChB,aAApC,EAAuF;EAC9E,OAAAA,aAAA,CAAcrW,GAAd,CAAmB8W,YAAD,KAAmB;IAC1C3W,IAAA,YAAS2W,YAAa,CAAA3W,IAAtB,YAD0C;IAE1CD,IAAM,EAAA,aAFoC;IAG1CqF,MAAA,EAAQuR,aAAavR,MAAb,CACLlF,MADK,CACGwD,KAAD,IAAWA,KAAA,CAAMzD,IAAN,KAAe,MAAf,IAAyByD,KAAM,CAAA3D,IAAN,KAAe,MADrD,EAELG,MAFK,CAEGwD,KAAD,IAAW,CAACA,MAAM7B,WAFpB,EAGLhC,GAHK,CAGA6D,KAAD,KAAY;MACfgB,WAAWhB,KAAM,CAAAgB,SADF;MAEfzE,IAAA,EAAM2W,eAAahV,QAAbgV,CAAsBlT,KAAA,CAAMzD,IAA5B2W,IAAoCC,oBAAA,CAAmB7W,IAAvD4W,aAAiElT,KAAM,CAAAzD,IAAvE2W;IAFS,CAAZ,CAHC;EAHkC,CAAnB,CAAlB,CAAA;AAWT;;AC7EgB,SAAApC,qBAAA,CACdxT,KADc,EAEdoW,QAFc,EAGK;EACnB,MAAM1C,UAA6B,EAAnC;EACM,MAAAzB,SAAA,GAAYjS,KAAM,CAAAd,MAAN,CAAa+R,cAAb,CAAZ;;EACA,MAAAoF,UAAA,GAAcpX,IAAD,IACjBmX,QAAS,CAAAhV,IAAT,CAAekV,OAAD,IAAaA,OAAQ,CAAAtX,IAAR,eAAoBC,IAAA,CAAKD,IAAzB,YAA3B,CADI;;EAIN0U,OAAA,CAAQzN,IAAR,CAAa;IACXvC,SAAW,EAAA,UADA;IAEXzE,IAAM,EAAA,UAFK;IAGX0U,WAAa,EAAA,CACX;MACEjR,KAAO,EAAA,KADT;MAEEkQ,UAAY,EAAA,IAFd;MAGEjH,KAAO,EAAA;QAAC5M,IAAM,EAAA,eAAP;QAAwB6U,SAAS;MAAjC;IAHT,CADW,CAHF;IAUXC,IAAM,EAAA,CACJ;MACE7U,IAAM,EAAA,IADR;MAEEqE,WAAa,EAAA,aAFf;MAGEpE,IAAM,EAAA,IAHR;MAIE2I,UAAY,EAAA;IAJd,CADI;EAVK,CAAb;EAqBUqK,SAAA,CAAAlU,OAAA,CAASkB,IAAD,IAAU;IAC1ByU,OAAA,CAAQzN,IAAR,CAAa;MACXvC,WAAWzE,IAAK,CAAAD,IADL;MAEXC,MAAMA,IAAK,CAAAD,IAFA;MAGX2U,WAAa,EAAA,CACX;QACEjR,KAAO,EAAA,KADT;QAEEkQ,UAAY,EAAA,IAFd;QAGEjH,KAAO,EAAA;UAAC5M,IAAM,EAAA,eAAP;UAAwB6U,SAAS;QAAjC;MAHT,CADW,CAHF;MAUXC,IAAM,EAAA,CACJ;QACE7U,IAAM,EAAA,IADR;QAEEqE,WAAA,YAAgBpE,IAAK,CAAAD,IAArB,iBAFF;QAGEC,IAAM,EAAA,IAHR;QAIE2I,UAAY,EAAA;MAJd,CADI;IAVK,CAAb;EAmBD,CApBS;EAuBAqK,SAAA,CAAAlU,OAAA,CAASkB,IAAD,IAAU;IAC1B,MAAMqX,UAAmC,EAAzC;;IACI,IAAAD,UAAA,CAAWpX,IAAX,CAAA,EAAkB;MACpBqX,OAAA,CAAQrQ,IAAR,CAAa;QACXjH,IAAM,EAAA,MADK;QAEXC,IAAM,EAAA;UACJF,IAAM,EAAA,MADF;UAEJ6I,UAAY,EAAA,IAFR;UAGJjC,QAAU,EAAA;YACR1G,IAAA,YAASA,IAAK,CAAAD,IAAd,YADQ;YAER4I,UAAY,EAAA;UAFJ;QAHN;MAFK,CAAb;IAWF;;IAEA8L,OAAA,CAAQzN,IAAR,CAAa;MACXvC,SAAW,eAAMnF,MAAAA,CAAAA,UAAAA,CAAWU,IAAA,CAAKD,IAAhBT,CAAN,CADA;MAEXW,MAAQ,uBAAaD,IAAK,CAAA2E,YAAL,IAAqB3E,IAAK,CAAAD,IAAvC,OAFG;MAGXC,IAAM,EAAA;QACJF,IAAM,EAAA,MADF;QAEJ6I,UAAY,EAAA,KAFR;QAGJjC,UAAU;UAAC1G,IAAA,EAAMA,IAAK,CAAAD,IAAZ;UAAkB4I,YAAY;QAA9B;MAHN,CAHK;MAQXiM,IAAM,EAAA,CACJ;QACE7U,IAAM,EAAA,OADR;QAEEC,IAAA,YAASA,IAAK,CAAAD,IAAd,WAFF;QAGEgV,aAAe,EAAA;MAHjB,CADI,EAMJ,GAAGsC,OANC,EAOJ;QACEtX,IAAM,EAAA,OADR;QAEEC,IAAM,EAAA,KAFR;QAGEoE,WAAa,EAAA,yBAHf;QAIE2Q,aAAe,EAAA;MAJjB,CAPI,EAaJ;QACEhV,IAAM,EAAA,QADR;QAEEC,IAAM,EAAA,KAFR;QAGEoE,WAAa,EAAA,mDAHf;QAIE2Q,aAAe,EAAA;MAJjB,CAbI;IARK,CAAb;EA6BD,CA7CS;EA+CH,OAAAN,OAAA;AACT;;ACrGA,IAAe6C,IAAA,GAACpC,SAAD,IAA4D;EACnE,MAAAV,OAAA,GAAUzB,qBAAoB,CAAAmC,SAAA,CAAUnU,KAAV,CAA9B;EACA,MAAAoW,QAAA,GAAWN,sBAAqB,CAAA3B,SAAA,CAAUnU,KAAV,CAAhC;EACN,MAAM0T,OAAU,GAAAF,qBAAA,CACdW,SAAU,CAAAnU,KADI,EAEdoW,SAASlX,MAAT,CAAiBsX,IAAD,IAAmCA,IAAA,CAAKzX,IAAL,KAAc,aAAjE,CAFc,CAAhB;EAIM,MAAAiB,KAAA,GAAQ,CAAC,GAAGmU,SAAA,CAAUnU,KAAd,EAAqB,GAAGyT,OAAxB,EAAiC,GAAG2C,QAApC,CAAR;EAEN,OAAO;IAACpW,KAAD;IAAQ0T,OAAR;IAAiBpR,YAAY6R,SAAU,CAAA7R,UAAvC;IAAmD8R,YAAY;EAA/D,CAAP;AACF,CAVA;;ACHO,SAASG,qBAAT,GAAkD;EAChD,OAAA;IACLvV,IAAM,EAAA,uBADD;IAELD,IAAM,EAAA,aAFD;IAGLsV,kBAAoB,EAAA,IAHf;IAILjQ,MAAQ,EAAA,CACN;MACEV,SAAW,EAAA,YADb;MAEEzE,IAAM,EAAA,IAFR;MAGEoE,WAAa,EAAA;IAHf,CADM,EAMN;MACEK,SAAW,EAAA,UADb;MAEEzE,IAAM,EAAA,SAFR;MAGEoE,WAAa,EAAA;IAHf,CANM;EAJH,CAAA;AAiBT;;ACTA,MAAMqR,WAAkD,GAAA;EACtDnD,GAAK,EAAA,QADiD;EAEtDoD,IAAM,EAAA,QAFgD;EAGtDC,KAAO,EAAA;AAH+C,CAAxD;AAQA,MAAM1D,cAAgD,GAAA;EACpDC,EAAI,EAAAC,eADgD;EAEpDC,MAAQ,EAAAC,mBAF4C;EAGpDE,KAAO,EAAAgD,kBAH6C;EAIpD9C,OAAS,EAAA+C,oBAJ2C;EAKpDtV,OAAS,EAAAwS,oBAL2C;EAMpDC,QAAU,EAAA0C,qBAN0C;EAOpDxC,IAAM,EAAAD,iBAP8C;EAQpDgD,QAAU,EAAAN;AAR0C,CAAtD;;AAWO,SAASvC,mBAAT,CAA6BhS,KAA7B,EAA2F;EAC1F,MAAA8U,eAAA,GAAkBlJ,MAAO,CAAA+E,IAAP,CAAYO,cAAZ,CAAlB;EACA,MAAA6D,iBAAA,GAAoBnJ,MAAO,CAAAoJ,MAAP,CAAc9D,cAAd,CAApB;EACN,MAAM+D,WAAc,GAAAjV,KAAA,CAAMd,MAAN,CAAa8R,UAAb,EAAyB9R,MAAzB,CACjBD,IAAD,IACEA,IAAK,CAAAA,IAAL,KAAc,QAAd,IACA,CAAC,CAAC,OAAD,EAAU,MAAV,EAAkB2B,QAAlB,CAA2B3B,IAAK,CAAAD,IAAhC,CADD,IAEA,CAACC,IAAA,CAAKqD,UAFN,IAGA,CAACwS,eAAA,CAAgBlU,QAAhB,CAAyB3B,IAAA,CAAKA,IAA9B,CALe,CAApB;EAQM,MAAAiD,UAAA,GAAalC,MAAMd,MAAN,CAAa6R,OAAb,EAAsBlS,GAAtB,CAA2BI,IAAD,IAAUA,IAAA,CAAKD,IAAzC,CAAb;EACN,MAAMkW,gBAAgBlV,KAAM,CAAAd,MAAN,CACnBD,IAAD,IAAyCA,IAAA,CAAKD,IAAL,KAAc,UAAd,IAA4BiS,eAAehS,KADhE,CAAtB;EAIM,MAAAkW,kBAAA,GAAqBC,yBAAyBL,kBAA9C;EACN,MAAMM,iBAAoB,GAAAC,uBAAA,CAAwBL,WAAxB,EAAqC;IAAC/S;EAAD,CAArC,CAA1B;EACA,MAAMqT,mBAAsB,GAAAC,yBAAA,CAA0BN,aAA1B,EAAyC;IAAChT;EAAD,CAAzC,CAA5B;EAEA,OAAOiT,kBAAmB,CAAAjV,MAAnB,CAA0BmV,iBAA1B,EAA6CnV,MAA7C,CAAoDqV,mBAApD,CAAP;AACF;;AAEA,SAASH,wBAAT,CAAkCL,iBAAlC,EAAyF;EACvF,OAAOA,iBAAkB,CAAAlW,GAAlB,CAAuB4W,aAAD,IAAmBA,eAAzC,CAAP;AACF;;AAEA,SAASH,uBAAT,CACEL,WADF,EAEE9U,OAFF,EAGqB;EACZ,OAAA8U,WAAA,CAAYpW,GAAZ,CAAiB6W,UAAD,KAAiB;IACtC1W,IAAA,YAAS0W,UAAW,CAAA1W,IAApB,WADsC;IAEtCD,IAAM,EAAA,aAFgC;IAGtCqF,MAAA,EAAQ+N,kBAAmB,CAAAuD,UAAA,EAAYvV,OAAZ;EAHW,CAAjB,CAAhB,CAAA;AAKT;;AAEA,SAASqV,yBAAT,CACEN,aADF,EAEE/U,OAFF,EAGqB;EACZ,OAAA+U,aAAA,CAAcrW,GAAd,CAAmB8W,YAAD,KAAmB;IAC1C3W,IAAA,YAAS2W,YAAa,CAAA3W,IAAtB,WAD0C;IAE1CD,IAAM,EAAA,aAFoC;IAG1CqF,MAAA,EAAQ,CAAC,GAAGgO,kBAAA,EAAJ,EAA0B,GAAGD,kBAAA,CAAmBwD,YAAnB,EAAiCxV,OAAjC,CAA7B;EAHkC,CAAnB,CAAlB,CAAA;AAKT;;AAEA,SAASgS,kBAAT,CAA4BuD,UAA5B,EAAuDvV,OAAvD,EAAwF;EAChF,MAAA;IAAC+B;EAAD,IAAe/B,OAAf;;EACF,IAAA,CAACuV,WAAWtR,MAAZ,EAAoB;IACtB,OAAO,EAAP;EACF;;EAEA,OAAOsR,WAAWtR,MAAX,CACJlF,MADI,CAEFwD,KAAD,IAAWA,KAAM,CAAAzD,IAAN,KAAe,MAAf,IAAyByD,KAAA,CAAM3D,IAAN,KAAe,MAAxC,IAAkD,CAACmD,UAAA,CAAWtB,QAAX,CAAoB8B,KAAA,CAAMzD,IAA1B,CAF3D,EAIJJ,GAJI,CAIC6D,KAAD,KAAY;IACfgB,WAAWhB,KAAM,CAAAgB,SADF;IAEfzE,IAAM,YAAGyV,WAAY,CAAAhS,KAAA,CAAMzD,IAAN,CAAZ,IAA2ByD,KAAM,CAAAzD,IAApC,WAFS;IAGf4B,aAAa6B,KAAM,CAAA7B;EAHJ,CAAZ,CAJA,CAAP;AASF;;AAEA,SAASuR,kBAAT,GAA8B;EACrB,OAAA,CACL;IACE1O,SAAW,EAAA,GADb;IAEEzE,IAAM,EAAA,uBAFR;IAGEoE,WAAa,EAAA;EAHf,CADK,CAAA;AAOT;;AC/FA,MAAMuS,YAAe,GAAA,CACnB,SADmB,EAEnB,MAFmB,EAGnB,UAHmB,EAInB,OAJmB,EAKnB,OALmB,EAMnB,IANmB,EAOnB,SAPmB,EAQnB,QARmB,EASnB,MATmB,EAUnB,KAVmB,CAArB;AAaA,MAAMC,kBAAoC,GAAA;EACxC7W,IAAM,EAAA,WADkC;EAExCD,IAAM,EAAA,MAFkC;EAGxCiW,MAAQ,EAAA,CACN;IACEhW,IAAM,EAAA,KADR;IAEEqE,WAAa,EAAA,wCAFf;IAGEsI,KAAO,EAAA;EAHT,CADM,EAMN;IACE3M,IAAM,EAAA,MADR;IAEEqE,WAAa,EAAA,yCAFf;IAGEsI,KAAO,EAAA;EAHT,CANM;AAHgC,CAA1C;;AAiBO,SAASmK,oBAAT,CACL9V,KADK,EAEgC;EACrC,MAAMiV,WAAc,GAAAjV,KAAA,CAAMd,MAAN,CAAa8R,UAAb,EAAyB9R,MAAzB,CACjBD,IAAD,IACEA,IAAK,CAAAA,IAAL,KAAc,QAAd,IACA,CAAC,CAAC,OAAD,EAAU,MAAV,EAAkB2B,QAAlB,CAA2B3B,IAAK,CAAAD,IAAhC,CADD,IAEA,CAACC,IAAA,CAAKqD,UAFN,IAGA,CAACsT,YAAA,CAAahV,QAAb,CAAsB3B,IAAA,CAAKD,IAA3B,CALe,CAApB;EAOA,MAAMkW,gBAAgBlV,KAAM,CAAAd,MAAN,CACnBD,IAAD,IAAyCA,IAAA,CAAKD,IAAL,KAAc,UAAd,IAA4BiS,eAAehS,KADhE,CAAtB;;EAIA,MAAMmE,SAAY,GAACnE,IAAD,IAA2BA,IAAA,CAAKmF,MAAL,CAAYe,MAAZ,GAAqB,CAAlE;;EAEM,MAAA4Q,kBAAA,GAAqBC,yBAAyBf,YAA9C;EACA,MAAAgB,oBAAA,GAAuBC,2BAA2BhB,cAAlD;EACA,MAAAiB,WAAA,GAAc,CAAC,GAAGJ,kBAAJ,EAAwB,GAAGE,oBAA3B,EAAiD/W,MAAjD,CAAwDkE,SAAxD,CAAd;EAEC,OAAA,CAAC,GAAG+S,WAAJ,EAAiBN,kBAAjB,CAAA;AACT;;AAEA,SAASG,wBAAT,CAAkCf,WAAlC,EAAmF;EAC1E,OAAAA,WAAA,CAAYpW,GAAZ,CAAiB6W,UAAD,KAAiB;IACtC1W,IAAA,YAAS0W,UAAW,CAAA1W,IAApB,YADsC;IAEtCD,IAAM,EAAA,aAFgC;IAGtCqF,MAAA,EAAQsR,WAAWtR,MAAX,CACLlF,MADK,CACGwD,KAAD,IAAWA,KAAA,CAAMzD,IAAN,KAAe,MAAf,IAAyByD,KAAM,CAAA3D,IAAN,KAAe,MADrD,EAELG,MAFK,CAEGwD,KAAD,IAAW,CAACA,MAAM7B,WAFpB,EAGLhC,GAHK,CAGA6D,KAAD,KAAY;MACfgB,WAAWhB,KAAM,CAAAgB,SADF;MAEfzE,IAAA,EAAM2W,aAAahV,QAAb,CAAsB8B,KAAA,CAAMzD,IAA5B,IAAoC4W,kBAAA,CAAmB7W,IAAvD,aAAiE0D,KAAM,CAAAzD,IAAvE;IAFS,CAAZ,CAHC;EAH8B,CAAjB,CAAhB,CAAA;AAWT;;AAEA,SAASiX,0BAAT,CAAoChB,aAApC,EAAuF;EAC9E,OAAAA,aAAA,CAAcrW,GAAd,CAAmB8W,YAAD,KAAmB;IAC1C3W,IAAA,YAAS2W,YAAa,CAAA3W,IAAtB,YAD0C;IAE1CD,IAAM,EAAA,aAFoC;IAG1CqF,MAAA,EAAQuR,aAAavR,MAAb,CACLlF,MADK,CACGwD,KAAD,IAAWA,KAAA,CAAMzD,IAAN,KAAe,MAAf,IAAyByD,KAAM,CAAA3D,IAAN,KAAe,MADrD,EAELG,MAFK,CAEGwD,KAAD,IAAW,CAACA,MAAM7B,WAFpB,EAGLhC,GAHK,CAGA6D,KAAD,KAAY;MACfgB,WAAWhB,KAAM,CAAAgB,SADF;MAEfzE,IAAA,EAAM2W,aAAahV,QAAb,CAAsB8B,KAAA,CAAMzD,IAA5B,IAAoC4W,kBAAA,CAAmB7W,IAAvD,aAAiE0D,KAAM,CAAAzD,IAAvE;IAFS,CAAZ,CAHC;EAHkC,CAAnB,CAAlB,CAAA;AAWT;;ACpFgB,SAAAuU,mBAAA,CACdxT,KADc,EAEdoW,QAFc,EAGK;EACnB,MAAM1C,UAA6B,EAAnC;EACM,MAAAwB,aAAA,GAAgBlV,KAAM,CAAAd,MAAN,CAAa+R,cAAb,CAAhB;EAEN,MAAMwF,oBAAoBvB,aAAc,CAAArW,GAAd,CAAmB6X,OAAD,IAC1C1M,IAAA,CAAKC,SAAL,CAAeyM,OAAQ,CAAA9S,YAAR,IAAwB8S,QAAQ1X,IAA/C,CADwB,CAA1B;EAGA,MAAM2X,eAAkB,uBAAaF,iBAAkB,CAAArX,IAAlB,CAAuB,IAAvB,CAAb,MAAxB;EAEA,MAAMwX,oBAAoB5W,KAAM,CAAA2G,IAAN,CAAY1H,IAAD,IAAUA,IAAA,CAAKD,IAAL,KAAc,UAAnC,CAA1B;;EACA,IAAI,CAAC4X,iBAAD,IAAsB7F,OAAQ,CAAA6F,iBAAA,CAAlC,EAAsD;IAC9C,MAAA,IAAIla,KAAJ,CAAU,mCAAV,CAAA;EACR;;EAEA,MAAMuV,SAAY,GAAA,CAAC,GAAGiD,aAAJ,EAAmB0B,iBAAnB,CAAlB;;EACM,MAAAP,UAAA,GAAcpX,IAAD,IACjBmX,QAAS,CAAAhV,IAAT,CAAekV,OAAD,IAAaA,OAAQ,CAAAtX,IAAR,eAAoBC,IAAA,CAAKD,IAAzB,YAA3B,CADI;;EAIIiT,SAAA,CAAAlU,OAAA,CAASkB,IAAD,IAAU;IAC1ByU,OAAA,CAAQzN,IAAR,CAAa;MACXvC,WAAWzE,IAAK,CAAAD,IADL;MAEXC,MAAMA,IAAK,CAAAD,IAFA;MAGX2U,WAAa,EAAA,CACX;QACEjR,KAAO,EAAA,KADT;QAEEkQ,UAAY,EAAA,IAFd;QAGEjH,KAAO,EAAA;UAAC5M,IAAM,EAAA,eAAP;UAAwB6U,SAAS;QAAjC;MAHT,CADW,CAHF;MAUXC,IAAM,EAAA,CACJ;QACE7U,IAAM,EAAA,IADR;QAEEqE,WAAA,YAAgBpE,IAAK,CAAAD,IAArB,iBAFF;QAGEC,IAAM,EAAA,IAHR;QAIE2I,UAAY,EAAA;MAJd,CADI;IAVK,CAAb;EAmBD,CApBS;EAuBAqK,SAAA,CAAAlU,OAAA,CAASkB,IAAD,IAAU;IAC1B,MAAMqX,UAAmC,EAAzC;;IACI,IAAAD,UAAA,CAAWpX,IAAX,CAAA,EAAkB;MACpBqX,OAAA,CAAQrQ,IAAR,CAAa;QACXjH,IAAM,EAAA,MADK;QAEXC,IAAM,EAAA;UACJF,IAAM,EAAA,MADF;UAEJ6I,UAAY,EAAA,IAFR;UAGJjC,QAAU,EAAA;YACR1G,IAAA,YAASA,IAAK,CAAAD,IAAd,YADQ;YAER4I,UAAY,EAAA;UAFJ;QAHN;MAFK,CAAb;IAWF;;IAEA8L,OAAA,CAAQzN,IAAR,CAAa;MACXvC,SAAW,eAAMnF,MAAAA,CAAAA,UAAAA,CAAWU,IAAA,CAAKD,IAAhBT,CAAN,CADA;MAEXW,MACE,EAAAD,IAAA,CAAKD,IAAL,KAAc,UAAd,IAA4BC,KAAKF,IAAL,KAAc,WAA1C,GACI4X,eADJ,sBAEgB3M,IAAK,CAAAC,SAAL,CAAehL,IAAK,CAAA2E,YAAL,IAAqB3E,KAAKD,IAAzC,CAFhB,CAHS;MAMXC,IAAM,EAAA;QACJF,IAAM,EAAA,MADF;QAEJ6I,UAAY,EAAA,KAFR;QAGJjC,UAAU;UAAC1G,IAAA,EAAMA,IAAK,CAAAD,IAAZ;UAAkB4I,YAAY;QAA9B;MAHN,CANK;MAWXiM,IAAM,EAAA,CACJ;QACE7U,IAAM,EAAA,OADR;QAEEC,IAAA,YAASA,IAAK,CAAAD,IAAd,WAFF;QAGEgV,aAAe,EAAA;MAHjB,CADI,EAMJ,GAAGsC,OANC,EAOJ;QACEtX,IAAM,EAAA,OADR;QAEEC,IAAM,EAAA,KAFR;QAGEoE,WAAa,EAAA,yBAHf;QAIE2Q,aAAe,EAAA;MAJjB,CAPI,EAaJ;QACEhV,IAAM,EAAA,QADR;QAEEC,IAAM,EAAA,KAFR;QAGEoE,WAAa,EAAA,mDAHf;QAIE2Q,aAAe,EAAA;MAJjB,CAbI;IAXK,CAAb;EAgCD,CAhDS;EAkDH,OAAAN,OAAA;AACT;;ACvFA,IAAemD,IAAA,GAAC1C,SAAD,IAA4D;EACnE,MAAAyC,iBAAA,GAAoBzC,UAAU7R,UAAV,CAAqBqE,IAArB,CAA2BmQ,KAAD,IAAWA,KAAA,CAAM9X,IAAN,KAAe,UAApD,CAApB;;EACN,IAAI,CAAC4X,iBAAD,IAAsB7F,OAAQ,CAAA6F,iBAAA,CAAlC,EAAsD;IAC9C,MAAA,IAAIla,KAAJ,CAAU,mCAAV,CAAA;EACR;;EAEA,MAAMsD,KAAQ,GAAA,CAAC,GAAGmU,SAAA,CAAUnU,KAAd,EAAqB4W,iBAArB,CAAd;EAEM,MAAAnD,OAAA,GAAUzB,oBAAoBhS,MAA9B;EACA,MAAAoW,QAAA,GAAWN,qBAAqB9V,MAAhC;EACN,MAAM0T,OAAU,GAAAF,mBAAA,CACdxT,KADc,EAEdoW,SAASlX,MAAT,CAAiBsX,IAAD,IAAmCA,IAAA,CAAKzX,IAAL,KAAc,aAAjE,CAFc,CAAhB;EAIM,MAAAgY,YAAA,GAAe,CAAC,GAAG5C,SAAA,CAAUnU,KAAd,EAAqB,GAAGyT,OAAxB,EAAiC,GAAG2C,QAApC,CAAf;EAEC,OAAA;IAACpW,OAAO+W,YAAR;IAAsBrD,OAAtB;IAA+BpR,YAAY6R,SAAU,CAAA7R,UAArD;IAAiE8R,YAAY;EAA7E,CAAA;AACT,CAjBA;;ACMA,MAAM4C,gBAAmB,GAAA,MAAzB;AACA,MAAMC,WAAc,GAAA;EAClB/C,IADkB;EAElBqC,IAFkB;EAGlBM;AAHkB,CAApB;AAMA,MAAMK,UAAa,GAAA,eAAnB;AACA,MAAMC,aAAA,GAAgBC,OAAQ,CAAAC,MAAR,CAAeC,KAAf,IAAwBF,OAAA,CAAQG,GAAR,CAAYC,IAAZ,KAAqB,MAA7C,IAAuD,EAAE,QAAQJ,OAAQ,CAAAG,GAAlB,CAA7E;AAEA,MAAME,eAAA,GAA4B,CAAC,4BAAD,CAAlC;AACA,MAAMC,kBAA4B,EAAlC;;AAW8B,eAAAC,sBAAA,CAC5B9D,IAD4B,EAE5B/K,OAF4B,EAGb;EAET,MAAA8O,KAAA,GAAQ,MAAMC,aAAA,CAAchE,IAAd,CAAd;EACN,MAAM;IAACiE,KAAD;IAAQC,MAAR;IAAgBxJ,GAAA,EAAKyJ;EAArB,IAAiCJ,KAAvC;EAEA,MAAM;IAACK,SAAD;IAAYpa,MAAZ;IAAoBqa;EAApB,IAA8BpP,OAApC;EAEI,IAAAqP,OAAA;EAEJ,MAAMC,SAASH,SAAU,CAAA;IACvBI,WAAa,EAAA,IADU;IAEvBC,cAAgB,EAAA;EAFO,CAAA,CAAzB;EAKM,MAAA3I,OAAA,GAAU,MAAM9B,cAAA,CAAe/E,OAAf,CAAhB;EACN,MAAMyP,cAA4B,EAAlC;EAEM,MAAAC,QAAA,GAAA,mBAAepR,KAAf;EACA,MAAAqR,MAAA,GAAA,mBAAarR,KAAb;;EACN,KAAA,MAAW2I,MAAX,IAAqBJ,OAArB,EAA8B;IACtB,MAAA+I,OAAA,GAAU,CAAC3I,MAAO,CAAAN,OAAR,EAAiBM,OAAO4I,GAAP,IAAc,SAA/B,EAA0CvZ,IAA1C,CAA+C,GAA/C,CAAV;;IACF,IAAAoZ,QAAA,CAASI,GAAT,CAAaF,OAAb,CAAA,EAAuB;MACnB,MAAA,IAAIhc,KAAJ,sEAAwEgc,OAAxE,OAAA;IACR;;IAEA,IAAI3I,OAAO8I,EAAX,EAAe;MACT,IAAA,OAAO9I,OAAO8I,EAAd,KAAqB,QAArB,IAAiC,CAAC3B,UAAW,CAAA4B,IAAX,CAAgB/I,MAAO,CAAA8I,EAAvB,CAAlC,EAA8D;QAChE,MAAM,IAAInc,KAAJ,oCACuBqT,MAAO,CAAA8I,EAD9B,2DAAN;MAGF;;MAEA,IAAIJ,MAAO,CAAAG,GAAP,CAAW7I,MAAO,CAAA8I,EAAlB,CAAJ,EAA2B;QACzB,MAAM,IAAInc,KAAJ,yDAA2DqT,MAAA,CAAO8I,EAAlE,OAAN;MACF;;MAEOJ,MAAA,CAAAM,GAAA,CAAIhJ,OAAO8I,EAAX;IACT;;IAEAL,QAAA,CAASO,GAAT,CAAaL,OAAb;EACF;;EAEW,KAAA,MAAAM,KAAA,IAAShB,QAAY,IAAA,EAArB,EAAyB;IAC9B,IAAA,CAACrI,QAAQvO,IAAR,CAAc2O,MAAD,IAAYA,MAAO,CAAA8I,EAAP,KAAcG,KAAvC,CAAD,EAAgD;MAC5C,MAAA,IAAItc,KAAJ,iCAAkCsc,KAAlC,kBAAA;IACR;EACF;;EAEA,IAAIhB,QAAJ,EAAc;IACZna,MAAA,CAAOob,IAAP,0CAA8CjB,QAAS,CAAA5Y,IAAT,CAAc,IAAd,CAA9C;EACF;;EAEA,IAAIsJ,KAAQ,GAAA,CAAA,CAAZ;;EACA,KAAA,MAAWqH,MAAX,IAAqBJ,OAArB,EAA8B;IACxB,IAAAqI,QAAA,KAAa,CAACjI,MAAO,CAAA8I,EAAR,IAAc,CAACb,QAAS,CAAApX,QAAT,CAAkBmP,MAAO,CAAA8I,EAAzB,CAA5B,CAAA,EAA2D;MAC7D;IACF;;IAEAnQ,KAAA;IAEM,MAAA;MAAC8G,SAAD;MAAYC,OAAZ;MAAqByJ,UAArB;MAAiCP,MAAM,SAAvC;MAAkDlX,qBAAlD;MAAyE+M;IAAzE,IAAmFuB,MAAnF;IACN,MAAM2I,UAAU,CAACjJ,OAAD,EAAUkJ,GAAV,EAAevZ,IAAf,CAAoB,GAApB,CAAhB;IACA+Y,OAAA,GAAUta,MAAO,CAAAsa,OAAP,mCAA0CO,OAA1C,GAAqDS,KAArD,EAAV;IAEA,IAAI/E,aAAiCrE,MAAO,CAAAqE,UAA5C;;IACA,IAAI,CAAC3E,OAAL,EAAc;MACN,MAAA,IAAI/S,KAAJ,iDAAmDgM,KAAnD,EAAA;IACR;;IAEA,MAAM0Q,gBAAgBhB,MAAO,CAAAiB,KAAP,GAAe1M,MAAf,CAAsB;MAAC6C;IAAD,CAAtB,CAAtB;IACA,MAAM;MAAC8J,iBAAD;MAAoBC;IAApB,IAAyC,MAAMC,qBAAA,CACnDJ,aADmD,EAEnD3J,OAFmD,EAGnDkJ,GAHmD,CAArD;IAKAvE,UAAA,GAAa,MAAMqF,oBAAqB,CAAA;MACtCH,iBADsC;MAEtCI,mBAAqB,EAAAtF,UAFiB;MAGtC1L,KAHsC;MAItCoP,KAJsC;MAKtCja,MALsC;MAMtCqa;IANsC,CAAA,CAAxC;;IASA,IAAI,CAAC9D,UAAL,EAAiB;MAEf+D,OAAA,CAAQwB,IAAR;MACA;IACF;;IAEI,IAAA,CAACC,yBAA0B,CAAAxF,UAAA,CAA3B,EAAwC;MAC1C,MAAM,IAAI1X,KAAJ,oCAAqC0X,UAArC,iCAAqE1L,KAArE,EAAN;IACF;;IAEM,MAAAmR,gBAAA,GAAmB,MAAMC,sBAAuB,CAAA;MACpD/B,MADoD;MAEpDI,OAFoD;MAGpD4B,uBAAyB,EAAAb,UAH2B;MAIpDc,0BAA4B,EAAAT,iBAJwB;MAKpDrB;IALoD,CAAA,CAAhD;IAQF,IAAA+B,OAAA;;IACA,IAAA;MACF,MAAMC,iBAAiBjD,WAAY,CAAA7C,UAAA,CAAnC;MACM,MAAAD,SAAA,GAAY7S,wBAAwBkN,QAAQ;QAChD/M;MADgD,EAA5C;MAINwY,OAAA,GAAUC,eAAe/F,UAAzB;KANE,QAOKhI,KAAP;MACAgM,OAAA,CAAQwB,IAAR;;MAEA,IAAIxN,eAAe1O,WAAnB,EAAgC;QAC9B0O,GAAA,CAAIvO,KAAJ,CAAUC,MAAV;QACAuZ,OAAA,CAAQ+C,IAAR,CAAa,CAAb;MACF;;MAEM,MAAAhO,GAAA;IACR;;IAEI,IAAAiO,KAAA;;IACA,IAAA;MACMA,KAAA,GAAA,MAAMhB,cAAc9c,OAAd,CAA0C;QACtDM,GAAA,0BAAsB6S,OAAtB,cAAiCkJ,GAAjC,cADsD;QAEtD1b,MAAQ,EAAA,MAF8C;QAGtDG,IAAM,EAAA;UAACyc,gBAAD;UAAmBrL,MAAA,EAAQyL;QAA3B,CAHgD;QAItDjd,YAAc,EAAA;MAJwC,CAA1C,CAAN;KADN,QAOKmP,KAAP;MACM,MAAAkO,eAAA,GAAkBha,MAAAA,CAAAA,GAAAA,CAAI8L,GAAJ9L,EAAS,+BAATA,CAAlB;MACN8X,OAAA,CAAQwB,IAAR;MACA,MAAMU,eAAkB,GAAA,IAAI3d,KAAJ,CAAU2d,eAAV,CAAA,GAA6BlO,GAArD;IACF;;IAGA,IAAI,CAACmO,aAAc,CAAAF,KAAA,EAAO;MAACjC,OAAD;MAAUL;IAAV,CAAP,CAAnB,EAA6C;MAE3C,IAAIC,MAAJ,EAAY;QACVI,OAAA,CAAQwB,IAAR;QACAY,qBAAA,CAAsBH,KAAtB,EAA6Bvc,MAA7B,CAAA;QACAuZ,OAAA,CAAQ+C,IAAR,CAAa,CAAb;MACF;;MAEA,IAAI,CAAChD,aAAL,EAAoB;QAClBgB,OAAA,CAAQwB,IAAR;QACAY,qBAAA,CAAsBH,KAAtB,EAA6Bvc,MAA7B,CAAA;QACA,MAAM,IAAInB,KAAJ,CACJ,yGADI,CAAN;MAGF;;MAEAyb,OAAA,CAAQqC,IAAR;MACAD,qBAAA,CAAsBH,KAAtB,EAA6Bvc,MAA7B,CAAA;MACM,MAAA4c,YAAA,GAAe,MAAMvC,MAAA,CAAOwC,MAAP,CAAc;QACvCzb,IAAM,EAAA,SADiC;QAEvCP,OAAS,EAAA,gEAF8B;QAGvCoO,OAAS,EAAA;MAH8B,CAAd,CAArB;;MAMN,IAAI,CAAC2N,YAAL,EAAmB;QACjBtC,OAAA,CAAQwB,IAAR;QACA;MACF;;MAEAxB,OAAA,CAAQwC,OAAR;KA7BF,UA8BW5C,QAAQ;MACjBI,OAAA,CAAQwC,OAAR;MACA9c,MAAA,CAAOD,KAAP,CAAa,kDAAb;MACAwZ,OAAA,CAAQ+C,IAAR,CAAa,CAAb;IACF;;IAEA5B,WAAA,CAAYtS,IAAZ,CAAiB;MACfuJ,SADe;MAEfC,OAFe;MAGfkJ,GAHe;MAIfkB,gBAJe;MAKfrL,MAAQ,EAAAyL;IALO,CAAjB;EAOF;;EAGApc,MAAA,CAAOD,KAAP,CAAa,EAAb;;EAEA,KAAA,MAAWgd,IAAX,IAAmBrC,WAAnB,EAAgC;IAC9B,MAAM;MAAC9I,OAAD;MAAUkJ,GAAV;MAAenK,MAAf;MAAuBgB,SAAvB;MAAkCqK;IAAlC,IAAsDe,IAA5D;IAEO/c,MAAA,CAAAD,KAAA,oBAAkB4R,SAAlB;IACA3R,MAAA,CAAAD,KAAA,oBAAkB6R,OAAlB;IACA5R,MAAA,CAAAD,KAAA,oBAAkB+a,GAAlB;IAEPR,OAAA,GAAUta,MAAO,CAAAsa,OAAP,CAAe,uBAAf,EAAwCgB,KAAxC,EAAV;;IAEI,IAAA;MACF,MAAMC,gBAAgBhB,MAAO,CAAAiB,KAAP,GAAe1M,MAAf,CAAsB;QAAC6C;MAAD,CAAtB,CAAtB;MACM,MAAA1S,QAAA,GAAW,MAAMsc,aAAA,CAAc9c,OAAd,CAAsC;QAC3DM,GAAA,0BAAsB6S,OAAtB,cAAiCkJ,GAAjC,CAD2D;QAE3D1b,MAAQ,EAAA,KAFmD;QAG3DG,IAAA,EAAM;UAACyc,gBAAD;UAAmBrL;QAAnB,CAHqD;QAI3DxR,YAAc,EAAA;MAJ6C,CAAtC,CAAjB;MAONmb,OAAA,CAAQqC,IAAR;MACA,MAAMK,SAASzB,aAAc,CAAA0B,MAAd,CACbhe,QAAS,CAAAie,QAAT,CAAkBta,OAAlB,CAA0B,8BAA1B,EAA0D,GAA1D,CADa,CAAf;MAGO5C,MAAA,CAAAD,KAAA,oBAAkBid,MAAlB;MACC1C,OAAA,CAAAgB,KAAA,CAAM,WAAN,EAAmBwB,OAAnB;MACR9c,MAAA,CAAOD,KAAP,CAAa,EAAb;KAfE,QAgBKuO,KAAP;MACAgM,OAAA,CAAQwB,IAAR;MACM,MAAAxN,GAAA;IACR;EACF;;EAKAiL,OAAA,CAAQ+C,IAAR,CAAa,CAAb;AACF;;AAEA,eAAeL,sBAAf,QAYqB;EAAA,IAZiB;IACpC/B,MADoC;IAEpCI,OAFoC;IAGpC4B,uBAHoC;IAIpCC,0BAJoC;IAKpC9B;EALoC,CAYjB;;EAEnB,IAAIH,MAAJ,EAAY;IACH,OAAA,IAAA;EACT;;EAGI,IAAA,OAAOgC,uBAAP,KAAmC,WAAnC,EAAgD;IAC3C,OAAAA,uBAAA;EACT;;EAGI,IAAA,OAAOC,0BAAP,KAAsC,WAAtC,EAAmD;IAC9C,OAAAA,0BAAA;EACT;;EAGA,IAAI,CAAC7C,aAAL,EAAoB;IACX,OAAA,IAAA;EACT;;EAGA,MAAM6D,WAAW7C,OAAQ,CAAA8C,IAAzB;EACA9C,OAAA,CAAQc,IAAR;EACM,MAAAwB,YAAA,GAAe,MAAMvC,MAAA,CAAOwC,MAAP,CAAuB;IAChDzb,IAAM,EAAA,SAD0C;IAEhDP,OAAS,EAAA,6CAFuC;IAGhDoO,OAAS,EAAA;EAHuC,CAAvB,CAArB;EAKEqL,OAAA,CAAA+C,KAAA,GAAQ/B,KAAR,CAAc6B,QAAd;EAED,OAAAP,YAAA;AACT;;AAEA,eAAejB,qBAAf,CACEpB,MADF,EAEE3I,OAFF,EAGEkJ,GAHF,EAOG;EACG,IAAA;IACI,MAAAwC,GAAA,GAAM,MAAMxe,aAAc,CAAAyb,MAAA,CAAO0C,MAAP,yBAA+BrL,OAA/B,cAA0CkJ,GAA1C,EAAA,EAAkD;MAChFyC,aAAe,mBAAUhD,MAAO,CAAAzL,MAAP,GAAgB0O,KAA1B;IADiE,CAAlD,CAA1B;IAIC,OAAA;MACL/B,mBAAmB6B,GAAI,CAAA,6BAAA,CADlB;MAEL5B,iBAAA,EAAmB4B,IAAI,8BAAJ,KAAuC;IAFrD,CAAA;GALL,QASKhP,KAAP;IACI,IAAAA,GAAA,CAAIjP,UAAJ,KAAmB,GAAnB,EAAwB;MAC1B,OAAO,EAAP;IACF;;IAEM,MAAAiP,GAAA;EACR;AACF;;AAEA,SAAS0L,aAAT,CAAuBhE,IAAvB,EAAgD;EAC9C,OAAOyH,cAAAA,CAAAA,SAAAA,CAAAA,CAAMC,OAAAA,CAAAA,OAAAA,CAAQ1H,IAAK,CAAA2H,IAAL,IAAapE,QAAQoE,IAA7BD,EAAmCE,KAAnCF,CAAyC,CAAzCA,CAAND,EACJI,MADIJ,CACG,KADHA,EACU;IAACrc,MAAM,QAAP;IAAiB0c,KAAA,EAAO;EAAxB,CADVL,EAEJI,MAFIJ,CAEG,SAFHA,EAEc;IAACrc,IAAA,EAAM;EAAP,CAFdqc,EAGJI,MAHIJ,CAGG,KAHHA,EAGU;IAACrc,IAAM,EAAA,QAAP;IAAiB6N,OAAS,EAAA;EAA1B,CAHVwO,EAIJI,MAJIJ,CAIG,YAJHA,EAIiB;IAACrc,IAAM,EAAA;EAAP,CAJjBqc,EAKJI,MALIJ,CAKG,0BALHA,EAK+B;IAACrc,IAAM,EAAA,SAAP;IAAkB6N,SAAS;EAA3B,CAL/BwO,EAMJI,MANIJ,CAMG,YANHA,EAMiB;IAACrc,IAAA,EAAM;EAAP,CANjBqc,EAOJI,MAPIJ,CAOG,SAPHA,EAOc;IAACrc,IAAA,EAAM,SAAP;IAAkB6N,OAAS,EAAA;EAA3B,CAPdwO,EAQJI,MARIJ,CAQG,OARHA,EAQY;IAACrc,IAAM,EAAA;EAAP,CARZqc,EAQ+BE,IARtC;AASF;;AAEA,SAASlB,aAAT,CACEF,KADF,SAGE;EAAA,IADA;IAACjC,OAAD;IAAUL;EAAV,CACA;EACA,MAAM;IAACuC,eAAD;IAAkBuB,eAAA,EAAiBC,QAAnC;IAA6CC,gBAAA,EAAkBC;EAA/D,IAA4E3B,KAAlF;;EACA,IAAIC,eAAJ,EAAqB;IACnBlC,OAAA,CAAQwB,IAAR;IACA,MAAM,IAAIjd,KAAJ,2CAA6C2d,eAA7C,EAAN;EACF;;EAEM,MAAAuB,eAAA,GAAkBC,QAAS,CAAA3c,MAAT,CAAiB8c,MAAD,IAAY,CAACtE,eAAgB,CAAA9W,QAAhB,CAAyBob,MAAO,CAAA/c,IAAhC,CAA7B,CAAlB;EACA,MAAA6c,gBAAA,GAAmBC,SAAU,CAAA7c,MAAV,CAAkB8c,MAAD,IAAY,CAACvE,eAAgB,CAAA7W,QAAhB,CAAyBob,MAAO,CAAA/c,IAAhC,CAA9B,CAAnB;EAEN,MAAMgd,qBAAwB,GAAAL,eAAA,CAAgBzW,MAAhB,GAAyB,CAAzB,IAA8B2W,iBAAiB3W,MAAjB,GAA0B,CAAtF;;EACA,IAAI2S,SAASmE,qBAAb,EAAoC;IAClC9D,OAAA,CAAQ8C,IAAR,GAAe,mEAAf;IACA9C,OAAA,CAAQc,IAAR;IACO,OAAA,IAAA;EACT,CAJA,MAIA,IAAWnB,KAAS,IAAA,CAACmE,qBAArB,EAA4C;IAC1C9D,OAAA,CAAQwC,OAAR;IACO,OAAA,IAAA;EACT;;EAEAxC,OAAA,CAAQc,IAAR;EACO,OAAA,KAAA;AACT;;AAEA,SAASsB,qBAAT,CAA+BH,KAA/B,EAA0Dvc,MAA1D,EAAgF;EAC9E,MAAM;IAAC+d,eAAA,EAAiBC,QAAlB;IAA4BC,gBAAA,EAAkBC;EAA9C,IAA2D3B,KAAjE;EAEM,MAAAwB,eAAA,GAAkBC,QAAS,CAAA3c,MAAT,CAAiB8c,MAAD,IAAY,CAACtE,eAAgB,CAAA9W,QAAhB,CAAyBob,MAAO,CAAA/c,IAAhC,CAA7B,CAAlB;EACA,MAAA6c,gBAAA,GAAmBC,SAAU,CAAA7c,MAAV,CAAkB8c,MAAD,IAAY,CAACvE,eAAgB,CAAA7W,QAAhB,CAAyBob,MAAO,CAAA/c,IAAhC,CAA9B,CAAnB;;EAEF,IAAA6c,gBAAA,CAAiB3W,MAAjB,GAA0B,CAA1B,EAA6B;IAC/BtH,MAAA,CAAOD,KAAP,CAAa,6DAAb;IACiBke,gBAAA,CAAA/d,OAAA,CAASie,MAAD,IAAYne,MAAA,CAAOD,KAAP,cAAmBoe,MAAA,CAAO3Y,WAA1B,EAApB;EACnB;;EAEI,IAAAuY,eAAA,CAAgBzW,MAAhB,GAAyB,CAAzB,EAA4B;IAC9BtH,MAAA,CAAOD,KAAP,CAAa,gDAAb;IACgBge,eAAA,CAAA7d,OAAA,CAASie,MAAD,IAAYne,MAAA,CAAOD,KAAP,cAAmBoe,MAAA,CAAO3Y,WAA1B,EAApB;EAClB;;EAEAxF,MAAA,CAAOD,KAAP,CAAa,EAAb;AACF;;AAEA,eAAe6b,oBAAf,QAcgC;EAAA,IAdI;IAClCH,iBADkC;IAElCI,mBAFkC;IAGlChR,KAHkC;IAIlCoP,KAJkC;IAKlCja,MALkC;IAMlCqa;EANkC,CAcJ;;EAO9B,IAAI,CAACoB,iBAAL,EAAwB;IACtB,MAAMlF,aAAasF,mBAAuB,IAAA1C,gBAA1C;;IACAkF,SAAA,CAAAA,KAAAA,CACE,wDADFA,EAEE9H,UAFF8H,EAGExC,sBAAsB,cAAc,SAHtCwC;;IAKO,OAAA9H,UAAA;EACT;;EAEI,IAAAsF,mBAAA,IAAuBA,wBAAwBJ,iBAA/C,EAAkE;IAChE,IAAA,CAACxB,KAAD,IAAU,CAACX,aAAX,EAA0B;MAC5B,MAAM,IAAIza,KAAJ,CAAUsM,2BAAV,wbACoB0Q,mBADpB,EAC6DhR,KAD7D,EAC+G4Q,iBAD/G,EAAN;IAIF;;IAEOzb,MAAA,CAAAob,IAAA,iCACoBS,mBADpB,gCAC6DhR,KAD7D,uDAC+G4Q,iBAD/G;IAIP,MAAM6C,aACJ,GAAArE,KAAA,KACC,MAAMI,MAAA,CAAOwC,MAAP,CAAc;MACnBzb,IAAM,EAAA,SADa;MAEnBP,OAAS,EAAA,kCAFU;MAGnBoO,OAAS,EAAA;IAHU,CAAd,CADP,CADF;IAQA,OAAOqP,gBAAgBzC,sBAAsB,KAAA,CAA7C;EACF;;EAEA,IAAIA,mBAAJ,EAAyB;IACvBwC,eAAAA,CAAM,iCAANA,EAAyCxC,mBAAzCwC;;IACO,OAAAxC,mBAAA;EACT;;EAEAwC,eAAAA,CAAM,2CAANA,EAAmD5C,iBAAnD4C;;EACO,OAAA5C,iBAAA;AACT;;AAEA,SAASM,yBAAT,CAAmCxF,UAAnC,EAA+F;EACtF,OAAA6C,WAAA,CAAYmF,cAAZ,CAA2BhI,UAA3B,CAAA;AACT;;"}