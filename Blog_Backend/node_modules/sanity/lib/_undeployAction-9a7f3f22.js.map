{"version":3,"file":"_undeployAction-9a7f3f22.js","sources":["../src/cli/actions/deploy/undeployAction.ts"],"sourcesContent":["import type {CliCommandArguments, CliCommandContext} from '@sanity/cli'\n\nexport default async function undeployStudio(\n  args: CliCommandArguments<Record<string, unknown>>,\n  context: CliCommandContext\n): Promise<void> {\n  const {apiClient, chalk, output, prompt} = context\n\n  const client = apiClient({\n    requireUser: true,\n    requireProject: true,\n  })\n\n  // Check that the project has a studio hostname\n  let spinner = output.spinner('Checking project info').start()\n  const project = await client.projects.getById(client.config().projectId as string)\n  const studioHost = project && project.studioHost\n  spinner.succeed()\n\n  if (!studioHost) {\n    output.print('Your project has not been assigned a studio hostname.')\n    output.print('Nothing to undeploy.')\n    return\n  }\n\n  // Double-check\n  output.print('')\n\n  const url = `https://${chalk.yellow(studioHost)}.sanity.studio`\n  const shouldUndeploy = await prompt.single({\n    type: 'confirm',\n    default: false,\n    message: `This will undeploy ${url} and make it unavailable for your users.\n  The hostname will be available for anyone to claim.\n  Are you ${chalk.red('sure')} you want to undeploy?`.trim(),\n  })\n\n  if (!shouldUndeploy) {\n    return\n  }\n\n  const projectId = client.config().projectId\n  const uri = `/projects/${projectId}`\n\n  spinner = output.spinner('Undeploying studio').start()\n  try {\n    await client.request({uri, method: 'PATCH', body: {studioHost: null}})\n    spinner.succeed()\n  } catch (err) {\n    spinner.fail()\n    throw err\n  }\n\n  output.print(\n    `Studio undeploy scheduled. It might take a few minutes before ${url} is unavailable.`\n  )\n}\n"],"names":["undeployStudio","args","context","apiClient","chalk","output","prompt","client","requireUser","requireProject","spinner","start","project","projects","getById","config","projectId","studioHost","succeed","print","url","yellow","shouldUndeploy","single","type","default","message","red","trim","uri","request","method","body","err","fail"],"mappings":"AAE8B,eAAAA,cAAA,CAC5BC,IAD4B,EAE5BC,OAF4B,EAGb;EACf,MAAM;IAACC,SAAD;IAAYC,KAAZ;IAAmBC,MAAnB;IAA2BC;EAA3B,IAAqCJ,OAA3C;EAEA,MAAMK,SAASJ,SAAU,CAAA;IACvBK,WAAa,EAAA,IADU;IAEvBC,cAAgB,EAAA;EAFO,CAAA,CAAzB;EAMA,IAAIC,OAAU,GAAAL,MAAA,CAAOK,OAAP,CAAe,uBAAf,EAAwCC,KAAxC,EAAd;EACM,MAAAC,OAAA,GAAU,MAAML,MAAO,CAAAM,QAAP,CAAgBC,OAAhB,CAAwBP,MAAO,CAAAQ,MAAP,GAAgBC,SAAxC,CAAhB;EACA,MAAAC,UAAA,GAAaL,WAAWA,OAAQ,CAAAK,UAAhC;EACNP,OAAA,CAAQQ,OAAR;;EAEA,IAAI,CAACD,UAAL,EAAiB;IACfZ,MAAA,CAAOc,KAAP,CAAa,uDAAb;IACAd,MAAA,CAAOc,KAAP,CAAa,sBAAb;IACA;EACF;;EAGAd,MAAA,CAAOc,KAAP,CAAa,EAAb;EAEA,MAAMC,GAAM,qBAAWhB,KAAM,CAAAiB,MAAN,CAAaJ,UAAb,CAAX,mBAAZ;EACM,MAAAK,cAAA,GAAiB,MAAMhB,MAAA,CAAOiB,MAAP,CAAc;IACzCC,IAAM,EAAA,SADmC;IAEzCC,OAAS,EAAA,KAFgC;IAGzCC,SAAS,6BAAsBN,GAAtB,wHAEDhB,KAAM,CAAAuB,GAAN,CAAU,MAAV,CAFC,4BAEyCC,IAFzC;EAHgC,CAAd,CAAvB;;EAQN,IAAI,CAACN,cAAL,EAAqB;IACnB;EACF;;EAEM,MAAAN,SAAA,GAAYT,MAAO,CAAAQ,MAAP,GAAgBC,SAA5B;EACN,MAAMa,0BAAmBb,UAAzB;EAEAN,OAAA,GAAUL,MAAO,CAAAK,OAAP,CAAe,oBAAf,EAAqCC,KAArC,EAAV;;EACI,IAAA;IACI,MAAAJ,MAAA,CAAOuB,OAAP,CAAe;MAACD,GAAD;MAAME,MAAA,EAAQ,OAAd;MAAuBC,IAAA,EAAM;QAACf,UAAA,EAAY;MAAb;IAA7B,CAAf,CAAA;IACNP,OAAA,CAAQQ,OAAR;GAFE,QAGKe,KAAP;IACAvB,OAAA,CAAQwB,IAAR;IACM,MAAAD,GAAA;EACR;;EAEO5B,MAAA,CAAAc,KAAA,yEAC4DC,GAD5D;AAGT;;"}