import React, { useCallback, useMemo } from 'react';
import { set, unset } from '../patch';
import { TagInput } from '../components/tagInput';
export function TagsArrayInput(props) {
    const { onChange, readOnly, value = [], elementProps } = props;
    const tagInputValue = useMemo(() => value?.map((v) => ({ value: v })), [value]);
    const handleChange = useCallback((nextValue) => {
        onChange(nextValue.length === 0 ? unset() : set(nextValue.map((v) => v.value)));
    }, [onChange]);
    return (React.createElement(TagInput, { onChange: handleChange, readOnly: readOnly, value: tagInputValue, ...elementProps }));
}
//# sourceMappingURL=TagsArrayInput.js.map