import type { PreviewConfig } from './preview';
import type { InitialValueProperty, Schema, SchemaValidationValue } from './types';
export interface DefineOptions<TStrict extends StrictDefinition, TAlias extends Schema.Type | undefined> {
    /**
     * `strict: false` allows unknown properties in the schema.
     * Use this when adding customizations to the schema that are not part of sanity core.
     *
     * If you want to extend the Sanity Schema types with your own properties or options to make them typesafe,
     * you can use [TypeScript declaration merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html).
     *
     * See {@link defineType} for more.
     *
     * @see defineType
     */
    strict?: TStrict;
    /** Should be provided when type is a non-intrinsic type, ie type is a type alias */
    aliasFor?: TAlias extends Schema.Type ? TAlias : never;
}
export declare type IntrinsicBase = {
    [K in keyof Schema.IntrinsicTypeDefinition]: Omit<Schema.IntrinsicTypeDefinition[K], 'preview'>;
};
export declare type IntrinsicArrayOfBase = {
    [K in keyof Schema.IntrinsicTypeDefinition]: Omit<Schema.ArrayOfEntry<Schema.IntrinsicTypeDefinition[K]>, 'preview'>;
};
export declare type DefineSchemaBase<TType extends string, TAlias extends Schema.Type | undefined> = TType extends Schema.Type ? IntrinsicBase[TType] : Schema.TypeAliasDefinition<TType, TAlias>;
export declare type DefineSchemaType<TType extends string, TAlias extends Schema.Type | undefined> = TType extends Schema.Type ? Schema.IntrinsicTypeDefinition[TType] : Schema.TypeAliasDefinition<TType, TAlias>;
export declare type DefineArrayMemberBase<TType extends string, TAlias extends Schema.Type | undefined> = TType extends Schema.Type ? IntrinsicArrayOfBase[TType] : Schema.ArrayOfEntry<Schema.TypeAliasDefinition<string, TAlias>>;
export declare type StrictDefinition = boolean | undefined;
export declare type MaybeAllowUnknownProps<TStrict extends StrictDefinition> = TStrict extends false ? {
    options?: {
        [index: string]: any;
    };
    [index: string]: any;
} : unknown;
declare type MaybePreview<Select extends Record<string, string> | undefined, PrepareValue extends Record<keyof Select, any> | undefined> = Select extends Record<string, string> ? PrepareValue extends Record<keyof Select, any> ? PreviewConfig<Select, PrepareValue> : never : never;
export declare type NarrowPreview<TType extends string, TAlias extends Schema.Type | undefined, TSelect extends Record<string, string> | undefined, TPrepareValue extends Record<keyof TSelect, any> | undefined> = DefineSchemaType<TType, TAlias> extends {
    preview?: Record<string, any>;
} ? {
    preview?: MaybePreview<TSelect, TPrepareValue>;
} : unknown;
export interface WidenValidation {
    validation?: SchemaValidationValue;
}
export interface WidenInitialValue {
    initialValue?: InitialValueProperty<any, any>;
}
export {};
//# sourceMappingURL=defineTypes.d.ts.map