import type { CustomValidator, FieldReference } from '../validation';
export interface RuleDef<T, FieldValue = unknown> {
    required: () => T;
    custom: <LenientFieldValue extends FieldValue>(fn: CustomValidator<LenientFieldValue | undefined>) => T;
    error: (message?: string) => T;
    warning: (message?: string) => T;
    valueOfField: (path: string | string[]) => FieldReference;
}
export declare type RuleBuilder<T extends RuleDef<T, FieldValue>, FieldValue = unknown> = T | T[];
export declare type ValidationBuilder<T extends RuleDef<T, FieldValue>, FieldValue = unknown> = (rule: T) => RuleBuilder<T, FieldValue>;
//# sourceMappingURL=ruleBuilder.d.ts.map