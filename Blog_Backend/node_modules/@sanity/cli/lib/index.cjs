'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var resolveRootDir = require('./_resolveRootDir-ab271d25.cjs');

require('url');

require('events');

require('https');

require('http');

require('util');

require('get-it');

require('get-it/lib/middleware/observable');

require('get-it/lib/middleware/jsonRequest');

require('get-it/lib/middleware/jsonResponse');

require('get-it/lib/middleware/progress');

require('get-it/lib-node/middleware/retry');

require('get-it/lib-node/middleware/debug');

require('get-it/lib-node/middleware/headers');

require('path');

require('fs');

require('worker_threads');

require('esbuild-register/dist/node');

require('pkg-dir');

require('tty');

require('os');

function createCliConfig(config) {
  return config;
}

function getCliClient() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (typeof process !== "object") {
    throw new Error("getCliClient() should only be called from node.js scripts");
  }

  const {
    cwd = process.env.SANITY_BASE_PATH || process.cwd(),
    useCdn = false,
    apiVersion = "2022-06-06",
    projectId,
    dataset,
    token = getCliClient.__internal__getToken()
  } = options;

  if (projectId && dataset) {
    return resolveRootDir.sanityClient({
      projectId,
      dataset,
      apiVersion,
      useCdn,
      token
    });
  }

  const rootDir = resolveRootDir.resolveRootDir(cwd);
  const {
    config
  } = resolveRootDir.getCliConfigSync(rootDir) || {};

  if (!config) {
    throw new Error("Unable to resolve CLI configuration");
  }

  const apiConfig = (config == null ? void 0 : config.api) || {};

  if (!apiConfig.projectId || !apiConfig.dataset) {
    throw new Error("Unable to resolve project ID/dataset from CLI configuration");
  }

  return resolveRootDir.sanityClient({
    projectId: apiConfig.projectId,
    dataset: apiConfig.dataset,
    apiVersion,
    useCdn,
    token
  });
}

getCliClient.__internal__getToken = () => void 0;

exports.createCliConfig = createCliConfig;
exports.getCliClient = getCliClient;
//# sourceMappingURL=index.cjs.map
