{"version":3,"file":"index.cjs","sources":["../src/config.ts","../src/cliClient.ts"],"sourcesContent":["import type {CliConfig} from './types'\n\nexport function createCliConfig(config: CliConfig): CliConfig {\n  return config\n}\n","import sanityClient, {SanityClient} from '@sanity/client'\nimport {getCliConfigSync} from './util/getCliConfig'\nimport {resolveRootDir} from './util/resolveRootDir'\n\nexport interface CliClientOptions {\n  cwd?: string\n\n  projectId?: string\n  dataset?: string\n  useCdn?: boolean\n  token?: string\n  apiVersion?: string\n}\n\nexport function getCliClient(options: CliClientOptions = {}): SanityClient {\n  if (typeof process !== 'object') {\n    throw new Error('getCliClient() should only be called from node.js scripts')\n  }\n\n  const {\n    // eslint-disable-next-line no-process-env\n    cwd = process.env.SANITY_BASE_PATH || process.cwd(),\n    useCdn = false,\n    apiVersion = '2022-06-06',\n    projectId,\n    dataset,\n    token = getCliClient.__internal__getToken(),\n  } = options\n\n  if (projectId && dataset) {\n    return sanityClient({projectId, dataset, apiVersion, useCdn, token})\n  }\n\n  const rootDir = resolveRootDir(cwd)\n  const {config} = getCliConfigSync(rootDir) || {}\n  if (!config) {\n    throw new Error('Unable to resolve CLI configuration')\n  }\n\n  const apiConfig = config?.api || {}\n  if (!apiConfig.projectId || !apiConfig.dataset) {\n    throw new Error('Unable to resolve project ID/dataset from CLI configuration')\n  }\n\n  return sanityClient({\n    projectId: apiConfig.projectId,\n    dataset: apiConfig.dataset,\n    apiVersion,\n    useCdn,\n    token,\n  })\n}\n\n/* eslint-disable camelcase */\n/**\n * @internal\n * @deprecated This is only for INTERNAL use, and should not be relied upon outside of official Sanity modules\n * @returns A token to use when constructing a client without a `token` explicitly defined, or undefined\n */\ngetCliClient.__internal__getToken = (): string | undefined => undefined\n/* eslint-enable camelcase */\n"],"names":["createCliConfig","config","getCliClient","options","process","Error","cwd","env","SANITY_BASE_PATH","useCdn","apiVersion","projectId","dataset","token","__internal__getToken","sanityClient","rootDir","resolveRootDir","getCliConfigSync","apiConfig","api"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,SAASA,eAAT,CAAyBC,MAAzB,EAAuD;EACrD,OAAAA,MAAA;AACT;;ACUgB,SAAAC,YAAA,GAA2D;EAAA,IAA9CC,OAA8C,uEAAlB,EAAkB;;EACrE,IAAA,OAAOC,OAAP,KAAmB,QAAnB,EAA6B;IACzB,MAAA,IAAIC,KAAJ,CAAU,2DAAV,CAAA;EACR;;EAEM,MAAA;IAEJC,GAAM,GAAAF,OAAA,CAAQG,GAAR,CAAYC,gBAAZ,IAAgCJ,QAAQE,GAAR,EAFlC;IAGJG,MAAS,GAAA,KAHL;IAIJC,UAAa,GAAA,YAJT;IAKJC,SALI;IAMJC,OANI;IAOJC,KAAA,GAAQX,aAAaY,oBAAb;EAPJ,IAQFX,OARE;;EAUN,IAAIQ,aAAaC,OAAjB,EAA0B;IACxB,OAAOG,cAAAA,CAAAA,YAAAA,CAAa;MAACJ,SAAD;MAAYC,OAAZ;MAAqBF,UAArB;MAAiCD,MAAjC;MAAyCI;IAAzC,CAAbE,CAAP;EACF;;EAEM,MAAAC,OAAA,GAAUC,6BAAAA,CAAeX,GAAfW,CAAV;EACN,MAAM;IAAChB;EAAD,IAAWiB,cAAiB,CAAAA,gBAAjBA,CAAiBF,OAAjBE,KAA6B,EAA9C;;EACA,IAAI,CAACjB,MAAL,EAAa;IACL,MAAA,IAAII,KAAJ,CAAU,qCAAV,CAAA;EACR;;EAEM,MAAAc,SAAA,GAAA,CAAYlB,MAAQ,IAAA,IAAR,GAAQ,KAAA,CAAR,GAAQA,MAAA,CAAAmB,GAApB,KAA2B,EAA3B;;EACN,IAAI,CAACD,SAAA,CAAUR,SAAX,IAAwB,CAACQ,UAAUP,OAAvC,EAAgD;IACxC,MAAA,IAAIP,KAAJ,CAAU,6DAAV,CAAA;EACR;;EAEA,OAAOU,2BAAAA,CAAa;IAClBJ,WAAWQ,SAAU,CAAAR,SADH;IAElBC,SAASO,SAAU,CAAAP,OAFD;IAGlBF,UAHkB;IAIlBD,MAJkB;IAKlBI;EALkB,CAAbE,CAAP;AAOF;;AAQAb,YAAA,CAAaY,oBAAb,GAAoC,MAA0B,KAAA,CAA9D;;;"}